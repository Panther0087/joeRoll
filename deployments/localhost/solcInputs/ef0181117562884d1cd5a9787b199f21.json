{
  "language": "Solidity",
  "sources": {
    "contracts/boringcrypto/BoringCryptoDashboardV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2020-10-09\r\n */\r\n\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../interfaces/IFactory.sol\";\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary BoringERC20 {\r\n    function returnDataToString(bytes memory data)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        if (data.length >= 64) {\r\n            return abi.decode(data, (string));\r\n        } else if (data.length == 32) {\r\n            uint8 i = 0;\r\n            while (i < 32 && data[i] != 0) {\r\n                i++;\r\n            }\r\n            bytes memory bytesArray = new bytes(i);\r\n            for (i = 0; i < 32 && data[i] != 0; i++) {\r\n                bytesArray[i] = data[i];\r\n            }\r\n            return string(bytesArray);\r\n        } else {\r\n            return \"???\";\r\n        }\r\n    }\r\n\r\n    function symbol(IERC20 token) internal view returns (string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(\r\n            abi.encodeWithSelector(0x95d89b41)\r\n        );\r\n        return success ? returnDataToString(data) : \"???\";\r\n    }\r\n\r\n    function name(IERC20 token) internal view returns (string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(\r\n            abi.encodeWithSelector(0x06fdde03)\r\n        );\r\n        return success ? returnDataToString(data) : \"???\";\r\n    }\r\n\r\n    function decimals(IERC20 token) internal view returns (uint8) {\r\n        (bool success, bytes memory data) = address(token).staticcall(\r\n            abi.encodeWithSelector(0x313ce567)\r\n        );\r\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\r\n    }\r\n\r\n    function DOMAIN_SEPARATOR(IERC20 token) internal view returns (bytes32) {\r\n        (bool success, bytes memory data) = address(token).staticcall{\r\n            gas: 10000\r\n        }(abi.encodeWithSelector(0x3644e515));\r\n        return\r\n            success && data.length == 32\r\n                ? abi.decode(data, (bytes32))\r\n                : bytes32(0);\r\n    }\r\n\r\n    function nonces(IERC20 token, address owner)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        (bool success, bytes memory data) = address(token).staticcall{\r\n            gas: 5000\r\n        }(abi.encodeWithSelector(0x7ecebe00, owner));\r\n        return\r\n            success && data.length == 32\r\n                ? abi.decode(data, (uint256))\r\n                : uint256(-1); // Use max uint256 to signal failure to retrieve nonce (probably not supported)\r\n    }\r\n}\r\n\r\ninterface IMasterChef {\r\n    function BONUS_MULTIPLIER() external view returns (uint256);\r\n\r\n    function devaddr() external view returns (address);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function startTimestamp() external view returns (uint256);\r\n\r\n    function joe() external view returns (address);\r\n\r\n    function joePerSec() external view returns (uint256);\r\n\r\n    function totalAllocPoint() external view returns (uint256);\r\n\r\n    function poolLength() external view returns (uint256);\r\n\r\n    function poolInfo(uint256 nr)\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function userInfo(uint256 nr, address who)\r\n        external\r\n        view\r\n        returns (uint256, uint256);\r\n\r\n    function pendingTokens(uint256 pid, address who)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            address,\r\n            string memory,\r\n            uint256\r\n        );\r\n}\r\n\r\ninterface IPair is IERC20 {\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112,\r\n            uint112,\r\n            uint32\r\n        );\r\n}\r\n\r\ncontract BoringCryptoDashboardV2 {\r\n    using SafeMath for uint256;\r\n\r\n    struct PairFull {\r\n        address token;\r\n        address token0;\r\n        address token1;\r\n        uint256 reserve0;\r\n        uint256 reserve1;\r\n        uint256 totalSupply;\r\n        uint256 balance;\r\n    }\r\n\r\n    function getPairsFull(address who, address[] calldata addresses)\r\n        public\r\n        view\r\n        returns (PairFull[] memory)\r\n    {\r\n        PairFull[] memory pairs = new PairFull[](addresses.length);\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            address token = addresses[i];\r\n            pairs[i].token = token;\r\n            pairs[i].token0 = IPair(token).token0();\r\n            pairs[i].token1 = IPair(token).token1();\r\n            (uint256 reserve0, uint256 reserve1, ) = IPair(token).getReserves();\r\n            pairs[i].reserve0 = reserve0;\r\n            pairs[i].reserve1 = reserve1;\r\n            pairs[i].balance = IERC20(token).balanceOf(who);\r\n            pairs[i].totalSupply = IERC20(token).totalSupply();\r\n        }\r\n        return pairs;\r\n    }\r\n\r\n    struct PoolsInfo {\r\n        uint256 totalAllocPoint;\r\n        uint256 poolLength;\r\n    }\r\n\r\n    struct PoolInfo {\r\n        uint256 pid;\r\n        IPair lpToken; // Address of LP token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. SUSHIs to distribute per block.\r\n        address token0;\r\n        address token1;\r\n    }\r\n\r\n    IMasterChef chef;\r\n    IFactory pangolinFactory;\r\n    IFactory joeFactory;\r\n    address wavax;\r\n\r\n    constructor(\r\n        address _chef,\r\n        address _pangolinFactory,\r\n        address _joeFactory,\r\n        address _wavax\r\n    ) public {\r\n        chef = IMasterChef(_chef);\r\n        pangolinFactory = IFactory(_pangolinFactory);\r\n        joeFactory = IFactory(_joeFactory);\r\n        wavax = _wavax;\r\n    }\r\n\r\n    function getPools(uint256[] calldata pids)\r\n        public\r\n        view\r\n        returns (PoolsInfo memory, PoolInfo[] memory)\r\n    {\r\n        PoolsInfo memory info;\r\n        info.totalAllocPoint = chef.totalAllocPoint();\r\n        uint256 poolLength = chef.poolLength();\r\n        info.poolLength = poolLength;\r\n\r\n        PoolInfo[] memory pools = new PoolInfo[](pids.length);\r\n\r\n        for (uint256 i = 0; i < pids.length; i++) {\r\n            pools[i].pid = pids[i];\r\n            (address lpToken, uint256 allocPoint, , ) = chef.poolInfo(pids[i]);\r\n            IPair pair = IPair(lpToken);\r\n            pools[i].lpToken = pair;\r\n            pools[i].allocPoint = allocPoint;\r\n\r\n            pools[i].token0 = pair.token0();\r\n            pools[i].token1 = pair.token1();\r\n        }\r\n        return (info, pools);\r\n    }\r\n\r\n    function findPools(address who, uint256[] calldata pids)\r\n        public\r\n        view\r\n        returns (PoolInfo[] memory)\r\n    {\r\n        uint256 count;\r\n\r\n        for (uint256 i = 0; i < pids.length; i++) {\r\n            (uint256 balance, ) = chef.userInfo(pids[i], who);\r\n            if (balance > 0) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        PoolInfo[] memory pools = new PoolInfo[](count);\r\n\r\n        count = 0;\r\n        for (uint256 i = 0; i < pids.length; i++) {\r\n            (uint256 balance, ) = chef.userInfo(pids[i], who);\r\n            if (balance > 0) {\r\n                pools[count].pid = pids[i];\r\n                (address lpToken, uint256 allocPoint, , ) = chef.poolInfo(\r\n                    pids[i]\r\n                );\r\n                IPair pair = IPair(lpToken);\r\n                pools[count].lpToken = pair;\r\n                pools[count].allocPoint = allocPoint;\r\n\r\n                pools[count].token0 = pair.token0();\r\n                pools[count].token1 = pair.token1();\r\n                count++;\r\n            }\r\n        }\r\n\r\n        return pools;\r\n    }\r\n\r\n    function getAVAXRate(address token) public view returns (uint256) {\r\n        uint256 avax_rate = 1e18;\r\n        if (token != wavax) {\r\n            IPair pairPangolin;\r\n            IPair pairJoe;\r\n            pairPangolin = IPair(\r\n                IFactory(pangolinFactory).getPair(token, wavax)\r\n            );\r\n            pairJoe = IPair(IFactory(joeFactory).getPair(token, wavax));\r\n            if (\r\n                address(pairPangolin) == address(0) &&\r\n                address(pairJoe) == address(0)\r\n            ) {\r\n                return 0;\r\n            }\r\n\r\n            uint112 reserve0Pangolin;\r\n            uint112 reserve1Pangolin;\r\n            uint112 reserve0Joe;\r\n            uint112 reserve1Joe;\r\n\r\n            if (address(pairPangolin) != address(0)) {\r\n                (reserve0Pangolin, reserve1Pangolin, ) = pairPangolin\r\n                .getReserves();\r\n            }\r\n            if (address(pairJoe) != address(0)) {\r\n                (reserve0Joe, reserve1Joe, ) = pairJoe.getReserves();\r\n            }\r\n\r\n            if (\r\n                address(pairJoe) == address(0) ||\r\n                reserve0Pangolin > reserve0Joe ||\r\n                reserve1Pangolin > reserve1Joe\r\n            ) {\r\n                if (pairPangolin.token0() == wavax) {\r\n                    avax_rate = uint256(reserve1Pangolin).mul(1e18).div(\r\n                        reserve0Pangolin\r\n                    );\r\n                } else {\r\n                    avax_rate = uint256(reserve0Pangolin).mul(1e18).div(\r\n                        reserve1Pangolin\r\n                    );\r\n                }\r\n            } else {\r\n                if (pairJoe.token0() == wavax) {\r\n                    avax_rate = uint256(reserve1Joe).mul(1e18).div(reserve0Joe);\r\n                } else {\r\n                    avax_rate = uint256(reserve0Joe).mul(1e18).div(reserve1Joe);\r\n                }\r\n            }\r\n        }\r\n        return avax_rate;\r\n    }\r\n\r\n    struct UserPoolInfo {\r\n        uint256 pid;\r\n        uint256 balance; // Balance of pool tokens\r\n        uint256 totalSupply; // Token staked lp tokens\r\n        uint256 lpBalance; // Balance of lp tokens not staked\r\n        uint256 lpTotalSupply; // TotalSupply of lp tokens\r\n        uint256 lpAllowance; // LP tokens approved for masterchef\r\n        uint256 reserve0;\r\n        uint256 reserve1;\r\n        uint256 token0rate;\r\n        uint256 token1rate;\r\n        uint256 rewardDebt;\r\n        uint256 pending; // Pending JOE\r\n    }\r\n\r\n    function pollPools(address who, uint256[] calldata pids)\r\n        public\r\n        view\r\n        returns (UserPoolInfo[] memory)\r\n    {\r\n        UserPoolInfo[] memory pools = new UserPoolInfo[](pids.length);\r\n\r\n        for (uint256 i = 0; i < pids.length; i++) {\r\n            (uint256 amount, ) = chef.userInfo(pids[i], who);\r\n            pools[i].balance = amount;\r\n            (uint256 pendingJoe, , , ) = chef.pendingTokens(pids[i], who);\r\n            pools[i].pending = pendingJoe;\r\n\r\n            (address lpToken, , , ) = chef.poolInfo(pids[i]);\r\n            pools[i].pid = pids[i];\r\n            IPair pair = IPair(lpToken);\r\n            pools[i].totalSupply = pair.balanceOf(address(chef));\r\n            pools[i].lpAllowance = pair.allowance(who, address(chef));\r\n            pools[i].lpBalance = pair.balanceOf(who);\r\n            pools[i].lpTotalSupply = pair.totalSupply();\r\n            pools[i].token0rate = getAVAXRate(pair.token0());\r\n            pools[i].token1rate = getAVAXRate(pair.token1());\r\n\r\n            (uint112 reserve0, uint112 reserve1, ) = pair.getReserves();\r\n            pools[i].reserve0 = reserve0;\r\n            pools[i].reserve1 = reserve1;\r\n        }\r\n        return pools;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/interfaces/IFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IFactory {\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function allPairs(uint256 i) external view returns (address);\r\n\r\n    function getPair(address token0, address token1)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/libraries/BoringPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nimport \"../interfaces/IPair.sol\";\r\nimport \"../interfaces/IFactory.sol\";\r\n\r\nlibrary BoringPair {\r\n    function factory(IPair pair) internal view returns (IFactory) {\r\n        (bool success, bytes memory data) = address(pair).staticcall(\r\n            abi.encodeWithSelector(0xc45a0155)\r\n        );\r\n        return\r\n            success && data.length == 32\r\n                ? abi.decode(data, (IFactory))\r\n                : IFactory(0);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\ninterface IPair is IERC20 {\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112,\r\n            uint112,\r\n            uint32\r\n        );\r\n}\r\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    // EIP 2612\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n"
    },
    "contracts/JoeVote.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"./interfaces/IPair.sol\";\r\nimport \"./interfaces/IBar.sol\";\r\n\r\ninterface IMasterChef {\r\n    function userInfo(uint256 pid, address owner)\r\n        external\r\n        view\r\n        returns (uint256, uint256);\r\n}\r\n\r\ncontract JoeVote {\r\n    using SafeMath for uint256;\r\n\r\n    IPair pair; // JOE-AVAX LP\r\n    IBar bar;\r\n    IERC20 joe;\r\n    IMasterChef chef;\r\n    uint256 pid; // Pool ID of the JOE-AVAX LP in MasterChefV2\r\n\r\n    function name() public pure returns (string memory) {\r\n        return \"JoeVote\";\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return \"JOEVOTE\";\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    constructor(\r\n        address _pair,\r\n        address _bar,\r\n        address _joe,\r\n        address _chef,\r\n        uint256 _pid\r\n    ) public {\r\n        pair = IPair(_pair);\r\n        bar = IBar(_bar);\r\n        joe = IERC20(_joe);\r\n        chef = IMasterChef(_chef);\r\n        pid = _pid;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        (uint256 lp_totalJoe, , ) = pair.getReserves();\r\n        uint256 xjoe_totalJoe = joe.balanceOf(address(bar));\r\n\r\n        return lp_totalJoe.mul(2).add(xjoe_totalJoe);\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        //////////////////////////\r\n        // Get balance from LPs //\r\n        //////////////////////////\r\n        uint256 lp_totalJoe = joe.balanceOf(address(pair));\r\n        uint256 lp_total = pair.totalSupply();\r\n        uint256 lp_balance = pair.balanceOf(owner);\r\n\r\n        // Add staked balance\r\n        (uint256 lp_stakedBalance, ) = chef.userInfo(pid, owner);\r\n        lp_balance = lp_balance.add(lp_stakedBalance);\r\n\r\n        // LP voting power is 2x the users JOE share in the pool.\r\n        uint256 lp_powah = lp_totalJoe.mul(lp_balance).div(lp_total).mul(2);\r\n\r\n        ///////////////////////////\r\n        // Get balance from xJOE //\r\n        ///////////////////////////\r\n\r\n        uint256 xjoe_balance = bar.balanceOf(owner);\r\n        uint256 xjoe_total = bar.totalSupply();\r\n        uint256 xjoe_totalJoe = joe.balanceOf(address(bar));\r\n\r\n        // xJOE voting power is the users JOE share in the bar\r\n        uint256 xjoe_powah = xjoe_totalJoe.mul(xjoe_balance).div(xjoe_total);\r\n\r\n        //////////////////////////\r\n        // Get balance from JOE //\r\n        //////////////////////////\r\n\r\n        uint256 joe_balance = joe.balanceOf(owner);\r\n\r\n        return lp_powah.add(xjoe_powah).add(joe_balance);\r\n    }\r\n\r\n    function allowance(address, address) public pure returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    function transfer(address, uint256) public pure returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    function approve(address, uint256) public pure returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    function transferFrom(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) public pure returns (bool) {\r\n        return false;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IBar.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface IBar {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/Zap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.6.12;\r\n\r\n/*\r\n * Trader Joe\r\n * MIT License; modified from PancakeBunny\r\n *\r\n */\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\n\r\nimport \"./traderjoe/interfaces/IJoePair.sol\";\r\nimport \"./traderjoe/interfaces/IJoeRouter02.sol\";\r\nimport \"./traderjoe/interfaces/IWAVAX.sol\";\r\n\r\ncontract Zap is OwnableUpgradeable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /* ========== CONSTANT VARIABLES ========== */\r\n\r\n    address public JOE;\r\n    address public constant USDT = 0xde3A24028580884448a5397872046a019649b084;\r\n    address public constant DAI = 0xbA7dEebBFC5fA1100Fb055a87773e1E99Cd3507a;\r\n    address public constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\r\n\r\n    IJoeRouter02 private ROUTER;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    mapping(address => bool) private notLP;\r\n    mapping(address => address) private routePairAddresses;\r\n    address[] public tokens;\r\n\r\n    /* ========== INITIALIZER ========== */\r\n\r\n    function initialize(address _joe, address _router) external initializer {\r\n        __Ownable_init();\r\n        require(owner() != address(0), \"ZapETH: owner must be set\");\r\n\r\n        JOE = _joe;\r\n        ROUTER = IJoeRouter02(_router);\r\n        setNotLP(WAVAX);\r\n        setNotLP(USDT);\r\n        setNotLP(JOE);\r\n        setNotLP(DAI);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    /* ========== View Functions ========== */\r\n\r\n    function isLP(address _address) public view returns (bool) {\r\n        return !notLP[_address];\r\n    }\r\n\r\n    function routePair(address _address) external view returns (address) {\r\n        return routePairAddresses[_address];\r\n    }\r\n\r\n    /* ========== External Functions ========== */\r\n\r\n    function zapInToken(\r\n        address _from,\r\n        uint256 amount,\r\n        address _to\r\n    ) external {\r\n        IERC20(_from).safeTransferFrom(msg.sender, address(this), amount);\r\n        _approveTokenIfNeeded(_from);\r\n\r\n        if (isLP(_to)) {\r\n            IJoePair pair = IJoePair(_to);\r\n            address token0 = pair.token0();\r\n            address token1 = pair.token1();\r\n            if (_from == token0 || _from == token1) {\r\n                // swap half amount for other\r\n                address other = _from == token0 ? token1 : token0;\r\n                _approveTokenIfNeeded(other);\r\n                uint256 sellAmount = amount.div(2);\r\n                uint256 otherAmount = _swap(\r\n                    _from,\r\n                    sellAmount,\r\n                    other,\r\n                    address(this)\r\n                );\r\n                ROUTER.addLiquidity(\r\n                    _from,\r\n                    other,\r\n                    amount.sub(sellAmount),\r\n                    otherAmount,\r\n                    0,\r\n                    0,\r\n                    msg.sender,\r\n                    block.timestamp\r\n                );\r\n            } else {\r\n                uint256 avaxAmount = _swapTokenForAVAX(\r\n                    _from,\r\n                    amount,\r\n                    address(this)\r\n                );\r\n                _swapAVAXToLP(_to, avaxAmount, msg.sender);\r\n            }\r\n        } else {\r\n            _swap(_from, amount, _to, msg.sender);\r\n        }\r\n    }\r\n\r\n    function zapIn(address _to) external payable {\r\n        _swapAVAXToLP(_to, msg.value, msg.sender);\r\n    }\r\n\r\n    function zapOut(address _from, uint256 amount) external {\r\n        IERC20(_from).safeTransferFrom(msg.sender, address(this), amount);\r\n        _approveTokenIfNeeded(_from);\r\n\r\n        if (!isLP(_from)) {\r\n            _swapTokenForAVAX(_from, amount, msg.sender);\r\n        } else {\r\n            IJoePair pair = IJoePair(_from);\r\n            address token0 = pair.token0();\r\n            address token1 = pair.token1();\r\n            if (token0 == WAVAX || token1 == WAVAX) {\r\n                ROUTER.removeLiquidityAVAX(\r\n                    token0 != WAVAX ? token0 : token1,\r\n                    amount,\r\n                    0,\r\n                    0,\r\n                    msg.sender,\r\n                    block.timestamp\r\n                );\r\n            } else {\r\n                ROUTER.removeLiquidity(\r\n                    token0,\r\n                    token1,\r\n                    amount,\r\n                    0,\r\n                    0,\r\n                    msg.sender,\r\n                    block.timestamp\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /* ========== Private Functions ========== */\r\n\r\n    function _approveTokenIfNeeded(address token) private {\r\n        if (IERC20(token).allowance(address(this), address(ROUTER)) == 0) {\r\n            IERC20(token).safeApprove(address(ROUTER), uint256(~0));\r\n        }\r\n    }\r\n\r\n    function _swapAVAXToLP(\r\n        address lp,\r\n        uint256 amount,\r\n        address receiver\r\n    ) private {\r\n        if (!isLP(lp)) {\r\n            _swapAVAXForToken(lp, amount, receiver);\r\n        } else {\r\n            // lp\r\n            IJoePair pair = IJoePair(lp);\r\n            address token0 = pair.token0();\r\n            address token1 = pair.token1();\r\n            if (token0 == WAVAX || token1 == WAVAX) {\r\n                address token = token0 == WAVAX ? token1 : token0;\r\n                uint256 swapValue = amount.div(2);\r\n                uint256 tokenAmount = _swapAVAXForToken(\r\n                    token,\r\n                    swapValue,\r\n                    address(this)\r\n                );\r\n\r\n                _approveTokenIfNeeded(token);\r\n                ROUTER.addLiquidityAVAX{value: amount.sub(swapValue)}(\r\n                    token,\r\n                    tokenAmount,\r\n                    0,\r\n                    0,\r\n                    receiver,\r\n                    block.timestamp\r\n                );\r\n            } else {\r\n                uint256 swapValue = amount.div(2);\r\n                uint256 token0Amount = _swapAVAXForToken(\r\n                    token0,\r\n                    swapValue,\r\n                    address(this)\r\n                );\r\n                uint256 token1Amount = _swapAVAXForToken(\r\n                    token1,\r\n                    amount.sub(swapValue),\r\n                    address(this)\r\n                );\r\n\r\n                _approveTokenIfNeeded(token0);\r\n                _approveTokenIfNeeded(token1);\r\n                ROUTER.addLiquidity(\r\n                    token0,\r\n                    token1,\r\n                    token0Amount,\r\n                    token1Amount,\r\n                    0,\r\n                    0,\r\n                    receiver,\r\n                    block.timestamp\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function _swapAVAXForToken(\r\n        address token,\r\n        uint256 value,\r\n        address receiver\r\n    ) private returns (uint256) {\r\n        address[] memory path;\r\n\r\n        if (routePairAddresses[token] != address(0)) {\r\n            path = new address[](3);\r\n            path[0] = WAVAX;\r\n            path[1] = routePairAddresses[token];\r\n            path[2] = token;\r\n        } else {\r\n            path = new address[](2);\r\n            path[0] = WAVAX;\r\n            path[1] = token;\r\n        }\r\n\r\n        uint256[] memory amounts = ROUTER.swapExactAVAXForTokens{value: value}(\r\n            0,\r\n            path,\r\n            receiver,\r\n            block.timestamp\r\n        );\r\n        return amounts[amounts.length - 1];\r\n    }\r\n\r\n    function _swapTokenForAVAX(\r\n        address token,\r\n        uint256 amount,\r\n        address receiver\r\n    ) private returns (uint256) {\r\n        address[] memory path;\r\n        if (routePairAddresses[token] != address(0)) {\r\n            path = new address[](3);\r\n            path[0] = token;\r\n            path[1] = routePairAddresses[token];\r\n            path[2] = WAVAX;\r\n        } else {\r\n            path = new address[](2);\r\n            path[0] = token;\r\n            path[1] = WAVAX;\r\n        }\r\n\r\n        uint256[] memory amounts = ROUTER.swapExactTokensForAVAX(\r\n            amount,\r\n            0,\r\n            path,\r\n            receiver,\r\n            block.timestamp\r\n        );\r\n        return amounts[amounts.length - 1];\r\n    }\r\n\r\n    function _swap(\r\n        address _from,\r\n        uint256 amount,\r\n        address _to,\r\n        address receiver\r\n    ) private returns (uint256) {\r\n        address intermediate = routePairAddresses[_from];\r\n        if (intermediate == address(0)) {\r\n            intermediate = routePairAddresses[_to];\r\n        }\r\n\r\n        address[] memory path;\r\n        if (intermediate != address(0) && (_from == WAVAX || _to == WAVAX)) {\r\n            // [WAVAX, BUSD, VAI] or [VAI, BUSD, WAVAX]\r\n            path = new address[](3);\r\n            path[0] = _from;\r\n            path[1] = intermediate;\r\n            path[2] = _to;\r\n        } else if (\r\n            intermediate != address(0) &&\r\n            (_from == intermediate || _to == intermediate)\r\n        ) {\r\n            // [VAI, BUSD] or [BUSD, VAI]\r\n            path = new address[](2);\r\n            path[0] = _from;\r\n            path[1] = _to;\r\n        } else if (\r\n            intermediate != address(0) &&\r\n            routePairAddresses[_from] == routePairAddresses[_to]\r\n        ) {\r\n            // [VAI, DAI] or [VAI, USDC]\r\n            path = new address[](3);\r\n            path[0] = _from;\r\n            path[1] = intermediate;\r\n            path[2] = _to;\r\n        } else if (\r\n            routePairAddresses[_from] != address(0) &&\r\n            routePairAddresses[_to] != address(0) &&\r\n            routePairAddresses[_from] != routePairAddresses[_to]\r\n        ) {\r\n            // routePairAddresses[xToken] = xRoute\r\n            // [VAI, BUSD, WAVAX, xRoute, xToken]\r\n            path = new address[](5);\r\n            path[0] = _from;\r\n            path[1] = routePairAddresses[_from];\r\n            path[2] = WAVAX;\r\n            path[3] = routePairAddresses[_to];\r\n            path[4] = _to;\r\n        } else if (\r\n            intermediate != address(0) &&\r\n            routePairAddresses[_from] != address(0)\r\n        ) {\r\n            // [VAI, BUSD, WAVAX, BUNNY]\r\n            path = new address[](4);\r\n            path[0] = _from;\r\n            path[1] = intermediate;\r\n            path[2] = WAVAX;\r\n            path[3] = _to;\r\n        } else if (\r\n            intermediate != address(0) && routePairAddresses[_to] != address(0)\r\n        ) {\r\n            // [BUNNY, WAVAX, BUSD, VAI]\r\n            path = new address[](4);\r\n            path[0] = _from;\r\n            path[1] = WAVAX;\r\n            path[2] = intermediate;\r\n            path[3] = _to;\r\n        } else if (_from == WAVAX || _to == WAVAX) {\r\n            // [WAVAX, BUNNY] or [BUNNY, WAVAX]\r\n            path = new address[](2);\r\n            path[0] = _from;\r\n            path[1] = _to;\r\n        } else {\r\n            // [USDT, BUNNY] or [BUNNY, USDT]\r\n            path = new address[](3);\r\n            path[0] = _from;\r\n            path[1] = WAVAX;\r\n            path[2] = _to;\r\n        }\r\n\r\n        uint256[] memory amounts = ROUTER.swapExactTokensForTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            receiver,\r\n            block.timestamp\r\n        );\r\n        return amounts[amounts.length - 1];\r\n    }\r\n\r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    function setRoutePairAddress(address asset, address route)\r\n        external\r\n        onlyOwner\r\n    {\r\n        routePairAddresses[asset] = route;\r\n    }\r\n\r\n    function setNotLP(address token) public onlyOwner {\r\n        bool needPush = notLP[token] == false;\r\n        notLP[token] = true;\r\n        if (needPush) {\r\n            tokens.push(token);\r\n        }\r\n    }\r\n\r\n    function removeToken(uint256 i) external onlyOwner {\r\n        address token = tokens[i];\r\n        notLP[token] = false;\r\n        tokens[i] = tokens[tokens.length - 1];\r\n        tokens.pop();\r\n    }\r\n\r\n    function sweep() external onlyOwner {\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            address token = tokens[i];\r\n            if (token == address(0)) continue;\r\n            uint256 amount = IERC20(token).balanceOf(address(this));\r\n            if (amount > 0) {\r\n                if (token == WAVAX) {\r\n                    IWAVAX(token).withdraw(amount);\r\n                } else {\r\n                    _swapTokenForAVAX(token, amount, owner());\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 balance = address(this).balance;\r\n        if (balance > 0) {\r\n            payable(owner()).transfer(balance);\r\n        }\r\n    }\r\n\r\n    function withdraw(address token) external onlyOwner {\r\n        if (token == address(0)) {\r\n            payable(owner()).transfer(address(this).balance);\r\n            return;\r\n        }\r\n\r\n        IERC20(token).transfer(owner(), IERC20(token).balanceOf(address(this)));\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../GSN/ContextUpgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/traderjoe/interfaces/IJoePair.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IJoePair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n"
    },
    "contracts/traderjoe/interfaces/IJoeRouter02.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.6.2;\r\n\r\nimport \"./IJoeRouter01.sol\";\r\n\r\ninterface IJoeRouter02 is IJoeRouter01 {\r\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountAVAXMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountAVAX);\r\n\r\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountAVAXMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountAVAX);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n"
    },
    "contracts/traderjoe/interfaces/IWAVAX.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IWAVAX {\r\n    function deposit() external payable;\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function withdraw(uint256) external;\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n * \n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n * \n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        // extcodesize checks the size of the code stored in an address, and\n        // address returns the current address. Since the code is still not\n        // deployed when running a constructor, any checks on its code size will\n        // yield zero, making it an effective way to detect if a contract is\n        // under construction or not.\n        address self = address(this);\n        uint256 cs;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { cs := extcodesize(self) }\n        return cs == 0;\n    }\n}\n"
    },
    "contracts/traderjoe/interfaces/IJoeRouter01.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IJoeRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WAVAX() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityAVAX(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountAVAXMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountAVAX,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityAVAX(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountAVAXMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityAVAXWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountAVAXMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactAVAXForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactAVAX(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForAVAX(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapAVAXForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n"
    },
    "contracts/traderjoe/JoeRouter02.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity =0.6.12;\r\n\r\nimport \"./libraries/JoeLibrary.sol\";\r\nimport \"./libraries/SafeMath.sol\";\r\nimport \"./libraries/TransferHelper.sol\";\r\nimport \"./interfaces/IJoeRouter02.sol\";\r\nimport \"./interfaces/IJoeFactory.sol\";\r\nimport \"./interfaces/IERC20.sol\";\r\nimport \"./interfaces/IWAVAX.sol\";\r\n\r\ncontract JoeRouter02 is IJoeRouter02 {\r\n    using SafeMathJoe for uint256;\r\n\r\n    address public immutable override factory;\r\n    address public immutable override WAVAX;\r\n\r\n    modifier ensure(uint256 deadline) {\r\n        require(deadline >= block.timestamp, \"JoeRouter: EXPIRED\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _factory, address _WAVAX) public {\r\n        factory = _factory;\r\n        WAVAX = _WAVAX;\r\n    }\r\n\r\n    receive() external payable {\r\n        assert(msg.sender == WAVAX); // only accept AVAX via fallback from the WAVAX contract\r\n    }\r\n\r\n    // **** ADD LIQUIDITY ****\r\n    function _addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin\r\n    ) internal virtual returns (uint256 amountA, uint256 amountB) {\r\n        // create the pair if it doesn't exist yet\r\n        if (IJoeFactory(factory).getPair(tokenA, tokenB) == address(0)) {\r\n            IJoeFactory(factory).createPair(tokenA, tokenB);\r\n        }\r\n        (uint256 reserveA, uint256 reserveB) = JoeLibrary.getReserves(\r\n            factory,\r\n            tokenA,\r\n            tokenB\r\n        );\r\n        if (reserveA == 0 && reserveB == 0) {\r\n            (amountA, amountB) = (amountADesired, amountBDesired);\r\n        } else {\r\n            uint256 amountBOptimal = JoeLibrary.quote(\r\n                amountADesired,\r\n                reserveA,\r\n                reserveB\r\n            );\r\n            if (amountBOptimal <= amountBDesired) {\r\n                require(\r\n                    amountBOptimal >= amountBMin,\r\n                    \"JoeRouter: INSUFFICIENT_B_AMOUNT\"\r\n                );\r\n                (amountA, amountB) = (amountADesired, amountBOptimal);\r\n            } else {\r\n                uint256 amountAOptimal = JoeLibrary.quote(\r\n                    amountBDesired,\r\n                    reserveB,\r\n                    reserveA\r\n                );\r\n                assert(amountAOptimal <= amountADesired);\r\n                require(\r\n                    amountAOptimal >= amountAMin,\r\n                    \"JoeRouter: INSUFFICIENT_A_AMOUNT\"\r\n                );\r\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        virtual\r\n        override\r\n        ensure(deadline)\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        )\r\n    {\r\n        (amountA, amountB) = _addLiquidity(\r\n            tokenA,\r\n            tokenB,\r\n            amountADesired,\r\n            amountBDesired,\r\n            amountAMin,\r\n            amountBMin\r\n        );\r\n        address pair = JoeLibrary.pairFor(factory, tokenA, tokenB);\r\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\r\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\r\n        liquidity = IJoePair(pair).mint(to);\r\n    }\r\n\r\n    function addLiquidityAVAX(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountAVAXMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        virtual\r\n        override\r\n        ensure(deadline)\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountAVAX,\r\n            uint256 liquidity\r\n        )\r\n    {\r\n        (amountToken, amountAVAX) = _addLiquidity(\r\n            token,\r\n            WAVAX,\r\n            amountTokenDesired,\r\n            msg.value,\r\n            amountTokenMin,\r\n            amountAVAXMin\r\n        );\r\n        address pair = JoeLibrary.pairFor(factory, token, WAVAX);\r\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\r\n        IWAVAX(WAVAX).deposit{value: amountAVAX}();\r\n        assert(IWAVAX(WAVAX).transfer(pair, amountAVAX));\r\n        liquidity = IJoePair(pair).mint(to);\r\n        // refund dust eth, if any\r\n        if (msg.value > amountAVAX)\r\n            TransferHelper.safeTransferAVAX(msg.sender, msg.value - amountAVAX);\r\n    }\r\n\r\n    // **** REMOVE LIQUIDITY ****\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        public\r\n        virtual\r\n        override\r\n        ensure(deadline)\r\n        returns (uint256 amountA, uint256 amountB)\r\n    {\r\n        address pair = JoeLibrary.pairFor(factory, tokenA, tokenB);\r\n        IJoePair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\r\n        (uint256 amount0, uint256 amount1) = IJoePair(pair).burn(to);\r\n        (address token0, ) = JoeLibrary.sortTokens(tokenA, tokenB);\r\n        (amountA, amountB) = tokenA == token0\r\n            ? (amount0, amount1)\r\n            : (amount1, amount0);\r\n        require(amountA >= amountAMin, \"JoeRouter: INSUFFICIENT_A_AMOUNT\");\r\n        require(amountB >= amountBMin, \"JoeRouter: INSUFFICIENT_B_AMOUNT\");\r\n    }\r\n\r\n    function removeLiquidityAVAX(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountAVAXMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        public\r\n        virtual\r\n        override\r\n        ensure(deadline)\r\n        returns (uint256 amountToken, uint256 amountAVAX)\r\n    {\r\n        (amountToken, amountAVAX) = removeLiquidity(\r\n            token,\r\n            WAVAX,\r\n            liquidity,\r\n            amountTokenMin,\r\n            amountAVAXMin,\r\n            address(this),\r\n            deadline\r\n        );\r\n        TransferHelper.safeTransfer(token, to, amountToken);\r\n        IWAVAX(WAVAX).withdraw(amountAVAX);\r\n        TransferHelper.safeTransferAVAX(to, amountAVAX);\r\n    }\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external virtual override returns (uint256 amountA, uint256 amountB) {\r\n        address pair = JoeLibrary.pairFor(factory, tokenA, tokenB);\r\n        uint256 value = approveMax ? uint256(-1) : liquidity;\r\n        IJoePair(pair).permit(\r\n            msg.sender,\r\n            address(this),\r\n            value,\r\n            deadline,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n        (amountA, amountB) = removeLiquidity(\r\n            tokenA,\r\n            tokenB,\r\n            liquidity,\r\n            amountAMin,\r\n            amountBMin,\r\n            to,\r\n            deadline\r\n        );\r\n    }\r\n\r\n    function removeLiquidityAVAXWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountAVAXMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n        external\r\n        virtual\r\n        override\r\n        returns (uint256 amountToken, uint256 amountAVAX)\r\n    {\r\n        address pair = JoeLibrary.pairFor(factory, token, WAVAX);\r\n        uint256 value = approveMax ? uint256(-1) : liquidity;\r\n        IJoePair(pair).permit(\r\n            msg.sender,\r\n            address(this),\r\n            value,\r\n            deadline,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n        (amountToken, amountAVAX) = removeLiquidityAVAX(\r\n            token,\r\n            liquidity,\r\n            amountTokenMin,\r\n            amountAVAXMin,\r\n            to,\r\n            deadline\r\n        );\r\n    }\r\n\r\n    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\r\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountAVAXMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) public virtual override ensure(deadline) returns (uint256 amountAVAX) {\r\n        (, amountAVAX) = removeLiquidity(\r\n            token,\r\n            WAVAX,\r\n            liquidity,\r\n            amountTokenMin,\r\n            amountAVAXMin,\r\n            address(this),\r\n            deadline\r\n        );\r\n        TransferHelper.safeTransfer(\r\n            token,\r\n            to,\r\n            IERC20Joe(token).balanceOf(address(this))\r\n        );\r\n        IWAVAX(WAVAX).withdraw(amountAVAX);\r\n        TransferHelper.safeTransferAVAX(to, amountAVAX);\r\n    }\r\n\r\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountAVAXMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external virtual override returns (uint256 amountAVAX) {\r\n        address pair = JoeLibrary.pairFor(factory, token, WAVAX);\r\n        uint256 value = approveMax ? uint256(-1) : liquidity;\r\n        IJoePair(pair).permit(\r\n            msg.sender,\r\n            address(this),\r\n            value,\r\n            deadline,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n        amountAVAX = removeLiquidityAVAXSupportingFeeOnTransferTokens(\r\n            token,\r\n            liquidity,\r\n            amountTokenMin,\r\n            amountAVAXMin,\r\n            to,\r\n            deadline\r\n        );\r\n    }\r\n\r\n    // **** SWAP ****\r\n    // requires the initial amount to have already been sent to the first pair\r\n    function _swap(\r\n        uint256[] memory amounts,\r\n        address[] memory path,\r\n        address _to\r\n    ) internal virtual {\r\n        for (uint256 i; i < path.length - 1; i++) {\r\n            (address input, address output) = (path[i], path[i + 1]);\r\n            (address token0, ) = JoeLibrary.sortTokens(input, output);\r\n            uint256 amountOut = amounts[i + 1];\r\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\r\n                ? (uint256(0), amountOut)\r\n                : (amountOut, uint256(0));\r\n            address to = i < path.length - 2\r\n                ? JoeLibrary.pairFor(factory, output, path[i + 2])\r\n                : _to;\r\n            IJoePair(JoeLibrary.pairFor(factory, input, output)).swap(\r\n                amount0Out,\r\n                amount1Out,\r\n                to,\r\n                new bytes(0)\r\n            );\r\n        }\r\n    }\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        virtual\r\n        override\r\n        ensure(deadline)\r\n        returns (uint256[] memory amounts)\r\n    {\r\n        amounts = JoeLibrary.getAmountsOut(factory, amountIn, path);\r\n        require(\r\n            amounts[amounts.length - 1] >= amountOutMin,\r\n            \"JoeRouter: INSUFFICIENT_OUTPUT_AMOUNT\"\r\n        );\r\n        TransferHelper.safeTransferFrom(\r\n            path[0],\r\n            msg.sender,\r\n            JoeLibrary.pairFor(factory, path[0], path[1]),\r\n            amounts[0]\r\n        );\r\n        _swap(amounts, path, to);\r\n    }\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        virtual\r\n        override\r\n        ensure(deadline)\r\n        returns (uint256[] memory amounts)\r\n    {\r\n        amounts = JoeLibrary.getAmountsIn(factory, amountOut, path);\r\n        require(amounts[0] <= amountInMax, \"JoeRouter: EXCESSIVE_INPUT_AMOUNT\");\r\n        TransferHelper.safeTransferFrom(\r\n            path[0],\r\n            msg.sender,\r\n            JoeLibrary.pairFor(factory, path[0], path[1]),\r\n            amounts[0]\r\n        );\r\n        _swap(amounts, path, to);\r\n    }\r\n\r\n    function swapExactAVAXForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        virtual\r\n        override\r\n        ensure(deadline)\r\n        returns (uint256[] memory amounts)\r\n    {\r\n        require(path[0] == WAVAX, \"JoeRouter: INVALID_PATH\");\r\n        amounts = JoeLibrary.getAmountsOut(factory, msg.value, path);\r\n        require(\r\n            amounts[amounts.length - 1] >= amountOutMin,\r\n            \"JoeRouter: INSUFFICIENT_OUTPUT_AMOUNT\"\r\n        );\r\n        IWAVAX(WAVAX).deposit{value: amounts[0]}();\r\n        assert(\r\n            IWAVAX(WAVAX).transfer(\r\n                JoeLibrary.pairFor(factory, path[0], path[1]),\r\n                amounts[0]\r\n            )\r\n        );\r\n        _swap(amounts, path, to);\r\n    }\r\n\r\n    function swapTokensForExactAVAX(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        virtual\r\n        override\r\n        ensure(deadline)\r\n        returns (uint256[] memory amounts)\r\n    {\r\n        require(path[path.length - 1] == WAVAX, \"JoeRouter: INVALID_PATH\");\r\n        amounts = JoeLibrary.getAmountsIn(factory, amountOut, path);\r\n        require(amounts[0] <= amountInMax, \"JoeRouter: EXCESSIVE_INPUT_AMOUNT\");\r\n        TransferHelper.safeTransferFrom(\r\n            path[0],\r\n            msg.sender,\r\n            JoeLibrary.pairFor(factory, path[0], path[1]),\r\n            amounts[0]\r\n        );\r\n        _swap(amounts, path, address(this));\r\n        IWAVAX(WAVAX).withdraw(amounts[amounts.length - 1]);\r\n        TransferHelper.safeTransferAVAX(to, amounts[amounts.length - 1]);\r\n    }\r\n\r\n    function swapExactTokensForAVAX(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        virtual\r\n        override\r\n        ensure(deadline)\r\n        returns (uint256[] memory amounts)\r\n    {\r\n        require(path[path.length - 1] == WAVAX, \"JoeRouter: INVALID_PATH\");\r\n        amounts = JoeLibrary.getAmountsOut(factory, amountIn, path);\r\n        require(\r\n            amounts[amounts.length - 1] >= amountOutMin,\r\n            \"JoeRouter: INSUFFICIENT_OUTPUT_AMOUNT\"\r\n        );\r\n        TransferHelper.safeTransferFrom(\r\n            path[0],\r\n            msg.sender,\r\n            JoeLibrary.pairFor(factory, path[0], path[1]),\r\n            amounts[0]\r\n        );\r\n        _swap(amounts, path, address(this));\r\n        IWAVAX(WAVAX).withdraw(amounts[amounts.length - 1]);\r\n        TransferHelper.safeTransferAVAX(to, amounts[amounts.length - 1]);\r\n    }\r\n\r\n    function swapAVAXForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        virtual\r\n        override\r\n        ensure(deadline)\r\n        returns (uint256[] memory amounts)\r\n    {\r\n        require(path[0] == WAVAX, \"JoeRouter: INVALID_PATH\");\r\n        amounts = JoeLibrary.getAmountsIn(factory, amountOut, path);\r\n        require(amounts[0] <= msg.value, \"JoeRouter: EXCESSIVE_INPUT_AMOUNT\");\r\n        IWAVAX(WAVAX).deposit{value: amounts[0]}();\r\n        assert(\r\n            IWAVAX(WAVAX).transfer(\r\n                JoeLibrary.pairFor(factory, path[0], path[1]),\r\n                amounts[0]\r\n            )\r\n        );\r\n        _swap(amounts, path, to);\r\n        // refund dust eth, if any\r\n        if (msg.value > amounts[0])\r\n            TransferHelper.safeTransferAVAX(msg.sender, msg.value - amounts[0]);\r\n    }\r\n\r\n    // **** SWAP (supporting fee-on-transfer tokens) ****\r\n    // requires the initial amount to have already been sent to the first pair\r\n    function _swapSupportingFeeOnTransferTokens(\r\n        address[] memory path,\r\n        address _to\r\n    ) internal virtual {\r\n        for (uint256 i; i < path.length - 1; i++) {\r\n            (address input, address output) = (path[i], path[i + 1]);\r\n            (address token0, ) = JoeLibrary.sortTokens(input, output);\r\n            IJoePair pair = IJoePair(\r\n                JoeLibrary.pairFor(factory, input, output)\r\n            );\r\n            uint256 amountInput;\r\n            uint256 amountOutput;\r\n            {\r\n                // scope to avoid stack too deep errors\r\n                (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\r\n                (uint256 reserveInput, uint256 reserveOutput) = input == token0\r\n                    ? (reserve0, reserve1)\r\n                    : (reserve1, reserve0);\r\n                amountInput = IERC20Joe(input).balanceOf(address(pair)).sub(\r\n                    reserveInput\r\n                );\r\n                amountOutput = JoeLibrary.getAmountOut(\r\n                    amountInput,\r\n                    reserveInput,\r\n                    reserveOutput\r\n                );\r\n            }\r\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\r\n                ? (uint256(0), amountOutput)\r\n                : (amountOutput, uint256(0));\r\n            address to = i < path.length - 2\r\n                ? JoeLibrary.pairFor(factory, output, path[i + 2])\r\n                : _to;\r\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\r\n        }\r\n    }\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external virtual override ensure(deadline) {\r\n        TransferHelper.safeTransferFrom(\r\n            path[0],\r\n            msg.sender,\r\n            JoeLibrary.pairFor(factory, path[0], path[1]),\r\n            amountIn\r\n        );\r\n        uint256 balanceBefore = IERC20Joe(path[path.length - 1]).balanceOf(to);\r\n        _swapSupportingFeeOnTransferTokens(path, to);\r\n        require(\r\n            IERC20Joe(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >=\r\n                amountOutMin,\r\n            \"JoeRouter: INSUFFICIENT_OUTPUT_AMOUNT\"\r\n        );\r\n    }\r\n\r\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable virtual override ensure(deadline) {\r\n        require(path[0] == WAVAX, \"JoeRouter: INVALID_PATH\");\r\n        uint256 amountIn = msg.value;\r\n        IWAVAX(WAVAX).deposit{value: amountIn}();\r\n        assert(\r\n            IWAVAX(WAVAX).transfer(\r\n                JoeLibrary.pairFor(factory, path[0], path[1]),\r\n                amountIn\r\n            )\r\n        );\r\n        uint256 balanceBefore = IERC20Joe(path[path.length - 1]).balanceOf(to);\r\n        _swapSupportingFeeOnTransferTokens(path, to);\r\n        require(\r\n            IERC20Joe(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >=\r\n                amountOutMin,\r\n            \"JoeRouter: INSUFFICIENT_OUTPUT_AMOUNT\"\r\n        );\r\n    }\r\n\r\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external virtual override ensure(deadline) {\r\n        require(path[path.length - 1] == WAVAX, \"JoeRouter: INVALID_PATH\");\r\n        TransferHelper.safeTransferFrom(\r\n            path[0],\r\n            msg.sender,\r\n            JoeLibrary.pairFor(factory, path[0], path[1]),\r\n            amountIn\r\n        );\r\n        _swapSupportingFeeOnTransferTokens(path, address(this));\r\n        uint256 amountOut = IERC20Joe(WAVAX).balanceOf(address(this));\r\n        require(\r\n            amountOut >= amountOutMin,\r\n            \"JoeRouter: INSUFFICIENT_OUTPUT_AMOUNT\"\r\n        );\r\n        IWAVAX(WAVAX).withdraw(amountOut);\r\n        TransferHelper.safeTransferAVAX(to, amountOut);\r\n    }\r\n\r\n    // **** LIBRARY FUNCTIONS ****\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) public pure virtual override returns (uint256 amountB) {\r\n        return JoeLibrary.quote(amountA, reserveA, reserveB);\r\n    }\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) public pure virtual override returns (uint256 amountOut) {\r\n        return JoeLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\r\n    }\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) public pure virtual override returns (uint256 amountIn) {\r\n        return JoeLibrary.getAmountIn(amountOut, reserveIn, reserveOut);\r\n    }\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] memory path)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256[] memory amounts)\r\n    {\r\n        return JoeLibrary.getAmountsOut(factory, amountIn, path);\r\n    }\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] memory path)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256[] memory amounts)\r\n    {\r\n        return JoeLibrary.getAmountsIn(factory, amountOut, path);\r\n    }\r\n}\r\n"
    },
    "contracts/traderjoe/libraries/JoeLibrary.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.5.0;\r\n\r\nimport \"../interfaces/IJoePair.sol\";\r\n\r\nimport \"./SafeMath.sol\";\r\n\r\nlibrary JoeLibrary {\r\n    using SafeMathJoe for uint256;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB)\r\n        internal\r\n        pure\r\n        returns (address token0, address token1)\r\n    {\r\n        require(tokenA != tokenB, \"JoeLibrary: IDENTICAL_ADDRESSES\");\r\n        (token0, token1) = tokenA < tokenB\r\n            ? (tokenA, tokenB)\r\n            : (tokenB, tokenA);\r\n        require(token0 != address(0), \"JoeLibrary: ZERO_ADDRESS\");\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(\r\n            uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        hex\"ff\",\r\n                        factory,\r\n                        keccak256(abi.encodePacked(token0, token1)),\r\n                        hex\"0bbca9af0511ad1a1da383135cf3a8d2ac620e549ef9f6ae3a4c33c2fed0af91\" // init code fuji\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\r\n        (address token0, ) = sortTokens(tokenA, tokenB);\r\n        (uint256 reserve0, uint256 reserve1, ) = IJoePair(\r\n            pairFor(factory, tokenA, tokenB)\r\n        ).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0\r\n            ? (reserve0, reserve1)\r\n            : (reserve1, reserve0);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) internal pure returns (uint256 amountB) {\r\n        require(amountA > 0, \"JoeLibrary: INSUFFICIENT_AMOUNT\");\r\n        require(\r\n            reserveA > 0 && reserveB > 0,\r\n            \"JoeLibrary: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) internal pure returns (uint256 amountOut) {\r\n        require(amountIn > 0, \"JoeLibrary: INSUFFICIENT_INPUT_AMOUNT\");\r\n        require(\r\n            reserveIn > 0 && reserveOut > 0,\r\n            \"JoeLibrary: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n        uint256 amountInWithFee = amountIn.mul(997);\r\n        uint256 numerator = amountInWithFee.mul(reserveOut);\r\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) internal pure returns (uint256 amountIn) {\r\n        require(amountOut > 0, \"JoeLibrary: INSUFFICIENT_OUTPUT_AMOUNT\");\r\n        require(\r\n            reserveIn > 0 && reserveOut > 0,\r\n            \"JoeLibrary: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(\r\n        address factory,\r\n        uint256 amountIn,\r\n        address[] memory path\r\n    ) internal view returns (uint256[] memory amounts) {\r\n        require(path.length >= 2, \"JoeLibrary: INVALID_PATH\");\r\n        amounts = new uint256[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint256 i; i < path.length - 1; i++) {\r\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\r\n                factory,\r\n                path[i],\r\n                path[i + 1]\r\n            );\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(\r\n        address factory,\r\n        uint256 amountOut,\r\n        address[] memory path\r\n    ) internal view returns (uint256[] memory amounts) {\r\n        require(path.length >= 2, \"JoeLibrary: INVALID_PATH\");\r\n        amounts = new uint256[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint256 i = path.length - 1; i > 0; i--) {\r\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\r\n                factory,\r\n                path[i - 1],\r\n                path[i]\r\n            );\r\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/traderjoe/libraries/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity =0.6.12;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMathJoe {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n}\r\n"
    },
    "contracts/traderjoe/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.6.0;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending AVAX that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x095ea7b3, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: APPROVE_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0xa9059cbb, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FROM_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransferAVAX(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, \"TransferHelper: AVAX_TRANSFER_FAILED\");\r\n    }\r\n}\r\n"
    },
    "contracts/traderjoe/interfaces/IJoeFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IJoeFactory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function migrator() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n    function setMigrator(address) external;\r\n}\r\n"
    },
    "contracts/traderjoe/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IERC20Joe {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n"
    },
    "contracts/traderjoe/JoePair.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity =0.6.12;\r\n\r\nimport \"./JoeERC20.sol\";\r\nimport \"./libraries/Math.sol\";\r\nimport \"./libraries/UQ112x112.sol\";\r\nimport \"./interfaces/IERC20.sol\";\r\nimport \"./interfaces/IJoeFactory.sol\";\r\nimport \"./interfaces/IJoeCallee.sol\";\r\n\r\ninterface IMigrator {\r\n    // Return the desired amount of liquidity token that the migrator wants.\r\n    function desiredLiquidity() external view returns (uint256);\r\n}\r\n\r\ncontract JoePair is JoeERC20 {\r\n    using SafeMathJoe for uint256;\r\n    using UQ112x112 for uint224;\r\n\r\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\r\n    bytes4 private constant SELECTOR =\r\n        bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\r\n\r\n    address public factory;\r\n    address public token0;\r\n    address public token1;\r\n\r\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\r\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\r\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\r\n\r\n    uint256 public price0CumulativeLast;\r\n    uint256 public price1CumulativeLast;\r\n    uint256 public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\r\n\r\n    uint256 private unlocked = 1;\r\n    modifier lock() {\r\n        require(unlocked == 1, \"Joe: LOCKED\");\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n    function getReserves()\r\n        public\r\n        view\r\n        returns (\r\n            uint112 _reserve0,\r\n            uint112 _reserve1,\r\n            uint32 _blockTimestampLast\r\n        )\r\n    {\r\n        _reserve0 = reserve0;\r\n        _reserve1 = reserve1;\r\n        _blockTimestampLast = blockTimestampLast;\r\n    }\r\n\r\n    function _safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) private {\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(SELECTOR, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"Joe: TRANSFER_FAILED\"\r\n        );\r\n    }\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    constructor() public {\r\n        factory = msg.sender;\r\n    }\r\n\r\n    // called once by the factory at time of deployment\r\n    function initialize(address _token0, address _token1) external {\r\n        require(msg.sender == factory, \"Joe: FORBIDDEN\"); // sufficient check\r\n        token0 = _token0;\r\n        token1 = _token1;\r\n    }\r\n\r\n    // update reserves and, on the first call per block, price accumulators\r\n    function _update(\r\n        uint256 balance0,\r\n        uint256 balance1,\r\n        uint112 _reserve0,\r\n        uint112 _reserve1\r\n    ) private {\r\n        require(\r\n            balance0 <= uint112(-1) && balance1 <= uint112(-1),\r\n            \"Joe: OVERFLOW\"\r\n        );\r\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\r\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\r\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\r\n            // * never overflows, and + overflow is desired\r\n            price0CumulativeLast +=\r\n                uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) *\r\n                timeElapsed;\r\n            price1CumulativeLast +=\r\n                uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) *\r\n                timeElapsed;\r\n        }\r\n        reserve0 = uint112(balance0);\r\n        reserve1 = uint112(balance1);\r\n        blockTimestampLast = blockTimestamp;\r\n        emit Sync(reserve0, reserve1);\r\n    }\r\n\r\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\r\n    function _mintFee(uint112 _reserve0, uint112 _reserve1)\r\n        private\r\n        returns (bool feeOn)\r\n    {\r\n        address feeTo = IJoeFactory(factory).feeTo();\r\n        feeOn = feeTo != address(0);\r\n        uint256 _kLast = kLast; // gas savings\r\n        if (feeOn) {\r\n            if (_kLast != 0) {\r\n                uint256 rootK = Math.sqrt(uint256(_reserve0).mul(_reserve1));\r\n                uint256 rootKLast = Math.sqrt(_kLast);\r\n                if (rootK > rootKLast) {\r\n                    uint256 numerator = totalSupply.mul(rootK.sub(rootKLast));\r\n                    uint256 denominator = rootK.mul(5).add(rootKLast);\r\n                    uint256 liquidity = numerator / denominator;\r\n                    if (liquidity > 0) _mint(feeTo, liquidity);\r\n                }\r\n            }\r\n        } else if (_kLast != 0) {\r\n            kLast = 0;\r\n        }\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function mint(address to) external lock returns (uint256 liquidity) {\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\r\n        uint256 balance0 = IERC20Joe(token0).balanceOf(address(this));\r\n        uint256 balance1 = IERC20Joe(token1).balanceOf(address(this));\r\n        uint256 amount0 = balance0.sub(_reserve0);\r\n        uint256 amount1 = balance1.sub(_reserve1);\r\n\r\n        bool feeOn = _mintFee(_reserve0, _reserve1);\r\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        if (_totalSupply == 0) {\r\n            address migrator = IJoeFactory(factory).migrator();\r\n            if (msg.sender == migrator) {\r\n                liquidity = IMigrator(migrator).desiredLiquidity();\r\n                require(\r\n                    liquidity > 0 && liquidity != uint256(-1),\r\n                    \"Bad desired liquidity\"\r\n                );\r\n            } else {\r\n                require(migrator == address(0), \"Must not have migrator\");\r\n                liquidity = Math.sqrt(amount0.mul(amount1)).sub(\r\n                    MINIMUM_LIQUIDITY\r\n                );\r\n                _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\r\n            }\r\n        } else {\r\n            liquidity = Math.min(\r\n                amount0.mul(_totalSupply) / _reserve0,\r\n                amount1.mul(_totalSupply) / _reserve1\r\n            );\r\n        }\r\n        require(liquidity > 0, \"Joe: INSUFFICIENT_LIQUIDITY_MINTED\");\r\n        _mint(to, liquidity);\r\n\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\r\n        emit Mint(msg.sender, amount0, amount1);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function burn(address to)\r\n        external\r\n        lock\r\n        returns (uint256 amount0, uint256 amount1)\r\n    {\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\r\n        address _token0 = token0; // gas savings\r\n        address _token1 = token1; // gas savings\r\n        uint256 balance0 = IERC20Joe(_token0).balanceOf(address(this));\r\n        uint256 balance1 = IERC20Joe(_token1).balanceOf(address(this));\r\n        uint256 liquidity = balanceOf[address(this)];\r\n\r\n        bool feeOn = _mintFee(_reserve0, _reserve1);\r\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\r\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\r\n        require(\r\n            amount0 > 0 && amount1 > 0,\r\n            \"Joe: INSUFFICIENT_LIQUIDITY_BURNED\"\r\n        );\r\n        _burn(address(this), liquidity);\r\n        _safeTransfer(_token0, to, amount0);\r\n        _safeTransfer(_token1, to, amount1);\r\n        balance0 = IERC20Joe(_token0).balanceOf(address(this));\r\n        balance1 = IERC20Joe(_token1).balanceOf(address(this));\r\n\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\r\n        emit Burn(msg.sender, amount0, amount1, to);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external lock {\r\n        require(\r\n            amount0Out > 0 || amount1Out > 0,\r\n            \"Joe: INSUFFICIENT_OUTPUT_AMOUNT\"\r\n        );\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\r\n        require(\r\n            amount0Out < _reserve0 && amount1Out < _reserve1,\r\n            \"Joe: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n\r\n        uint256 balance0;\r\n        uint256 balance1;\r\n        {\r\n            // scope for _token{0,1}, avoids stack too deep errors\r\n            address _token0 = token0;\r\n            address _token1 = token1;\r\n            require(to != _token0 && to != _token1, \"Joe: INVALID_TO\");\r\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\r\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\r\n            if (data.length > 0)\r\n                IJoeCallee(to).joeCall(\r\n                    msg.sender,\r\n                    amount0Out,\r\n                    amount1Out,\r\n                    data\r\n                );\r\n            balance0 = IERC20Joe(_token0).balanceOf(address(this));\r\n            balance1 = IERC20Joe(_token1).balanceOf(address(this));\r\n        }\r\n        uint256 amount0In = balance0 > _reserve0 - amount0Out\r\n            ? balance0 - (_reserve0 - amount0Out)\r\n            : 0;\r\n        uint256 amount1In = balance1 > _reserve1 - amount1Out\r\n            ? balance1 - (_reserve1 - amount1Out)\r\n            : 0;\r\n        require(\r\n            amount0In > 0 || amount1In > 0,\r\n            \"Joe: INSUFFICIENT_INPUT_AMOUNT\"\r\n        );\r\n        {\r\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\r\n            uint256 balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\r\n            uint256 balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\r\n            require(\r\n                balance0Adjusted.mul(balance1Adjusted) >=\r\n                    uint256(_reserve0).mul(_reserve1).mul(1000**2),\r\n                \"Joe: K\"\r\n            );\r\n        }\r\n\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\r\n    }\r\n\r\n    // force balances to match reserves\r\n    function skim(address to) external lock {\r\n        address _token0 = token0; // gas savings\r\n        address _token1 = token1; // gas savings\r\n        _safeTransfer(\r\n            _token0,\r\n            to,\r\n            IERC20Joe(_token0).balanceOf(address(this)).sub(reserve0)\r\n        );\r\n        _safeTransfer(\r\n            _token1,\r\n            to,\r\n            IERC20Joe(_token1).balanceOf(address(this)).sub(reserve1)\r\n        );\r\n    }\r\n\r\n    // force reserves to match balances\r\n    function sync() external lock {\r\n        _update(\r\n            IERC20Joe(token0).balanceOf(address(this)),\r\n            IERC20Joe(token1).balanceOf(address(this)),\r\n            reserve0,\r\n            reserve1\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/traderjoe/JoeERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity =0.6.12;\r\n\r\nimport \"./libraries/SafeMath.sol\";\r\n\r\ncontract JoeERC20 {\r\n    using SafeMathJoe for uint256;\r\n\r\n    string public constant name = \"Joe LP Token\";\r\n    string public constant symbol = \"JLP\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH =\r\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n    mapping(address => uint256) public nonces;\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    constructor() public {\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256(\r\n                    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n                ),\r\n                keccak256(bytes(name)),\r\n                keccak256(bytes(\"1\")),\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function _mint(address to, uint256 value) internal {\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint256 value) internal {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 value\r\n    ) private {\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) private {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) external returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool) {\r\n        if (allowance[from][msg.sender] != uint256(-1)) {\r\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(\r\n                value\r\n            );\r\n        }\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        require(deadline >= block.timestamp, \"Joe: EXPIRED\");\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(\r\n                    abi.encode(\r\n                        PERMIT_TYPEHASH,\r\n                        owner,\r\n                        spender,\r\n                        value,\r\n                        nonces[owner]++,\r\n                        deadline\r\n                    )\r\n                )\r\n            )\r\n        );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(\r\n            recoveredAddress != address(0) && recoveredAddress == owner,\r\n            \"Joe: INVALID_SIGNATURE\"\r\n        );\r\n        _approve(owner, spender, value);\r\n    }\r\n}\r\n"
    },
    "contracts/traderjoe/libraries/Math.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity =0.6.12;\r\n\r\n// a library for performing various math operations\r\n\r\nlibrary Math {\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/traderjoe/libraries/UQ112x112.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity =0.6.12;\r\n\r\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\r\n\r\n// range: [0, 2**112 - 1]\r\n// resolution: 1 / 2**112\r\n\r\nlibrary UQ112x112 {\r\n    uint224 constant Q112 = 2**112;\r\n\r\n    // encode a uint112 as a UQ112x112\r\n    function encode(uint112 y) internal pure returns (uint224 z) {\r\n        z = uint224(y) * Q112; // never overflows\r\n    }\r\n\r\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\r\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\r\n        z = x / uint224(y);\r\n    }\r\n}\r\n"
    },
    "contracts/traderjoe/interfaces/IJoeCallee.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IJoeCallee {\r\n    function joeCall(\r\n        address sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n"
    },
    "contracts/traderjoe/JoeFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity =0.6.12;\r\n\r\nimport \"./interfaces/IJoeFactory.sol\";\r\nimport \"./JoePair.sol\";\r\n\r\ncontract JoeFactory is IJoeFactory {\r\n    address public override feeTo;\r\n    address public override feeToSetter;\r\n    address public override migrator;\r\n\r\n    mapping(address => mapping(address => address)) public override getPair;\r\n    address[] public override allPairs;\r\n\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    constructor(address _feeToSetter) public {\r\n        feeToSetter = _feeToSetter;\r\n    }\r\n\r\n    function allPairsLength() external view override returns (uint256) {\r\n        return allPairs.length;\r\n    }\r\n\r\n    function pairCodeHash() external pure returns (bytes32) {\r\n        return keccak256(type(JoePair).creationCode);\r\n    }\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        override\r\n        returns (address pair)\r\n    {\r\n        require(tokenA != tokenB, \"Joe: IDENTICAL_ADDRESSES\");\r\n        (address token0, address token1) = tokenA < tokenB\r\n            ? (tokenA, tokenB)\r\n            : (tokenB, tokenA);\r\n        require(token0 != address(0), \"Joe: ZERO_ADDRESS\");\r\n        require(getPair[token0][token1] == address(0), \"Joe: PAIR_EXISTS\"); // single check is sufficient\r\n        bytes memory bytecode = type(JoePair).creationCode;\r\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\r\n        assembly {\r\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n        }\r\n        JoePair(pair).initialize(token0, token1);\r\n        getPair[token0][token1] = pair;\r\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\r\n        allPairs.push(pair);\r\n        emit PairCreated(token0, token1, pair, allPairs.length);\r\n    }\r\n\r\n    function setFeeTo(address _feeTo) external override {\r\n        require(msg.sender == feeToSetter, \"Joe: FORBIDDEN\");\r\n        feeTo = _feeTo;\r\n    }\r\n\r\n    function setMigrator(address _migrator) external override {\r\n        require(msg.sender == feeToSetter, \"Joe: FORBIDDEN\");\r\n        migrator = _migrator;\r\n    }\r\n\r\n    function setFeeToSetter(address _feeToSetter) external override {\r\n        require(msg.sender == feeToSetter, \"Joe: FORBIDDEN\");\r\n        feeToSetter = _feeToSetter;\r\n    }\r\n}\r\n"
    },
    "contracts/JoeRoll.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./traderjoe/interfaces/IJoePair.sol\";\r\nimport \"./traderjoe/interfaces/IJoeRouter01.sol\";\r\nimport \"./traderjoe/interfaces/IJoeFactory.sol\";\r\nimport \"./traderjoe/libraries/JoeLibrary.sol\";\r\n\r\n// JoeRoll helps your migrate your existing Uniswap LP tokens to TraderJoe LP ones\r\ncontract JoeRoll is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    IJoeRouter01 public oldRouter;\r\n    IJoeRouter01 public router;\r\n    IERC20 public hatToken = IERC20(0x82FE038Ea4b50f9C957da326C412ebd73462077C);\r\n\r\n    constructor(IJoeRouter01 _oldRouter, IJoeRouter01 _router) public {\r\n        oldRouter = _oldRouter;\r\n        router = _router;\r\n    }\r\n\r\n    function migrateWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public {\r\n        IJoePair pair = IJoePair(pairForOldRouter(tokenA, tokenB));\r\n        pair.permit(msg.sender, address(this), liquidity, deadline, v, r, s);\r\n\r\n        migrate(tokenA, tokenB, liquidity, amountAMin, amountBMin, deadline);\r\n    }\r\n\r\n    // msg.sender should have approved 'liquidity' amount of LP token of 'tokenA' and 'tokenB'\r\n    function migrate(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        uint256 deadline\r\n    ) public {\r\n        require(deadline >= block.timestamp, \"JoeSwap: EXPIRED\");\r\n\r\n        // Remove liquidity from the old router with permit\r\n        (uint256 amountA, uint256 amountB) = removeLiquidity(\r\n            tokenA,\r\n            tokenB,\r\n            liquidity,\r\n            amountAMin,\r\n            amountBMin,\r\n            deadline\r\n        );\r\n\r\n        // Add liquidity to the new router\r\n        (uint256 pooledAmountA, uint256 pooledAmountB) = addLiquidity(\r\n            tokenA,\r\n            tokenB,\r\n            amountA,\r\n            amountB\r\n        );\r\n\r\n        // Send remaining tokens to msg.sender\r\n        if (amountA > pooledAmountA) {\r\n            IERC20(tokenA).safeTransfer(msg.sender, amountA - pooledAmountA);\r\n        }\r\n        if (amountB > pooledAmountB) {\r\n            IERC20(tokenB).safeTransfer(msg.sender, amountB - pooledAmountB);\r\n        }\r\n\r\n        // Transfer user a single hat token if there are any remaining and user has not received one yet\r\n        if (address(hatToken) != address(0)) {\r\n            uint256 hatSupply = hatToken.balanceOf(address(this));\r\n            uint256 userSupply = hatToken.balanceOf(msg.sender);\r\n            if (hatSupply > 0 && userSupply == 0) {\r\n                hatToken.safeTransfer(msg.sender, 1e18);\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        uint256 deadline\r\n    ) internal returns (uint256 amountA, uint256 amountB) {\r\n        IJoePair pair = IJoePair(pairForOldRouter(tokenA, tokenB));\r\n        pair.transferFrom(msg.sender, address(pair), liquidity);\r\n        (uint256 amount0, uint256 amount1) = pair.burn(address(this));\r\n        (address token0, ) = JoeLibrary.sortTokens(tokenA, tokenB);\r\n        (amountA, amountB) = tokenA == token0\r\n            ? (amount0, amount1)\r\n            : (amount1, amount0);\r\n        require(amountA >= amountAMin, \"JoeRoll: INSUFFICIENT_A_AMOUNT\");\r\n        require(amountB >= amountBMin, \"JoeRoll: INSUFFICIENT_B_AMOUNT\");\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairForOldRouter(address tokenA, address tokenB)\r\n        internal\r\n        view\r\n        returns (address pair)\r\n    {\r\n        (address token0, address token1) = JoeLibrary.sortTokens(\r\n            tokenA,\r\n            tokenB\r\n        );\r\n        pair = address(\r\n            uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        hex\"ff\",\r\n                        oldRouter.factory(),\r\n                        keccak256(abi.encodePacked(token0, token1)),\r\n                        hex\"40231f6b438bce0797c9ada29b718a87ea0a5cea3fe9a771abdd76bd41a3e545\" // init code hash\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired\r\n    ) internal returns (uint256 amountA, uint256 amountB) {\r\n        (amountA, amountB) = _addLiquidity(\r\n            tokenA,\r\n            tokenB,\r\n            amountADesired,\r\n            amountBDesired\r\n        );\r\n        address pair = JoeLibrary.pairFor(router.factory(), tokenA, tokenB);\r\n        IERC20(tokenA).safeTransfer(pair, amountA);\r\n        IERC20(tokenB).safeTransfer(pair, amountB);\r\n        IJoePair(pair).mint(msg.sender);\r\n    }\r\n\r\n    function _addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired\r\n    ) internal returns (uint256 amountA, uint256 amountB) {\r\n        // create the pair if it doesn't exist yet\r\n        IJoeFactory factory = IJoeFactory(router.factory());\r\n        if (factory.getPair(tokenA, tokenB) == address(0)) {\r\n            factory.createPair(tokenA, tokenB);\r\n        }\r\n        (uint256 reserveA, uint256 reserveB) = JoeLibrary.getReserves(\r\n            address(factory),\r\n            tokenA,\r\n            tokenB\r\n        );\r\n        if (reserveA == 0 && reserveB == 0) {\r\n            (amountA, amountB) = (amountADesired, amountBDesired);\r\n        } else {\r\n            uint256 amountBOptimal = JoeLibrary.quote(\r\n                amountADesired,\r\n                reserveA,\r\n                reserveB\r\n            );\r\n            if (amountBOptimal <= amountBDesired) {\r\n                (amountA, amountB) = (amountADesired, amountBOptimal);\r\n            } else {\r\n                uint256 amountAOptimal = JoeLibrary.quote(\r\n                    amountBDesired,\r\n                    reserveB,\r\n                    reserveA\r\n                );\r\n                assert(amountAOptimal <= amountADesired);\r\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/JoeMaker.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n// P1 - P3: OK\r\npragma solidity 0.6.12;\r\nimport \"./libraries/SafeMath.sol\";\r\nimport \"./libraries/SafeERC20.sol\";\r\n\r\nimport \"./traderjoe/interfaces/IJoeERC20.sol\";\r\nimport \"./traderjoe/interfaces/IJoePair.sol\";\r\nimport \"./traderjoe/interfaces/IJoeFactory.sol\";\r\n\r\nimport \"./boringcrypto/BoringOwnable.sol\";\r\n\r\n// JoeMaker is MasterJoe's left hand and kinda a wizard. He can cook up Joe from pretty much anything!\r\n// This contract handles \"serving up\" rewards for xJoe holders by trading tokens collected from fees for Joe.\r\n\r\n// T1 - T4: OK\r\ncontract JoeMaker is BoringOwnable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // V1 - V5: OK\r\n    IJoeFactory public immutable factory;\r\n    //0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac\r\n    // V1 - V5: OK\r\n    address public immutable bar;\r\n    //0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272\r\n    // V1 - V5: OK\r\n    address private immutable joe;\r\n    //0x6B3595068778DD592e39A122f4f5a5cF09C90fE2\r\n    // V1 - V5: OK\r\n    address private immutable wavax;\r\n    //0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n\r\n    // V1 - V5: OK\r\n    mapping(address => address) internal _bridges;\r\n\r\n    // E1: OK\r\n    event LogBridgeSet(address indexed token, address indexed bridge);\r\n    // E1: OK\r\n    event LogConvert(\r\n        address indexed server,\r\n        address indexed token0,\r\n        address indexed token1,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        uint256 amountJOE\r\n    );\r\n\r\n    constructor(\r\n        address _factory,\r\n        address _bar,\r\n        address _joe,\r\n        address _wavax\r\n    ) public {\r\n        factory = IJoeFactory(_factory);\r\n        bar = _bar;\r\n        joe = _joe;\r\n        wavax = _wavax;\r\n    }\r\n\r\n    // F1 - F10: OK\r\n    // C1 - C24: OK\r\n    function bridgeFor(address token) public view returns (address bridge) {\r\n        bridge = _bridges[token];\r\n        if (bridge == address(0)) {\r\n            bridge = wavax;\r\n        }\r\n    }\r\n\r\n    // F1 - F10: OK\r\n    // C1 - C24: OK\r\n    function setBridge(address token, address bridge) external onlyOwner {\r\n        // Checks\r\n        require(\r\n            token != joe && token != wavax && token != bridge,\r\n            \"JoeMaker: Invalid bridge\"\r\n        );\r\n\r\n        // Effects\r\n        _bridges[token] = bridge;\r\n        emit LogBridgeSet(token, bridge);\r\n    }\r\n\r\n    // M1 - M5: OK\r\n    // C1 - C24: OK\r\n    // C6: It's not a fool proof solution, but it prevents flash loans, so here it's ok to use tx.origin\r\n    modifier onlyEOA() {\r\n        // Try to make flash-loan exploit harder to do by only allowing externally owned addresses.\r\n        require(msg.sender == tx.origin, \"JoeMaker: must use EOA\");\r\n        _;\r\n    }\r\n\r\n    // F1 - F10: OK\r\n    // F3: _convert is separate to save gas by only checking the 'onlyEOA' modifier once in case of convertMultiple\r\n    // F6: There is an exploit to add lots of JOE to the bar, run convert, then remove the JOE again.\r\n    //     As the size of the JoeBar has grown, this requires large amounts of funds and isn't super profitable anymore\r\n    //     The onlyEOA modifier prevents this being done with a flash loan.\r\n    // C1 - C24: OK\r\n    function convert(address token0, address token1) external onlyEOA() {\r\n        _convert(token0, token1);\r\n    }\r\n\r\n    // F1 - F10: OK, see convert\r\n    // C1 - C24: OK\r\n    // C3: Loop is under control of the caller\r\n    function convertMultiple(\r\n        address[] calldata token0,\r\n        address[] calldata token1\r\n    ) external onlyEOA() {\r\n        // TODO: This can be optimized a fair bit, but this is safer and simpler for now\r\n        uint256 len = token0.length;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            _convert(token0[i], token1[i]);\r\n        }\r\n    }\r\n\r\n    // F1 - F10: OK\r\n    // C1- C24: OK\r\n    function _convert(address token0, address token1) internal {\r\n        // Interactions\r\n        // S1 - S4: OK\r\n        IJoePair pair = IJoePair(factory.getPair(token0, token1));\r\n        require(address(pair) != address(0), \"JoeMaker: Invalid pair\");\r\n        // balanceOf: S1 - S4: OK\r\n        // transfer: X1 - X5: OK\r\n        IERC20(address(pair)).safeTransfer(\r\n            address(pair),\r\n            pair.balanceOf(address(this))\r\n        );\r\n        // X1 - X5: OK\r\n        (uint256 amount0, uint256 amount1) = pair.burn(address(this));\r\n        if (token0 != pair.token0()) {\r\n            (amount0, amount1) = (amount1, amount0);\r\n        }\r\n        emit LogConvert(\r\n            msg.sender,\r\n            token0,\r\n            token1,\r\n            amount0,\r\n            amount1,\r\n            _convertStep(token0, token1, amount0, amount1)\r\n        );\r\n    }\r\n\r\n    // F1 - F10: OK\r\n    // C1 - C24: OK\r\n    // All safeTransfer, _swap, _toJOE, _convertStep: X1 - X5: OK\r\n    function _convertStep(\r\n        address token0,\r\n        address token1,\r\n        uint256 amount0,\r\n        uint256 amount1\r\n    ) internal returns (uint256 joeOut) {\r\n        // Interactions\r\n        if (token0 == token1) {\r\n            uint256 amount = amount0.add(amount1);\r\n            if (token0 == joe) {\r\n                IERC20(joe).safeTransfer(bar, amount);\r\n                joeOut = amount;\r\n            } else if (token0 == wavax) {\r\n                joeOut = _toJOE(wavax, amount);\r\n            } else {\r\n                address bridge = bridgeFor(token0);\r\n                amount = _swap(token0, bridge, amount, address(this));\r\n                joeOut = _convertStep(bridge, bridge, amount, 0);\r\n            }\r\n        } else if (token0 == joe) {\r\n            // eg. JOE - AVAX\r\n            IERC20(joe).safeTransfer(bar, amount0);\r\n            joeOut = _toJOE(token1, amount1).add(amount0);\r\n        } else if (token1 == joe) {\r\n            // eg. USDT - JOE\r\n            IERC20(joe).safeTransfer(bar, amount1);\r\n            joeOut = _toJOE(token0, amount0).add(amount1);\r\n        } else if (token0 == wavax) {\r\n            // eg. AVAX - USDC\r\n            joeOut = _toJOE(\r\n                wavax,\r\n                _swap(token1, wavax, amount1, address(this)).add(amount0)\r\n            );\r\n        } else if (token1 == wavax) {\r\n            // eg. USDT - AVAX\r\n            joeOut = _toJOE(\r\n                wavax,\r\n                _swap(token0, wavax, amount0, address(this)).add(amount1)\r\n            );\r\n        } else {\r\n            // eg. MIC - USDT\r\n            address bridge0 = bridgeFor(token0);\r\n            address bridge1 = bridgeFor(token1);\r\n            if (bridge0 == token1) {\r\n                // eg. MIC - USDT - and bridgeFor(MIC) = USDT\r\n                joeOut = _convertStep(\r\n                    bridge0,\r\n                    token1,\r\n                    _swap(token0, bridge0, amount0, address(this)),\r\n                    amount1\r\n                );\r\n            } else if (bridge1 == token0) {\r\n                // eg. WBTC - DSD - and bridgeFor(DSD) = WBTC\r\n                joeOut = _convertStep(\r\n                    token0,\r\n                    bridge1,\r\n                    amount0,\r\n                    _swap(token1, bridge1, amount1, address(this))\r\n                );\r\n            } else {\r\n                joeOut = _convertStep(\r\n                    bridge0,\r\n                    bridge1, // eg. USDT - DSD - and bridgeFor(DSD) = WBTC\r\n                    _swap(token0, bridge0, amount0, address(this)),\r\n                    _swap(token1, bridge1, amount1, address(this))\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    // F1 - F10: OK\r\n    // C1 - C24: OK\r\n    // All safeTransfer, swap: X1 - X5: OK\r\n    function _swap(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 amountIn,\r\n        address to\r\n    ) internal returns (uint256 amountOut) {\r\n        // Checks\r\n        // X1 - X5: OK\r\n        IJoePair pair = IJoePair(factory.getPair(fromToken, toToken));\r\n        require(address(pair) != address(0), \"JoeMaker: Cannot convert\");\r\n\r\n        // Interactions\r\n        // X1 - X5: OK\r\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\r\n        uint256 amountInWithFee = amountIn.mul(997);\r\n        if (fromToken == pair.token0()) {\r\n            amountOut =\r\n                amountIn.mul(997).mul(reserve1) /\r\n                reserve0.mul(1000).add(amountInWithFee);\r\n            IERC20(fromToken).safeTransfer(address(pair), amountIn);\r\n            pair.swap(0, amountOut, to, new bytes(0));\r\n            // TODO: Add maximum slippage?\r\n        } else {\r\n            amountOut =\r\n                amountIn.mul(997).mul(reserve0) /\r\n                reserve1.mul(1000).add(amountInWithFee);\r\n            IERC20(fromToken).safeTransfer(address(pair), amountIn);\r\n            pair.swap(amountOut, 0, to, new bytes(0));\r\n            // TODO: Add maximum slippage?\r\n        }\r\n    }\r\n\r\n    // F1 - F10: OK\r\n    // C1 - C24: OK\r\n    function _toJOE(address token, uint256 amountIn)\r\n        internal\r\n        returns (uint256 amountOut)\r\n    {\r\n        // X1 - X5: OK\r\n        amountOut = _swap(token, joe, amountIn, bar);\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\n// a library for performing overflow-safe math, updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math)\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require((c = a + b) >= b, \"SafeMath: Add Overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require((c = a - b) <= a, \"SafeMath: Underflow\");\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b == 0 || (c = a * b) / b == a, \"SafeMath: Mul Overflow\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b > 0, \"SafeMath: Div by Zero\");\r\n        c = a / b;\r\n    }\r\n\r\n    function to128(uint256 a) internal pure returns (uint128 c) {\r\n        require(a <= uint128(-1), \"SafeMath: uint128 Overflow\");\r\n        c = uint128(a);\r\n    }\r\n}\r\n\r\nlibrary SafeMath128 {\r\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\r\n        require((c = a + b) >= b, \"SafeMath: Add Overflow\");\r\n    }\r\n\r\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\r\n        require((c = a - b) <= a, \"SafeMath: Underflow\");\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nimport \"../interfaces/IERC20.sol\";\r\n\r\nlibrary SafeERC20 {\r\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(\r\n            abi.encodeWithSelector(0x95d89b41)\r\n        );\r\n        return success && data.length > 0 ? abi.decode(data, (string)) : \"???\";\r\n    }\r\n\r\n    function safeName(IERC20 token) internal view returns (string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(\r\n            abi.encodeWithSelector(0x06fdde03)\r\n        );\r\n        return success && data.length > 0 ? abi.decode(data, (string)) : \"???\";\r\n    }\r\n\r\n    function safeDecimals(IERC20 token) public view returns (uint8) {\r\n        (bool success, bytes memory data) = address(token).staticcall(\r\n            abi.encodeWithSelector(0x313ce567)\r\n        );\r\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\r\n    }\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(0xa9059cbb, to, amount)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"SafeERC20: Transfer failed\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(0x23b872dd, from, address(this), amount)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"SafeERC20: TransferFrom failed\"\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/traderjoe/interfaces/IJoeERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IJoeERC20 {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n"
    },
    "contracts/boringcrypto/BoringOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\r\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\r\n// Edited by BoringCrypto\r\n\r\ncontract BoringOwnableData {\r\n    address public owner;\r\n    address public pendingOwner;\r\n}\r\n\r\ncontract BoringOwnable is BoringOwnableData {\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /// @notice `owner` defaults to msg.sender on construction.\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\r\n    /// Can only be invoked by the current `owner`.\r\n    /// @param newOwner Address of the new owner.\r\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\r\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\r\n    function transferOwnership(\r\n        address newOwner,\r\n        bool direct,\r\n        bool renounce\r\n    ) public onlyOwner {\r\n        if (direct) {\r\n            // Checks\r\n            require(\r\n                newOwner != address(0) || renounce,\r\n                \"Ownable: zero address\"\r\n            );\r\n\r\n            // Effects\r\n            emit OwnershipTransferred(owner, newOwner);\r\n            owner = newOwner;\r\n            pendingOwner = address(0);\r\n        } else {\r\n            // Effects\r\n            pendingOwner = newOwner;\r\n        }\r\n    }\r\n\r\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\r\n    function claimOwnership() public {\r\n        address _pendingOwner = pendingOwner;\r\n\r\n        // Checks\r\n        require(\r\n            msg.sender == _pendingOwner,\r\n            \"Ownable: caller != pending owner\"\r\n        );\r\n\r\n        // Effects\r\n        emit OwnershipTransferred(owner, _pendingOwner);\r\n        owner = _pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n\r\n    /// @notice Only allows the `owner` to execute the function.\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/JoeMakerExploitMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"../JoeMaker.sol\";\r\n\r\ncontract JoeMakerExploitMock {\r\n    JoeMaker public immutable joeMaker;\r\n\r\n    constructor(address _joeMaker) public {\r\n        joeMaker = JoeMaker(_joeMaker);\r\n    }\r\n\r\n    function convert(address token0, address token1) external {\r\n        joeMaker.convert(token0, token1);\r\n    }\r\n}\r\n"
    },
    "contracts/rewarders/SimpleRewarderPerSec.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"../boringcrypto/BoringOwnable.sol\";\r\nimport \"../libraries/SafeERC20.sol\";\r\n\r\ninterface IRewarder {\r\n    using SafeERC20 for IERC20;\r\n\r\n    function onJoeReward(address user, uint256 newLpAmount) external;\r\n\r\n    function pendingTokens(address user)\r\n        external\r\n        view\r\n        returns (uint256 pending);\r\n}\r\n\r\ninterface IMasterChefJoeV2 {\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n    }\r\n\r\n    struct PoolInfo {\r\n        IERC20 lpToken; // Address of LP token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this poolInfo. SUSHI to distribute per block.\r\n        uint256 lastRewardTimestamp; // Last block timestamp that SUSHI distribution occurs.\r\n        uint256 accJoePerShare; // Accumulated SUSHI per share, times 1e12. See below.\r\n    }\r\n\r\n    function poolInfo(uint256 pid) external view returns (PoolInfo memory);\r\n\r\n    function totalAllocPoint() external view returns (uint256);\r\n\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n}\r\n\r\n/**\r\n * This is a sample contract to be used in the MasterChefJoeV2 contract for partners to reward\r\n * stakers with their native token alongside JOE.\r\n *\r\n * It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior.\r\n * E.g. say you've allocated 100,000 XYZ to the JOE-XYZ farm over 30 days. Then you would need to transfer\r\n * 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\r\n *\r\n */\r\ncontract SimpleRewarderPerSec is IRewarder, BoringOwnable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public immutable rewardToken;\r\n    IERC20 public immutable lpToken;\r\n    IMasterChefJoeV2 public immutable MC_V2;\r\n\r\n    /// @notice Info of each MCV2 user.\r\n    /// `amount` LP token amount the user has provided.\r\n    /// `rewardDebt` The amount of YOUR_TOKEN entitled to the user.\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 rewardDebt;\r\n    }\r\n\r\n    /// @notice Info of each MCV2 poolInfo.\r\n    /// `accTokenPerShare` Amount of YOUR_TOKEN each LP token is worth.\r\n    /// `lastRewardTimestamp` The last timestamp YOUR_TOKEN was rewarded to the poolInfo.\r\n    struct PoolInfo {\r\n        uint256 accTokenPerShare;\r\n        uint256 lastRewardTimestamp;\r\n    }\r\n\r\n    /// @notice Info of the poolInfo.\r\n    PoolInfo public poolInfo;\r\n    /// @notice Info of each user that stakes LP tokens.\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    uint256 public tokenPerSec;\r\n    uint256 private constant ACC_TOKEN_PRECISION = 1e12;\r\n\r\n    event OnReward(address indexed user, uint256 amount);\r\n    event RewardRateUpdated(uint256 oldRate, uint256 newRate);\r\n\r\n    modifier onlyMCV2 {\r\n        require(\r\n            msg.sender == address(MC_V2),\r\n            \"onlyMCV2: only MasterChef V2 can call this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        IERC20 _rewardToken,\r\n        IERC20 _lpToken,\r\n        uint256 _tokenPerSec,\r\n        IMasterChefJoeV2 _MCV2\r\n    ) public {\r\n        require(\r\n            Address.isContract(address(_rewardToken)),\r\n            \"constructor: reward token must be a valid contract\"\r\n        );\r\n        require(\r\n            Address.isContract(address(_lpToken)),\r\n            \"constructor: LP token must be a valid contract\"\r\n        );\r\n        require(\r\n            Address.isContract(address(_MCV2)),\r\n            \"constructor: MasterChefJoeV2 must be a valid contract\"\r\n        );\r\n\r\n        rewardToken = _rewardToken;\r\n        lpToken = _lpToken;\r\n        tokenPerSec = _tokenPerSec;\r\n        MC_V2 = _MCV2;\r\n        poolInfo = PoolInfo({\r\n            lastRewardTimestamp: block.timestamp,\r\n            accTokenPerShare: 0\r\n        });\r\n    }\r\n\r\n    /// @notice Update reward variables of the given poolInfo.\r\n    /// @return pool Returns the pool that was updated.\r\n    function updatePool() public returns (PoolInfo memory pool) {\r\n        pool = poolInfo;\r\n\r\n        if (block.timestamp > pool.lastRewardTimestamp) {\r\n            uint256 lpSupply = lpToken.balanceOf(address(MC_V2));\r\n\r\n            if (lpSupply > 0) {\r\n                uint256 timeElapsed = block.timestamp.sub(\r\n                    pool.lastRewardTimestamp\r\n                );\r\n                uint256 tokenReward = timeElapsed.mul(tokenPerSec);\r\n                pool.accTokenPerShare = pool.accTokenPerShare.add(\r\n                    (tokenReward.mul(ACC_TOKEN_PRECISION) / lpSupply)\r\n                );\r\n            }\r\n\r\n            pool.lastRewardTimestamp = block.timestamp;\r\n            poolInfo = pool;\r\n        }\r\n    }\r\n\r\n    /// @notice Sets the distribution reward rate. This will also update the poolInfo.\r\n    /// @param _tokenPerSec The number of tokens to distribute per second\r\n    function setRewardRate(uint256 _tokenPerSec) external onlyOwner {\r\n        updatePool();\r\n\r\n        uint256 oldRate = tokenPerSec;\r\n        tokenPerSec = _tokenPerSec;\r\n\r\n        emit RewardRateUpdated(oldRate, _tokenPerSec);\r\n    }\r\n\r\n    /// @notice Function called by MasterChefJoeV2 whenever staker claims JOE harvest. Allows staker to also receive a 2nd reward token.\r\n    /// @param _user Address of user\r\n    /// @param _lpAmount Number of LP tokens the user has\r\n    function onJoeReward(address _user, uint256 _lpAmount)\r\n        external\r\n        override\r\n        onlyMCV2\r\n    {\r\n        updatePool();\r\n        PoolInfo memory pool = poolInfo;\r\n        UserInfo storage user = userInfo[_user];\r\n        uint256 pending;\r\n        // if user had deposited\r\n        if (user.amount > 0) {\r\n            pending = (user.amount.mul(pool.accTokenPerShare) /\r\n                ACC_TOKEN_PRECISION)\r\n            .sub(user.rewardDebt);\r\n            uint256 balance = rewardToken.balanceOf(address(this));\r\n            if (pending > balance) {\r\n                rewardToken.safeTransfer(_user, balance);\r\n            } else {\r\n                rewardToken.safeTransfer(_user, pending);\r\n            }\r\n        }\r\n\r\n        user.amount = _lpAmount;\r\n        user.rewardDebt =\r\n            user.amount.mul(pool.accTokenPerShare) /\r\n            ACC_TOKEN_PRECISION;\r\n\r\n        emit OnReward(_user, pending);\r\n    }\r\n\r\n    /// @notice View function to see pending tokens\r\n    /// @param _user Address of user.\r\n    /// @return pending reward for a given user.\r\n    function pendingTokens(address _user)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256 pending)\r\n    {\r\n        PoolInfo memory pool = poolInfo;\r\n        UserInfo storage user = userInfo[_user];\r\n\r\n        uint256 accTokenPerShare = poolInfo.accTokenPerShare;\r\n        uint256 lpSupply = lpToken.balanceOf(address(MC_V2));\r\n\r\n        if (block.timestamp > poolInfo.lastRewardTimestamp && lpSupply != 0) {\r\n            uint256 timeElapsed = block.timestamp.sub(\r\n                poolInfo.lastRewardTimestamp\r\n            );\r\n            uint256 tokenReward = timeElapsed.mul(tokenPerSec);\r\n            accTokenPerShare = accTokenPerShare.add(\r\n                tokenReward.mul(ACC_TOKEN_PRECISION) / lpSupply\r\n            );\r\n        }\r\n\r\n        pending = (user.amount.mul(accTokenPerShare) / ACC_TOKEN_PRECISION).sub(\r\n            user.rewardDebt\r\n        );\r\n    }\r\n\r\n    /// @notice In case rewarder is stopped before emissions finished, this function allows\r\n    /// withdrawal of remaining tokens.\r\n    function emergencyWithdraw() public onlyOwner {\r\n        rewardToken.safeTransfer(\r\n            address(msg.sender),\r\n            rewardToken.balanceOf(address(this))\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/rewarders/SimpleRewarderPerBlock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"../boringcrypto/BoringOwnable.sol\";\r\nimport \"../libraries/SafeERC20.sol\";\r\n\r\ninterface IRewarder {\r\n    using SafeERC20 for IERC20;\r\n\r\n    function onJoeReward(address user, uint256 newLpAmount) external;\r\n\r\n    function pendingTokens(address user)\r\n        external\r\n        view\r\n        returns (uint256 pending);\r\n}\r\n\r\ninterface IMasterChefJoeV2 {\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n    }\r\n\r\n    struct PoolInfo {\r\n        IERC20 lpToken; // Address of LP token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this poolInfo. SUSHI to distribute per block.\r\n        uint256 lastRewardTimestamp; // Last block timestamp that SUSHI distribution occurs.\r\n        uint256 accJoePerShare; // Accumulated SUSHI per share, times 1e12. See below.\r\n    }\r\n\r\n    function poolInfo(uint256 pid) external view returns (PoolInfo memory);\r\n\r\n    function totalAllocPoint() external view returns (uint256);\r\n\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n}\r\n\r\n/**\r\n * This is a sample contract to be used in the MasterChefJoeV2 contract for partners to reward\r\n * stakers with their native token alongside JOE.\r\n *\r\n * It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior.\r\n * E.g. say you've allocated 100,000 XYZ to the JOE-XYZ farm over 30 days. Then you would need to transfer\r\n * 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\r\n *\r\n */\r\ncontract SimpleRewarderPerBlock is IRewarder, BoringOwnable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public immutable rewardToken;\r\n    IERC20 public immutable lpToken;\r\n    IMasterChefJoeV2 public immutable MC_V2;\r\n\r\n    /// @notice Info of each MCV2 user.\r\n    /// `amount` LP token amount the user has provided.\r\n    /// `rewardDebt` The amount of YOUR_TOKEN entitled to the user.\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 rewardDebt;\r\n    }\r\n\r\n    /// @notice Info of each MCV2 poolInfo.\r\n    /// `accTokenPerShare` Amount of YOUR_TOKEN each LP token is worth.\r\n    /// `lastRewardBlock` The last block YOUR_TOKEN was rewarded to the poolInfo.\r\n    struct PoolInfo {\r\n        uint256 accTokenPerShare;\r\n        uint256 lastRewardBlock;\r\n    }\r\n\r\n    /// @notice Info of the poolInfo.\r\n    PoolInfo public poolInfo;\r\n    /// @notice Info of each user that stakes LP tokens.\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    uint256 public tokenPerBlock;\r\n    uint256 private constant ACC_TOKEN_PRECISION = 1e12;\r\n\r\n    event OnReward(address indexed user, uint256 amount);\r\n    event RewardRateUpdated(uint256 oldRate, uint256 newRate);\r\n\r\n    modifier onlyMCV2 {\r\n        require(\r\n            msg.sender == address(MC_V2),\r\n            \"onlyMCV2: only MasterChef V2 can call this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        IERC20 _rewardToken,\r\n        IERC20 _lpToken,\r\n        uint256 _tokenPerBlock,\r\n        IMasterChefJoeV2 _MCV2\r\n    ) public {\r\n        require(\r\n            Address.isContract(address(_rewardToken)),\r\n            \"constructor: reward token must be a valid contract\"\r\n        );\r\n        require(\r\n            Address.isContract(address(_lpToken)),\r\n            \"constructor: LP token must be a valid contract\"\r\n        );\r\n        require(\r\n            Address.isContract(address(_MCV2)),\r\n            \"constructor: MasterChefJoeV2 must be a valid contract\"\r\n        );\r\n\r\n        rewardToken = _rewardToken;\r\n        lpToken = _lpToken;\r\n        tokenPerBlock = _tokenPerBlock;\r\n        MC_V2 = _MCV2;\r\n        poolInfo = PoolInfo({\r\n            lastRewardBlock: block.number,\r\n            accTokenPerShare: 0\r\n        });\r\n    }\r\n\r\n    /// @notice Update reward variables of the given poolInfo.\r\n    /// @return pool Returns the pool that was updated.\r\n    function updatePool() public returns (PoolInfo memory pool) {\r\n        pool = poolInfo;\r\n\r\n        if (block.number > pool.lastRewardBlock) {\r\n            uint256 lpSupply = lpToken.balanceOf(address(MC_V2));\r\n\r\n            if (lpSupply > 0) {\r\n                uint256 blocks = block.number.sub(pool.lastRewardBlock);\r\n                uint256 tokenReward = blocks.mul(tokenPerBlock);\r\n                pool.accTokenPerShare = pool.accTokenPerShare.add(\r\n                    (tokenReward.mul(ACC_TOKEN_PRECISION) / lpSupply)\r\n                );\r\n            }\r\n\r\n            pool.lastRewardBlock = block.number;\r\n            poolInfo = pool;\r\n        }\r\n    }\r\n\r\n    /// @notice Sets the distribution reward rate. This will also update the poolInfo.\r\n    /// @param _tokenPerBlock The number of tokens to distribute per block\r\n    function setRewardRate(uint256 _tokenPerBlock) external onlyOwner {\r\n        updatePool();\r\n\r\n        uint256 oldRate = tokenPerBlock;\r\n        tokenPerBlock = _tokenPerBlock;\r\n\r\n        emit RewardRateUpdated(oldRate, _tokenPerBlock);\r\n    }\r\n\r\n    /// @notice Function called by MasterChefJoeV2 whenever staker claims JOE harvest. Allows staker to also receive a 2nd reward token.\r\n    /// @param _user Address of user\r\n    /// @param _lpAmount Number of LP tokens the user has\r\n    function onJoeReward(address _user, uint256 _lpAmount)\r\n        external\r\n        override\r\n        onlyMCV2\r\n    {\r\n        updatePool();\r\n        PoolInfo memory pool = poolInfo;\r\n        UserInfo storage user = userInfo[_user];\r\n        uint256 pending;\r\n        // if user had deposited\r\n        if (user.amount > 0) {\r\n            pending = (user.amount.mul(pool.accTokenPerShare) /\r\n                ACC_TOKEN_PRECISION)\r\n            .sub(user.rewardDebt);\r\n            uint256 balance = rewardToken.balanceOf(address(this));\r\n            if (pending > balance) {\r\n                rewardToken.safeTransfer(_user, balance);\r\n            } else {\r\n                rewardToken.safeTransfer(_user, pending);\r\n            }\r\n        }\r\n\r\n        user.amount = _lpAmount;\r\n        user.rewardDebt =\r\n            user.amount.mul(pool.accTokenPerShare) /\r\n            ACC_TOKEN_PRECISION;\r\n\r\n        emit OnReward(_user, pending);\r\n    }\r\n\r\n    /// @notice View function to see pending tokens\r\n    /// @param _user Address of user.\r\n    /// @return pending reward for a given user.\r\n    function pendingTokens(address _user)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256 pending)\r\n    {\r\n        PoolInfo memory pool = poolInfo;\r\n        UserInfo storage user = userInfo[_user];\r\n\r\n        uint256 accTokenPerShare = poolInfo.accTokenPerShare;\r\n        uint256 lpSupply = lpToken.balanceOf(address(MC_V2));\r\n\r\n        if (block.number > poolInfo.lastRewardBlock && lpSupply != 0) {\r\n            uint256 blocks = block.number.sub(poolInfo.lastRewardBlock);\r\n            uint256 tokenReward = blocks.mul(tokenPerBlock);\r\n            accTokenPerShare = accTokenPerShare.add(\r\n                tokenReward.mul(ACC_TOKEN_PRECISION) / lpSupply\r\n            );\r\n        }\r\n\r\n        pending = (user.amount.mul(accTokenPerShare) / ACC_TOKEN_PRECISION).sub(\r\n            user.rewardDebt\r\n        );\r\n    }\r\n\r\n    /// @notice In case rewarder is stopped before emissions finished, this function allows\r\n    /// withdrawal of remaining tokens.\r\n    function emergencyWithdraw() public onlyOwner {\r\n        rewardToken.safeTransfer(\r\n            address(msg.sender),\r\n            rewardToken.balanceOf(address(this))\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/rewarders/MasterChefRewarderPerSec.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../libraries/SafeERC20.sol\";\r\n\r\ninterface IRewarder {\r\n    using SafeERC20 for IERC20;\r\n\r\n    function onJoeReward(address user, uint256 newLpAmount) external;\r\n\r\n    function pendingTokens(address user)\r\n        external\r\n        view\r\n        returns (uint256 pending);\r\n}\r\n\r\ninterface IMasterChef {\r\n    struct PoolInfo {\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. JOE to distribute per block.\r\n    }\r\n\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n\r\n    function poolInfo(uint256 pid)\r\n        external\r\n        view\r\n        returns (IMasterChef.PoolInfo memory);\r\n\r\n    function totalAllocPoint() external view returns (uint256);\r\n}\r\n\r\ninterface IMasterChefJoeV2 {\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n    }\r\n\r\n    struct PoolInfo {\r\n        IERC20 lpToken; // Address of LP token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this poolInfo. SUSHI to distribute per block.\r\n        uint256 lastRewardTimestamp; // Last block.timestamp that SUSHI distribution occurs.\r\n        uint256 accJoePerShare; // Accumulated SUSHI per share, times 1e12. See below.\r\n    }\r\n\r\n    function poolInfo(uint256 pid) external view returns (PoolInfo memory);\r\n\r\n    function totalAllocPoint() external view returns (uint256);\r\n\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n}\r\n\r\n/**\r\n * This is a sample contract to be used in the MasterChefJoeV2 contract for partners to reward\r\n * stakers with their native token alongside JOE.\r\n *\r\n * It assumes the project already has an existing MasterChef-style farm contract.\r\n * In which case, the init() function is called to deposit a dummy token into one\r\n * of the MasterChef farms so this contract can accrue rewards from that farm.\r\n * The contract then transfers the reward token to the user on each call to\r\n * onJoeReward().\r\n *\r\n */\r\ncontract MasterChefRewarderPerSec is IRewarder, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public immutable rewardToken;\r\n    IERC20 public immutable lpToken;\r\n    uint256 public immutable MCV1_pid;\r\n    IMasterChef public immutable MCV1;\r\n    IMasterChefJoeV2 public immutable MCV2;\r\n\r\n    /// @notice Info of each MCV2 user.\r\n    /// `amount` LP token amount the user has provided.\r\n    /// `rewardDebt` The amount of JOE entitled to the user.\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 rewardDebt;\r\n    }\r\n\r\n    /// @notice Info of each MCV2 poolInfo.\r\n    /// `accTokenPerShare` Amount of JOE each LP token is worth.\r\n    /// `lastRewardTimestamp` The last time JOE was rewarded to the poolInfo.\r\n    struct PoolInfo {\r\n        uint256 accTokenPerShare;\r\n        uint256 lastRewardTimestamp;\r\n        uint256 allocPoint;\r\n    }\r\n\r\n    /// @notice Info of the poolInfo.\r\n    PoolInfo public poolInfo;\r\n    /// @notice Info of each user that stakes LP tokens.\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    uint256 public tokenPerSec;\r\n    uint256 private constant ACC_TOKEN_PRECISION = 1e12;\r\n\r\n    event OnReward(address indexed user, uint256 amount);\r\n    event RewardRateUpdated(uint256 oldRate, uint256 newRate);\r\n    event AllocPointUpdated(uint256 oldAllocPoint, uint256 newAllocPoint);\r\n\r\n    modifier onlyMCV2 {\r\n        require(\r\n            msg.sender == address(MCV2),\r\n            \"onlyMCV2: only MasterChef V2 can call this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        IERC20 _rewardToken,\r\n        IERC20 _lpToken,\r\n        uint256 _tokenPerSec,\r\n        uint256 _allocPoint,\r\n        uint256 _MCV1_pid,\r\n        IMasterChef _MCV1,\r\n        IMasterChefJoeV2 _MCV2\r\n    ) public {\r\n        require(\r\n            Address.isContract(address(_rewardToken)),\r\n            \"constructor: reward token must be a valid contract\"\r\n        );\r\n        require(\r\n            Address.isContract(address(_lpToken)),\r\n            \"constructor: LP token must be a valid contract\"\r\n        );\r\n        require(\r\n            Address.isContract(address(_MCV1)),\r\n            \"constructor: MasterChef must be a valid contract\"\r\n        );\r\n        require(\r\n            Address.isContract(address(_MCV2)),\r\n            \"constructor: MasterChefJoeV2 must be a valid contract\"\r\n        );\r\n\r\n        rewardToken = _rewardToken;\r\n        lpToken = _lpToken;\r\n        tokenPerSec = _tokenPerSec;\r\n        MCV1_pid = _MCV1_pid;\r\n        MCV1 = _MCV1;\r\n        MCV2 = _MCV2;\r\n        poolInfo = PoolInfo({\r\n            lastRewardTimestamp: block.timestamp,\r\n            accTokenPerShare: 0,\r\n            allocPoint: _allocPoint\r\n        });\r\n    }\r\n\r\n    /// @notice Deposits a dummy token to a MaterChefV1 farm so that this contract can claim reward tokens.\r\n    /// @param dummyToken The address of the dummy ERC20 token to deposit into MCV1.\r\n    function init(IERC20 dummyToken) external {\r\n        uint256 balance = dummyToken.balanceOf(msg.sender);\r\n        require(balance > 0, \"init: Balance must exceed 0\");\r\n        dummyToken.safeTransferFrom(msg.sender, balance);\r\n        dummyToken.approve(address(MCV1), balance);\r\n        MCV1.deposit(MCV1_pid, balance);\r\n    }\r\n\r\n    /// @notice Update reward variables of the given poolInfo.\r\n    /// @return pool Returns the pool that was updated.\r\n    function updatePool() public returns (PoolInfo memory pool) {\r\n        pool = poolInfo;\r\n\r\n        if (block.timestamp > pool.lastRewardTimestamp) {\r\n            uint256 lpSupply = lpToken.balanceOf(address(MCV2));\r\n\r\n            if (lpSupply > 0) {\r\n                uint256 timeElapsed = block.timestamp.sub(\r\n                    pool.lastRewardTimestamp\r\n                );\r\n                uint256 tokenReward = timeElapsed\r\n                .mul(tokenPerSec)\r\n                .mul(pool.allocPoint)\r\n                .div(MCV1.totalAllocPoint());\r\n                pool.accTokenPerShare = pool.accTokenPerShare.add(\r\n                    (tokenReward.mul(ACC_TOKEN_PRECISION) / lpSupply)\r\n                );\r\n            }\r\n\r\n            pool.lastRewardTimestamp = block.timestamp;\r\n            poolInfo = pool;\r\n        }\r\n    }\r\n\r\n    /// @notice Sets the distribution reward rate. This will also update the poolInfo.\r\n    /// @param _tokenPerSec The number of tokens to distribute per block\r\n    function setRewardRate(uint256 _tokenPerSec) external onlyOwner {\r\n        updatePool();\r\n\r\n        uint256 oldRate = tokenPerSec;\r\n        tokenPerSec = _tokenPerSec;\r\n\r\n        emit RewardRateUpdated(oldRate, _tokenPerSec);\r\n    }\r\n\r\n    /// @notice Sets the allocation point. THis will also update the poolInfo.\r\n    /// @param _allocPoint The new allocation point of the pool\r\n    function setAllocPoint(uint256 _allocPoint) external onlyOwner {\r\n        updatePool();\r\n\r\n        uint256 oldAllocPoint = poolInfo.allocPoint;\r\n        poolInfo.allocPoint = _allocPoint;\r\n\r\n        emit AllocPointUpdated(oldAllocPoint, _allocPoint);\r\n    }\r\n\r\n    /// @notice Claims reward tokens from MCV1 farm.\r\n    function harvestFromMasterChefV1() public {\r\n        MCV1.deposit(MCV1_pid, 0);\r\n    }\r\n\r\n    /// @notice Function called by MasterChefJoeV2 whenever staker claims JOE harvest. Allows staker to also receive a 2nd reward token.\r\n    /// @param _user Address of user\r\n    /// @param _lpAmount Number of LP tokens the user has\r\n    function onJoeReward(address _user, uint256 _lpAmount)\r\n        external\r\n        override\r\n        onlyMCV2\r\n    {\r\n        updatePool();\r\n        PoolInfo memory pool = poolInfo;\r\n        UserInfo storage user = userInfo[_user];\r\n        uint256 pendingBal;\r\n        // if user had deposited\r\n        if (user.amount > 0) {\r\n            harvestFromMasterChefV1();\r\n            pendingBal = (user.amount.mul(pool.accTokenPerShare) /\r\n                ACC_TOKEN_PRECISION)\r\n            .sub(user.rewardDebt);\r\n            uint256 rewardBal = rewardToken.balanceOf(address(this));\r\n            if (pendingBal > rewardBal) {\r\n                rewardToken.safeTransfer(_user, rewardBal);\r\n            } else {\r\n                rewardToken.safeTransfer(_user, pendingBal);\r\n            }\r\n        }\r\n\r\n        user.amount = _lpAmount;\r\n        user.rewardDebt =\r\n            user.amount.mul(pool.accTokenPerShare) /\r\n            ACC_TOKEN_PRECISION;\r\n\r\n        emit OnReward(_user, pendingBal);\r\n    }\r\n\r\n    /// @notice View function to see pending tokens\r\n    /// @param _user Address of user.\r\n    /// @return pending reward for a given user.\r\n    function pendingTokens(address _user)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256 pending)\r\n    {\r\n        PoolInfo memory pool = poolInfo;\r\n        UserInfo storage user = userInfo[_user];\r\n\r\n        uint256 accTokenPerShare = pool.accTokenPerShare;\r\n        uint256 lpSupply = lpToken.balanceOf(address(MCV2));\r\n\r\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\r\n            uint256 blocks = block.timestamp.sub(pool.lastRewardTimestamp);\r\n            uint256 tokenReward = blocks\r\n            .mul(tokenPerSec)\r\n            .mul(pool.allocPoint)\r\n            .div(MCV1.totalAllocPoint());\r\n            accTokenPerShare = accTokenPerShare.add(\r\n                tokenReward.mul(ACC_TOKEN_PRECISION) / lpSupply\r\n            );\r\n        }\r\n\r\n        pending = (user.amount.mul(accTokenPerShare) / ACC_TOKEN_PRECISION).sub(\r\n            user.rewardDebt\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/sushi/MasterChefPerSec.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./SushiToken.sol\";\r\n\r\n// MasterChef is the master of Sushi. He can make Sushi and he is a fair guy.\r\n//\r\n// Note that it's ownable and the owner wields tremendous power. The ownership\r\n// will be transferred to a governance smart contract once SUSHI is sufficiently\r\n// distributed and the community can show to govern itself.\r\n//\r\n// Have fun reading it. Hopefully it's bug-free. God bless.\r\ncontract MasterChefPerSec is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        //\r\n        // We do some fancy math here. Basically, any point in time, the amount of SUSHIs\r\n        // entitled to a user but is pending to be distributed is:\r\n        //\r\n        //   pending reward = (user.amount * pool.accSushiPerShare) - user.rewardDebt\r\n        //\r\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r\n        //   1. The pool's `accSushiPerShare` (and `lastRewardBlock`) gets updated.\r\n        //   2. User receives the pending reward sent to his/her address.\r\n        //   3. User's `amount` gets updated.\r\n        //   4. User's `rewardDebt` gets updated.\r\n    }\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken; // Address of LP token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. SUSHIs to distribute per block.\r\n        uint256 lastRewardTimestamp; // Last block number that SUSHIs distribution occurs.\r\n        uint256 accSushiPerShare; // Accumulated SUSHIs per share, times 1e12. See below.\r\n    }\r\n    // The SUSHI TOKEN!\r\n    SushiToken public sushi;\r\n    // Dev address.\r\n    address public devaddr;\r\n    // Block number when bonus SUSHI period ends.\r\n    uint256 public bonusEndTimestamp;\r\n    // SUSHI tokens created per block.\r\n    uint256 public sushiPerSec;\r\n    // Bonus muliplier for early sushi makers.\r\n    uint256 public constant BONUS_MULTIPLIER = 1;\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n    // The block number when SUSHI mining starts.\r\n    uint256 public startTimestamp;\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amount\r\n    );\r\n\r\n    constructor(\r\n        SushiToken _sushi,\r\n        address _devaddr,\r\n        uint256 _sushiPerSec,\r\n        uint256 _startTimestamp,\r\n        uint256 _bonusEndTimestamp\r\n    ) public {\r\n        sushi = _sushi;\r\n        devaddr = _devaddr;\r\n        sushiPerSec = _sushiPerSec;\r\n        bonusEndTimestamp = _bonusEndTimestamp;\r\n        startTimestamp = _startTimestamp;\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n    function add(\r\n        uint256 _allocPoint,\r\n        IERC20 _lpToken,\r\n        bool _withUpdate\r\n    ) public onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp\r\n            ? block.timestamp\r\n            : startTimestamp;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                lpToken: _lpToken,\r\n                allocPoint: _allocPoint,\r\n                lastRewardTimestamp: lastRewardTimestamp,\r\n                accSushiPerShare: 0\r\n            })\r\n        );\r\n    }\r\n\r\n    // Update the given pool's SUSHI allocation point. Can only be called by the owner.\r\n    function set(\r\n        uint256 _pid,\r\n        uint256 _allocPoint,\r\n        bool _withUpdate\r\n    ) public onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\r\n            _allocPoint\r\n        );\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n    }\r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_to <= bonusEndTimestamp) {\r\n            return _to.sub(_from).mul(BONUS_MULTIPLIER);\r\n        } else if (_from >= bonusEndTimestamp) {\r\n            return _to.sub(_from);\r\n        } else {\r\n            return\r\n                bonusEndTimestamp.sub(_from).mul(BONUS_MULTIPLIER).add(\r\n                    _to.sub(bonusEndTimestamp)\r\n                );\r\n        }\r\n    }\r\n\r\n    // View function to see pending SUSHIs on frontend.\r\n    function pendingSushi(uint256 _pid, address _user)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accSushiPerShare = pool.accSushiPerShare;\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\r\n            uint256 multiplier = getMultiplier(\r\n                pool.lastRewardTimestamp,\r\n                block.timestamp\r\n            );\r\n            uint256 sushiReward = multiplier\r\n            .mul(sushiPerSec)\r\n            .mul(pool.allocPoint)\r\n            .div(totalAllocPoint);\r\n            accSushiPerShare = accSushiPerShare.add(\r\n                sushiReward.mul(1e12).div(lpSupply)\r\n            );\r\n        }\r\n        return user.amount.mul(accSushiPerShare).div(1e12).sub(user.rewardDebt);\r\n    }\r\n\r\n    // Update reward vairables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.timestamp <= pool.lastRewardTimestamp) {\r\n            return;\r\n        }\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n        if (lpSupply == 0) {\r\n            pool.lastRewardTimestamp = block.timestamp;\r\n            return;\r\n        }\r\n        uint256 multiplier = getMultiplier(\r\n            pool.lastRewardTimestamp,\r\n            block.timestamp\r\n        );\r\n        uint256 sushiReward = multiplier\r\n        .mul(sushiPerSec)\r\n        .mul(pool.allocPoint)\r\n        .div(totalAllocPoint);\r\n        sushi.mint(devaddr, sushiReward.div(10));\r\n        sushi.mint(address(this), sushiReward);\r\n        pool.accSushiPerShare = pool.accSushiPerShare.add(\r\n            sushiReward.mul(1e12).div(lpSupply)\r\n        );\r\n        pool.lastRewardTimestamp = block.timestamp;\r\n    }\r\n\r\n    // Deposit LP tokens to MasterChef for SUSHI allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        updatePool(_pid);\r\n        if (user.amount > 0) {\r\n            uint256 pending = user\r\n            .amount\r\n            .mul(pool.accSushiPerShare)\r\n            .div(1e12)\r\n            .sub(user.rewardDebt);\r\n            safeSushiTransfer(msg.sender, pending);\r\n        }\r\n        pool.lpToken.safeTransferFrom(\r\n            address(msg.sender),\r\n            address(this),\r\n            _amount\r\n        );\r\n        user.amount = user.amount.add(_amount);\r\n        user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12);\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw LP tokens from MasterChef.\r\n    function withdraw(uint256 _pid, uint256 _amount) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount >= _amount, \"withdraw: not good\");\r\n        updatePool(_pid);\r\n        uint256 pending = user.amount.mul(pool.accSushiPerShare).div(1e12).sub(\r\n            user.rewardDebt\r\n        );\r\n        safeSushiTransfer(msg.sender, pending);\r\n        user.amount = user.amount.sub(_amount);\r\n        user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12);\r\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\r\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n    }\r\n\r\n    // Safe sushi transfer function, just in case if rounding error causes pool to not have enough SUSHIs.\r\n    function safeSushiTransfer(address _to, uint256 _amount) internal {\r\n        uint256 sushiBal = sushi.balanceOf(address(this));\r\n        if (_amount > sushiBal) {\r\n            sushi.transfer(_to, sushiBal);\r\n        } else {\r\n            sushi.transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    // Update dev address by the previous dev.\r\n    function dev(address _devaddr) public {\r\n        require(msg.sender == devaddr, \"dev: wut?\");\r\n        devaddr = _devaddr;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "contracts/sushi/SushiToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n// SushiToken with Governance.\r\ncontract SushiToken is ERC20(\"SushiToken\", \"SUSHI\"), Ownable {\r\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\r\n    function mint(address _to, uint256 _amount) public onlyOwner {\r\n        _mint(_to, _amount);\r\n        _moveDelegates(address(0), _delegates[_to], _amount);\r\n    }\r\n\r\n    // Copied and modified from YAM code:\r\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\r\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\r\n    // Which is copied and modified from COMPOUND:\r\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\r\n\r\n    /// @notice A record of each accounts delegate\r\n    mapping(address => address) internal _delegates;\r\n\r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint32 fromBlock;\r\n        uint256 votes;\r\n    }\r\n\r\n    /// @notice A record of votes checkpoints for each account, by index\r\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\r\n\r\n    /// @notice The number of checkpoints for each account\r\n    mapping(address => uint32) public numCheckpoints;\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPEHASH =\r\n        keccak256(\r\n            \"EIP712Domain(string name,uint256 chainId,address verifyingContract)\"\r\n        );\r\n\r\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n    bytes32 public constant DELEGATION_TYPEHASH =\r\n        keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\r\n\r\n    /// @notice A record of states for signing / validating signatures\r\n    mapping(address => uint256) public nonces;\r\n\r\n    /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(\r\n        address indexed delegator,\r\n        address indexed fromDelegate,\r\n        address indexed toDelegate\r\n    );\r\n\r\n    /// @notice An event thats emitted when a delegate account's vote balance changes\r\n    event DelegateVotesChanged(\r\n        address indexed delegate,\r\n        uint256 previousBalance,\r\n        uint256 newBalance\r\n    );\r\n\r\n    /**\r\n     * @notice Delegate votes from `msg.sender` to `delegatee`\r\n     * @param delegator The address to get delegatee for\r\n     */\r\n    function delegates(address delegator) external view returns (address) {\r\n        return _delegates[delegator];\r\n    }\r\n\r\n    /**\r\n     * @notice Delegate votes from `msg.sender` to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     */\r\n    function delegate(address delegatee) external {\r\n        return _delegate(msg.sender, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates votes from signatory to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     * @param nonce The contract state required to match the signature\r\n     * @param expiry The time at which to expire the signature\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function delegateBySig(\r\n        address delegatee,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        bytes32 domainSeparator = keccak256(\r\n            abi.encode(\r\n                DOMAIN_TYPEHASH,\r\n                keccak256(bytes(name())),\r\n                getChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n\r\n        bytes32 structHash = keccak256(\r\n            abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\r\n        );\r\n\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash)\r\n        );\r\n\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(\r\n            signatory != address(0),\r\n            \"SUSHI::delegateBySig: invalid signature\"\r\n        );\r\n        require(\r\n            nonce == nonces[signatory]++,\r\n            \"SUSHI::delegateBySig: invalid nonce\"\r\n        );\r\n        require(now <= expiry, \"SUSHI::delegateBySig: signature expired\");\r\n        return _delegate(signatory, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current votes balance for `account`\r\n     * @param account The address to get votes balance\r\n     * @return The number of current votes for `account`\r\n     */\r\n    function getCurrentVotes(address account) external view returns (uint256) {\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        return\r\n            nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the prior number of votes for an account as of a block number\r\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n     * @param account The address of the account to check\r\n     * @param blockNumber The block number to get the vote balance at\r\n     * @return The number of votes the account had as of the given block\r\n     */\r\n    function getPriorVotes(address account, uint256 blockNumber)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            blockNumber < block.number,\r\n            \"SUSHI::getPriorVotes: not yet determined\"\r\n        );\r\n\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        if (nCheckpoints == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // First check most recent balance\r\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n            return checkpoints[account][nCheckpoints - 1].votes;\r\n        }\r\n\r\n        // Next check implicit zero balance\r\n        if (checkpoints[account][0].fromBlock > blockNumber) {\r\n            return 0;\r\n        }\r\n\r\n        uint32 lower = 0;\r\n        uint32 upper = nCheckpoints - 1;\r\n        while (upper > lower) {\r\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n            Checkpoint memory cp = checkpoints[account][center];\r\n            if (cp.fromBlock == blockNumber) {\r\n                return cp.votes;\r\n            } else if (cp.fromBlock < blockNumber) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return checkpoints[account][lower].votes;\r\n    }\r\n\r\n    function _delegate(address delegator, address delegatee) internal {\r\n        address currentDelegate = _delegates[delegator];\r\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying SUSHIs (not scaled);\r\n        _delegates[delegator] = delegatee;\r\n\r\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n    }\r\n\r\n    function _moveDelegates(\r\n        address srcRep,\r\n        address dstRep,\r\n        uint256 amount\r\n    ) internal {\r\n        if (srcRep != dstRep && amount > 0) {\r\n            if (srcRep != address(0)) {\r\n                // decrease old representative\r\n                uint32 srcRepNum = numCheckpoints[srcRep];\r\n                uint256 srcRepOld = srcRepNum > 0\r\n                    ? checkpoints[srcRep][srcRepNum - 1].votes\r\n                    : 0;\r\n                uint256 srcRepNew = srcRepOld.sub(amount);\r\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n            }\r\n\r\n            if (dstRep != address(0)) {\r\n                // increase new representative\r\n                uint32 dstRepNum = numCheckpoints[dstRep];\r\n                uint256 dstRepOld = dstRepNum > 0\r\n                    ? checkpoints[dstRep][dstRepNum - 1].votes\r\n                    : 0;\r\n                uint256 dstRepNew = dstRepOld.add(amount);\r\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _writeCheckpoint(\r\n        address delegatee,\r\n        uint32 nCheckpoints,\r\n        uint256 oldVotes,\r\n        uint256 newVotes\r\n    ) internal {\r\n        uint32 blockNumber = safe32(\r\n            block.number,\r\n            \"SUSHI::_writeCheckpoint: block number exceeds 32 bits\"\r\n        );\r\n\r\n        if (\r\n            nCheckpoints > 0 &&\r\n            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\r\n        ) {\r\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n        } else {\r\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(\r\n                blockNumber,\r\n                newVotes\r\n            );\r\n            numCheckpoints[delegatee] = nCheckpoints + 1;\r\n        }\r\n\r\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n    }\r\n\r\n    function safe32(uint256 n, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint32)\r\n    {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    function getChainId() internal pure returns (uint256) {\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        return chainId;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "contracts/mocks/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract ERC20Mock is ERC20, Ownable {\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 supply\r\n    ) public ERC20(name, symbol) {\r\n        _mint(msg.sender, supply);\r\n    }\r\n}\r\n"
    },
    "contracts/JoeToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n// JoeToken with Governance.\r\ncontract JoeToken is ERC20(\"JoeToken\", \"JOE\"), Ownable {\r\n    /// @notice Total number of tokens\r\n    uint256 public maxSupply = 500_000_000e18; // 500 million Joe\r\n\r\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterJoe).\r\n    function mint(address _to, uint256 _amount) public onlyOwner {\r\n        require(\r\n            totalSupply().add(_amount) <= maxSupply,\r\n            \"JOE::mint: cannot exceed max supply\"\r\n        );\r\n        _mint(_to, _amount);\r\n        _moveDelegates(address(0), _delegates[_to], _amount);\r\n    }\r\n\r\n    // Copied and modified from YAM code:\r\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\r\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\r\n    // Which is copied and modified from COMPOUND:\r\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\r\n\r\n    /// @notice A record of each accounts delegate\r\n    mapping(address => address) internal _delegates;\r\n\r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint32 fromBlock;\r\n        uint256 votes;\r\n    }\r\n\r\n    /// @notice A record of votes checkpoints for each account, by index\r\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\r\n\r\n    /// @notice The number of checkpoints for each account\r\n    mapping(address => uint32) public numCheckpoints;\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPEHASH =\r\n        keccak256(\r\n            \"EIP712Domain(string name,uint256 chainId,address verifyingContract)\"\r\n        );\r\n\r\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n    bytes32 public constant DELEGATION_TYPEHASH =\r\n        keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\r\n\r\n    /// @notice A record of states for signing / validating signatures\r\n    mapping(address => uint256) public nonces;\r\n\r\n    /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(\r\n        address indexed delegator,\r\n        address indexed fromDelegate,\r\n        address indexed toDelegate\r\n    );\r\n\r\n    /// @notice An event thats emitted when a delegate account's vote balance changes\r\n    event DelegateVotesChanged(\r\n        address indexed delegate,\r\n        uint256 previousBalance,\r\n        uint256 newBalance\r\n    );\r\n\r\n    /**\r\n     * @notice Delegate votes from `msg.sender` to `delegatee`\r\n     * @param delegator The address to get delegatee for\r\n     */\r\n    function delegates(address delegator) external view returns (address) {\r\n        return _delegates[delegator];\r\n    }\r\n\r\n    /**\r\n     * @notice Delegate votes from `msg.sender` to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     */\r\n    function delegate(address delegatee) external {\r\n        return _delegate(msg.sender, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates votes from signatory to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     * @param nonce The contract state required to match the signature\r\n     * @param expiry The time at which to expire the signature\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function delegateBySig(\r\n        address delegatee,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        bytes32 domainSeparator = keccak256(\r\n            abi.encode(\r\n                DOMAIN_TYPEHASH,\r\n                keccak256(bytes(name())),\r\n                getChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n\r\n        bytes32 structHash = keccak256(\r\n            abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\r\n        );\r\n\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash)\r\n        );\r\n\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(\r\n            signatory != address(0),\r\n            \"JOE::delegateBySig: invalid signature\"\r\n        );\r\n        require(\r\n            nonce == nonces[signatory]++,\r\n            \"JOE::delegateBySig: invalid nonce\"\r\n        );\r\n        require(now <= expiry, \"JOE::delegateBySig: signature expired\");\r\n        return _delegate(signatory, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current votes balance for `account`\r\n     * @param account The address to get votes balance\r\n     * @return The number of current votes for `account`\r\n     */\r\n    function getCurrentVotes(address account) external view returns (uint256) {\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        return\r\n            nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the prior number of votes for an account as of a block number\r\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n     * @param account The address of the account to check\r\n     * @param blockNumber The block number to get the vote balance at\r\n     * @return The number of votes the account had as of the given block\r\n     */\r\n    function getPriorVotes(address account, uint256 blockNumber)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            blockNumber < block.number,\r\n            \"JOE::getPriorVotes: not yet determined\"\r\n        );\r\n\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        if (nCheckpoints == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // First check most recent balance\r\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n            return checkpoints[account][nCheckpoints - 1].votes;\r\n        }\r\n\r\n        // Next check implicit zero balance\r\n        if (checkpoints[account][0].fromBlock > blockNumber) {\r\n            return 0;\r\n        }\r\n\r\n        uint32 lower = 0;\r\n        uint32 upper = nCheckpoints - 1;\r\n        while (upper > lower) {\r\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n            Checkpoint memory cp = checkpoints[account][center];\r\n            if (cp.fromBlock == blockNumber) {\r\n                return cp.votes;\r\n            } else if (cp.fromBlock < blockNumber) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return checkpoints[account][lower].votes;\r\n    }\r\n\r\n    function _delegate(address delegator, address delegatee) internal {\r\n        address currentDelegate = _delegates[delegator];\r\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying JOEs (not scaled);\r\n        _delegates[delegator] = delegatee;\r\n\r\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n    }\r\n\r\n    function _moveDelegates(\r\n        address srcRep,\r\n        address dstRep,\r\n        uint256 amount\r\n    ) internal {\r\n        if (srcRep != dstRep && amount > 0) {\r\n            if (srcRep != address(0)) {\r\n                // decrease old representative\r\n                uint32 srcRepNum = numCheckpoints[srcRep];\r\n                uint256 srcRepOld = srcRepNum > 0\r\n                    ? checkpoints[srcRep][srcRepNum - 1].votes\r\n                    : 0;\r\n                uint256 srcRepNew = srcRepOld.sub(amount);\r\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n            }\r\n\r\n            if (dstRep != address(0)) {\r\n                // increase new representative\r\n                uint32 dstRepNum = numCheckpoints[dstRep];\r\n                uint256 dstRepOld = dstRepNum > 0\r\n                    ? checkpoints[dstRep][dstRepNum - 1].votes\r\n                    : 0;\r\n                uint256 dstRepNew = dstRepOld.add(amount);\r\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _writeCheckpoint(\r\n        address delegatee,\r\n        uint32 nCheckpoints,\r\n        uint256 oldVotes,\r\n        uint256 newVotes\r\n    ) internal {\r\n        uint32 blockNumber = safe32(\r\n            block.number,\r\n            \"JOE::_writeCheckpoint: block number exceeds 32 bits\"\r\n        );\r\n\r\n        if (\r\n            nCheckpoints > 0 &&\r\n            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\r\n        ) {\r\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n        } else {\r\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(\r\n                blockNumber,\r\n                newVotes\r\n            );\r\n            numCheckpoints[delegatee] = nCheckpoints + 1;\r\n        }\r\n\r\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n    }\r\n\r\n    function safe32(uint256 n, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint32)\r\n    {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    function getChainId() internal pure returns (uint256) {\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        return chainId;\r\n    }\r\n}\r\n"
    },
    "contracts/MasterChefJoeV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./JoeToken.sol\";\r\nimport \"./libraries/BoringERC20.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\ninterface IRewarder {\r\n    using SafeERC20 for IERC20;\r\n\r\n    function onJoeReward(address user, uint256 newLpAmount) external;\r\n\r\n    function pendingTokens(address user)\r\n        external\r\n        view\r\n        returns (uint256 pending);\r\n\r\n    function rewardToken() external view returns (address);\r\n}\r\n\r\n// MasterChefJoe is a boss. He says \"go f your blocks lego boy, I'm gonna use timestamp instead\".\r\n// And to top it off, it takes no risks. Because the biggest risk is operator error.\r\n// So we make it virtually impossible for the operator of this contract to cause a bug with people's harvests.\r\n//\r\n// Note that it's ownable and the owner wields tremendous power. The ownership\r\n// will be transferred to a governance smart contract once JOE is sufficiently\r\n// distributed and the community can show to govern itself.\r\n//\r\n// With thanks to the Lydia Finance team.\r\n//\r\n// Godspeed and may the 10x be with you.\r\ncontract MasterChefJoeV2 is Ownable {\r\n    using SafeMath for uint256;\r\n    using BoringERC20 for IERC20;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        //\r\n        // We do some fancy math here. Basically, any point in time, the amount of JOEs\r\n        // entitled to a user but is pending to be distributed is:\r\n        //\r\n        //   pending reward = (user.amount * pool.accJoePerShare) - user.rewardDebt\r\n        //\r\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r\n        //   1. The pool's `accJoePerShare` (and `lastRewardTimestamp`) gets updated.\r\n        //   2. User receives the pending reward sent to his/her address.\r\n        //   3. User's `amount` gets updated.\r\n        //   4. User's `rewardDebt` gets updated.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken; // Address of LP token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. JOEs to distribute per second.\r\n        uint256 lastRewardTimestamp; // Last timestamp that JOEs distribution occurs.\r\n        uint256 accJoePerShare; // Accumulated JOEs per share, times 1e12. See below.\r\n        IRewarder rewarder;\r\n    }\r\n\r\n    // The JOE TOKEN!\r\n    JoeToken public joe;\r\n    // Dev address.\r\n    address public devAddr;\r\n    // Treasury address.\r\n    address public treasuryAddr;\r\n    // Investor address\r\n    address public investorAddr;\r\n    // JOE tokens created per second.\r\n    uint256 public joePerSec;\r\n    // Percentage of pool rewards that goto the devs.\r\n    uint256 public devPercent;\r\n    // Percentage of pool rewards that goes to the treasury.\r\n    uint256 public treasuryPercent;\r\n    // Percentage of pool rewards that goes to the investor.\r\n    uint256 public investorPercent;\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    // Set of all LP tokens that have been added as pools\r\n    EnumerableSet.AddressSet private lpTokens;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    // Total allocation points. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint;\r\n    // The timestamp when JOE mining starts.\r\n    uint256 public startTimestamp;\r\n\r\n    event Add(\r\n        uint256 indexed pid,\r\n        uint256 allocPoint,\r\n        IERC20 indexed lpToken,\r\n        IRewarder indexed rewarder\r\n    );\r\n    event Set(\r\n        uint256 indexed pid,\r\n        uint256 allocPoint,\r\n        IRewarder indexed rewarder,\r\n        bool overwrite\r\n    );\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event UpdatePool(\r\n        uint256 indexed pid,\r\n        uint256 lastRewardTimestamp,\r\n        uint256 lpSupply,\r\n        uint256 accJoePerShare\r\n    );\r\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amount\r\n    );\r\n    event SetDevAddress(address indexed oldAddress, address indexed newAddress);\r\n    event UpdateEmissionRate(address indexed user, uint256 _joePerSec);\r\n\r\n    constructor(\r\n        JoeToken _joe,\r\n        address _devAddr,\r\n        address _treasuryAddr,\r\n        address _investorAddr,\r\n        uint256 _joePerSec,\r\n        uint256 _startTimestamp,\r\n        uint256 _devPercent,\r\n        uint256 _treasuryPercent,\r\n        uint256 _investorPercent\r\n    ) public {\r\n        require(\r\n            0 <= _devPercent && _devPercent <= 1000,\r\n            \"constructor: invalid dev percent value\"\r\n        );\r\n        require(\r\n            0 <= _treasuryPercent && _treasuryPercent <= 1000,\r\n            \"constructor: invalid treasury percent value\"\r\n        );\r\n        require(\r\n            0 <= _investorPercent && _investorPercent <= 1000,\r\n            \"constructor: invalid investor percent value\"\r\n        );\r\n        require(\r\n            _devPercent + _treasuryPercent + _investorPercent <= 1000,\r\n            \"constructor: total percent over max\"\r\n        );\r\n        joe = _joe;\r\n        devAddr = _devAddr;\r\n        treasuryAddr = _treasuryAddr;\r\n        investorAddr = _investorAddr;\r\n        joePerSec = _joePerSec;\r\n        startTimestamp = _startTimestamp;\r\n        devPercent = _devPercent;\r\n        treasuryPercent = _treasuryPercent;\r\n        investorPercent = _investorPercent;\r\n        totalAllocPoint = 0;\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n    function add(\r\n        uint256 _allocPoint,\r\n        IERC20 _lpToken,\r\n        IRewarder _rewarder\r\n    ) public onlyOwner {\r\n        require(\r\n            Address.isContract(address(_lpToken)),\r\n            \"add: LP token must be a valid contract\"\r\n        );\r\n        require(\r\n            Address.isContract(address(_rewarder)) ||\r\n                address(_rewarder) == address(0),\r\n            \"add: rewarder must be contract or zero\"\r\n        );\r\n        require(!lpTokens.contains(address(_lpToken)), \"add: LP already added\");\r\n        massUpdatePools();\r\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp\r\n            ? block.timestamp\r\n            : startTimestamp;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                lpToken: _lpToken,\r\n                allocPoint: _allocPoint,\r\n                lastRewardTimestamp: lastRewardTimestamp,\r\n                accJoePerShare: 0,\r\n                rewarder: _rewarder\r\n            })\r\n        );\r\n        lpTokens.add(address(_lpToken));\r\n        emit Add(poolInfo.length.sub(1), _allocPoint, _lpToken, _rewarder);\r\n    }\r\n\r\n    // Update the given pool's JOE allocation point. Can only be called by the owner.\r\n    function set(\r\n        uint256 _pid,\r\n        uint256 _allocPoint,\r\n        IRewarder _rewarder,\r\n        bool overwrite\r\n    ) public onlyOwner {\r\n        require(\r\n            Address.isContract(address(_rewarder)) ||\r\n                address(_rewarder) == address(0),\r\n            \"set: rewarder must be contract or zero\"\r\n        );\r\n        massUpdatePools();\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\r\n            _allocPoint\r\n        );\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n        if (overwrite) {\r\n            poolInfo[_pid].rewarder = _rewarder;\r\n        }\r\n        emit Set(\r\n            _pid,\r\n            _allocPoint,\r\n            overwrite ? _rewarder : poolInfo[_pid].rewarder,\r\n            overwrite\r\n        );\r\n    }\r\n\r\n    // View function to see pending JOEs on frontend.\r\n    function pendingTokens(uint256 _pid, address _user)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 pendingJoe,\r\n            address bonusTokenAddress,\r\n            string memory bonusTokenSymbol,\r\n            uint256 pendingBonusToken\r\n        )\r\n    {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accJoePerShare = pool.accJoePerShare;\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\r\n            uint256 multiplier = block.timestamp.sub(pool.lastRewardTimestamp);\r\n            uint256 lpPercent = 1000 -\r\n                devPercent -\r\n                treasuryPercent -\r\n                investorPercent;\r\n            uint256 joeReward = multiplier\r\n            .mul(joePerSec)\r\n            .mul(pool.allocPoint)\r\n            .div(totalAllocPoint)\r\n            .mul(lpPercent)\r\n            .div(1000);\r\n            accJoePerShare = accJoePerShare.add(\r\n                joeReward.mul(1e12).div(lpSupply)\r\n            );\r\n        }\r\n        pendingJoe = user.amount.mul(accJoePerShare).div(1e12).sub(\r\n            user.rewardDebt\r\n        );\r\n\r\n        // If it's a double reward farm, we return info about the bonus token\r\n        if (address(pool.rewarder) != address(0)) {\r\n            (bonusTokenAddress, bonusTokenSymbol) = rewarderBonusTokenInfo(\r\n                _pid\r\n            );\r\n            pendingBonusToken = pool.rewarder.pendingTokens(_user);\r\n        }\r\n    }\r\n\r\n    // Get bonus token info from the rewarder contract for a given pool, if it is a double reward farm\r\n    function rewarderBonusTokenInfo(uint256 _pid)\r\n        public\r\n        view\r\n        returns (address bonusTokenAddress, string memory bonusTokenSymbol)\r\n    {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (address(pool.rewarder) != address(0)) {\r\n            bonusTokenAddress = address(pool.rewarder.rewardToken());\r\n            bonusTokenSymbol = IERC20(pool.rewarder.rewardToken()).safeSymbol();\r\n        }\r\n    }\r\n\r\n    // Update reward variables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.timestamp <= pool.lastRewardTimestamp) {\r\n            return;\r\n        }\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n        if (lpSupply == 0) {\r\n            pool.lastRewardTimestamp = block.timestamp;\r\n            return;\r\n        }\r\n        uint256 multiplier = block.timestamp.sub(pool.lastRewardTimestamp);\r\n        uint256 joeReward = multiplier.mul(joePerSec).mul(pool.allocPoint).div(\r\n            totalAllocPoint\r\n        );\r\n        uint256 lpPercent = 1000 -\r\n            devPercent -\r\n            treasuryPercent -\r\n            investorPercent;\r\n        joe.mint(devAddr, joeReward.mul(devPercent).div(1000));\r\n        joe.mint(treasuryAddr, joeReward.mul(treasuryPercent).div(1000));\r\n        joe.mint(investorAddr, joeReward.mul(investorPercent).div(1000));\r\n        joe.mint(address(this), joeReward.mul(lpPercent).div(1000));\r\n        pool.accJoePerShare = pool.accJoePerShare.add(\r\n            joeReward.mul(1e12).div(lpSupply).mul(lpPercent).div(1000)\r\n        );\r\n        pool.lastRewardTimestamp = block.timestamp;\r\n        emit UpdatePool(\r\n            _pid,\r\n            pool.lastRewardTimestamp,\r\n            lpSupply,\r\n            pool.accJoePerShare\r\n        );\r\n    }\r\n\r\n    // Deposit LP tokens to MasterChef for JOE allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        updatePool(_pid);\r\n        if (user.amount > 0) {\r\n            // Harvest JOE\r\n            uint256 pending = user\r\n            .amount\r\n            .mul(pool.accJoePerShare)\r\n            .div(1e12)\r\n            .sub(user.rewardDebt);\r\n            safeJoeTransfer(msg.sender, pending);\r\n            emit Harvest(msg.sender, _pid, pending);\r\n        }\r\n        user.amount = user.amount.add(_amount);\r\n        user.rewardDebt = user.amount.mul(pool.accJoePerShare).div(1e12);\r\n\r\n        IRewarder rewarder = poolInfo[_pid].rewarder;\r\n        if (address(rewarder) != address(0)) {\r\n            rewarder.onJoeReward(msg.sender, user.amount);\r\n        }\r\n\r\n        pool.lpToken.safeTransferFrom(\r\n            address(msg.sender),\r\n            address(this),\r\n            _amount\r\n        );\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw LP tokens from MasterChef.\r\n    function withdraw(uint256 _pid, uint256 _amount) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount >= _amount, \"withdraw: not good\");\r\n\r\n        updatePool(_pid);\r\n\r\n        // Harvest JOE\r\n        uint256 pending = user.amount.mul(pool.accJoePerShare).div(1e12).sub(\r\n            user.rewardDebt\r\n        );\r\n        safeJoeTransfer(msg.sender, pending);\r\n        emit Harvest(msg.sender, _pid, pending);\r\n\r\n        user.amount = user.amount.sub(_amount);\r\n        user.rewardDebt = user.amount.mul(pool.accJoePerShare).div(1e12);\r\n\r\n        IRewarder rewarder = poolInfo[_pid].rewarder;\r\n        if (address(rewarder) != address(0)) {\r\n            rewarder.onJoeReward(msg.sender, user.amount);\r\n        }\r\n\r\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\r\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n    }\r\n\r\n    // Safe joe transfer function, just in case if rounding error causes pool to not have enough JOEs.\r\n    function safeJoeTransfer(address _to, uint256 _amount) internal {\r\n        uint256 joeBal = joe.balanceOf(address(this));\r\n        if (_amount > joeBal) {\r\n            joe.transfer(_to, joeBal);\r\n        } else {\r\n            joe.transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    // Update dev address by the previous dev.\r\n    function dev(address _devAddr) public {\r\n        require(msg.sender == devAddr, \"dev: wut?\");\r\n        devAddr = _devAddr;\r\n        emit SetDevAddress(msg.sender, _devAddr);\r\n    }\r\n\r\n    function setDevPercent(uint256 _newDevPercent) public onlyOwner {\r\n        require(\r\n            0 <= _newDevPercent && _newDevPercent <= 1000,\r\n            \"setDevPercent: invalid percent value\"\r\n        );\r\n        require(\r\n            treasuryPercent + _newDevPercent + investorPercent <= 1000,\r\n            \"setDevPercent: total percent over max\"\r\n        );\r\n        devPercent = _newDevPercent;\r\n    }\r\n\r\n    // Update treasury address by the previous treasury.\r\n    function setTreasuryAddr(address _treasuryAddr) public {\r\n        require(msg.sender == treasuryAddr, \"setTreasuryAddr: wut?\");\r\n        treasuryAddr = _treasuryAddr;\r\n    }\r\n\r\n    function setTreasuryPercent(uint256 _newTreasuryPercent) public onlyOwner {\r\n        require(\r\n            0 <= _newTreasuryPercent && _newTreasuryPercent <= 1000,\r\n            \"setTreasuryPercent: invalid percent value\"\r\n        );\r\n        require(\r\n            devPercent + _newTreasuryPercent + investorPercent <= 1000,\r\n            \"setTreasuryPercent: total percent over max\"\r\n        );\r\n        treasuryPercent = _newTreasuryPercent;\r\n    }\r\n\r\n    // Update the investor address by the previous investor.\r\n    function setInvestorAddr(address _investorAddr) public {\r\n        require(msg.sender == investorAddr, \"setInvestorAddr: wut?\");\r\n        investorAddr = _investorAddr;\r\n    }\r\n\r\n    function setInvestorPercent(uint256 _newInvestorPercent) public onlyOwner {\r\n        require(\r\n            0 <= _newInvestorPercent && _newInvestorPercent <= 1000,\r\n            \"setInvestorPercent: invalid percent value\"\r\n        );\r\n        require(\r\n            devPercent + _newInvestorPercent + treasuryPercent <= 1000,\r\n            \"setInvestorPercent: total percent over max\"\r\n        );\r\n        investorPercent = _newInvestorPercent;\r\n    }\r\n\r\n    // Pancake has to add hidden dummy pools inorder to alter the emission,\r\n    // here we make it simple and transparent to all.\r\n    function updateEmissionRate(uint256 _joePerSec) public onlyOwner {\r\n        massUpdatePools();\r\n        joePerSec = _joePerSec;\r\n        emit UpdateEmissionRate(msg.sender, _joePerSec);\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/BoringERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n// solhint-disable avoid-low-level-calls\r\n\r\nlibrary BoringERC20 {\r\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\r\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\r\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\r\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\r\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\r\n\r\n    function returnDataToString(bytes memory data)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        if (data.length >= 64) {\r\n            return abi.decode(data, (string));\r\n        } else if (data.length == 32) {\r\n            uint8 i = 0;\r\n            while (i < 32 && data[i] != 0) {\r\n                i++;\r\n            }\r\n            bytes memory bytesArray = new bytes(i);\r\n            for (i = 0; i < 32 && data[i] != 0; i++) {\r\n                bytesArray[i] = data[i];\r\n            }\r\n            return string(bytesArray);\r\n        } else {\r\n            return \"???\";\r\n        }\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\r\n    /// @param token The address of the ERC-20 token contract.\r\n    /// @return (string) Token symbol.\r\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(\r\n            abi.encodeWithSelector(SIG_SYMBOL)\r\n        );\r\n        return success ? returnDataToString(data) : \"???\";\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\r\n    /// @param token The address of the ERC-20 token contract.\r\n    /// @return (string) Token name.\r\n    function safeName(IERC20 token) internal view returns (string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(\r\n            abi.encodeWithSelector(SIG_NAME)\r\n        );\r\n        return success ? returnDataToString(data) : \"???\";\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\r\n    /// @param token The address of the ERC-20 token contract.\r\n    /// @return (uint8) Token decimals.\r\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\r\n        (bool success, bytes memory data) = address(token).staticcall(\r\n            abi.encodeWithSelector(SIG_DECIMALS)\r\n        );\r\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\r\n    /// Reverts on a failed transfer.\r\n    /// @param token The address of the ERC-20 token.\r\n    /// @param to Transfer tokens to.\r\n    /// @param amount The token amount.\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"BoringERC20: Transfer failed\"\r\n        );\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\r\n    /// Reverts on a failed transfer.\r\n    /// @param token The address of the ERC-20 token.\r\n    /// @param from Transfer tokens from.\r\n    /// @param to Transfer tokens to.\r\n    /// @param amount The token amount.\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"BoringERC20: TransferFrom failed\"\r\n        );\r\n    }\r\n}\r\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/rewarders/MasterChefRewarderPerBlock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../libraries/SafeERC20.sol\";\r\nimport \"../interfaces/IRewarder.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\ninterface IMasterChef {\r\n    struct PoolInfo {\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. JOE to distribute per block.\r\n    }\r\n\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n\r\n    function poolInfo(uint256 pid)\r\n        external\r\n        view\r\n        returns (IMasterChef.PoolInfo memory);\r\n\r\n    function totalAllocPoint() external view returns (uint256);\r\n}\r\n\r\ninterface IMasterChefJoeV2 {\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n    }\r\n\r\n    struct PoolInfo {\r\n        IERC20 lpToken; // Address of LP token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this poolInfo. SUSHI to distribute per block.\r\n        uint256 lastRewardTimestamp; // Last block number that SUSHI distribution occurs.\r\n        uint256 accJoePerShare; // Accumulated SUSHI per share, times 1e12. See below.\r\n    }\r\n\r\n    function poolInfo(uint256 pid) external view returns (PoolInfo memory);\r\n\r\n    function totalAllocPoint() external view returns (uint256);\r\n\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n}\r\n\r\n/**\r\n * This is a sample contract to be used in the MasterChefJoeV2 contract for partners to reward\r\n * stakers with their native token alongside JOE.\r\n *\r\n * It assumes the project already has an existing MasterChef-style farm contract.\r\n * In which case, the init() function is called to deposit a dummy token into one\r\n * of the MasterChef farms so this contract can accrue rewards from that farm.\r\n * The contract then transfers the reward token to the user on each call to\r\n * onJoeReward().\r\n *\r\n */\r\ncontract MasterChefRewarderPerBlock is IRewarder, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public immutable override rewardToken;\r\n    IERC20 public immutable lpToken;\r\n    uint256 public immutable MCV1_pid;\r\n    IMasterChef public immutable MCV1;\r\n    IMasterChefJoeV2 public immutable MCV2;\r\n\r\n    /// @notice Info of each MCV2 user.\r\n    /// `amount` LP token amount the user has provided.\r\n    /// `rewardDebt` The amount of JOE entitled to the user.\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 rewardDebt;\r\n    }\r\n\r\n    /// @notice Info of each MCV2 poolInfo.\r\n    /// `accTokenPerShare` Amount of JOE each LP token is worth.\r\n    /// `lastRewardBlock` The last block JOE was rewarded to the poolInfo.\r\n    struct PoolInfo {\r\n        uint256 accTokenPerShare;\r\n        uint256 lastRewardBlock;\r\n        uint256 allocPoint;\r\n    }\r\n\r\n    /// @notice Info of the poolInfo.\r\n    PoolInfo public poolInfo;\r\n    /// @notice Info of each user that stakes LP tokens.\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    uint256 public tokenPerBlock;\r\n    uint256 private constant ACC_TOKEN_PRECISION = 1e12;\r\n\r\n    event OnReward(address indexed user, uint256 amount);\r\n    event RewardRateUpdated(uint256 oldRate, uint256 newRate);\r\n    event AllocPointUpdated(uint256 oldAllocPoint, uint256 newAllocPoint);\r\n\r\n    modifier onlyMCV2 {\r\n        require(\r\n            msg.sender == address(MCV2),\r\n            \"onlyMCV2: only MasterChef V2 can call this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        IERC20 _rewardToken,\r\n        IERC20 _lpToken,\r\n        uint256 _tokenPerBlock,\r\n        uint256 _allocPoint,\r\n        uint256 _MCV1_pid,\r\n        IMasterChef _MCV1,\r\n        IMasterChefJoeV2 _MCV2\r\n    ) public {\r\n        require(\r\n            Address.isContract(address(_rewardToken)),\r\n            \"constructor: reward token must be a valid contract\"\r\n        );\r\n        require(\r\n            Address.isContract(address(_lpToken)),\r\n            \"constructor: LP token must be a valid contract\"\r\n        );\r\n        require(\r\n            Address.isContract(address(_MCV1)),\r\n            \"constructor: MasterChef must be a valid contract\"\r\n        );\r\n        require(\r\n            Address.isContract(address(_MCV2)),\r\n            \"constructor: MasterChefJoeV2 must be a valid contract\"\r\n        );\r\n\r\n        rewardToken = _rewardToken;\r\n        lpToken = _lpToken;\r\n        tokenPerBlock = _tokenPerBlock;\r\n        MCV1_pid = _MCV1_pid;\r\n        MCV1 = _MCV1;\r\n        MCV2 = _MCV2;\r\n        poolInfo = PoolInfo({\r\n            lastRewardBlock: block.number,\r\n            accTokenPerShare: 0,\r\n            allocPoint: _allocPoint\r\n        });\r\n    }\r\n\r\n    /// @notice Deposits a dummy token to a MaterChefV1 farm so that this contract can claim reward tokens.\r\n    /// @param dummyToken The address of the dummy ERC20 token to deposit into MCV1.\r\n    function init(IERC20 dummyToken) external {\r\n        uint256 balance = dummyToken.balanceOf(msg.sender);\r\n        require(balance > 0, \"init: Balance must exceed 0\");\r\n        dummyToken.safeTransferFrom(msg.sender, balance);\r\n        dummyToken.approve(address(MCV1), balance);\r\n        MCV1.deposit(MCV1_pid, balance);\r\n    }\r\n\r\n    /// @notice Update reward variables of the given poolInfo.\r\n    /// @return pool Returns the pool that was updated.\r\n    function updatePool() public returns (PoolInfo memory pool) {\r\n        pool = poolInfo;\r\n\r\n        if (block.number > pool.lastRewardBlock) {\r\n            uint256 lpSupply = lpToken.balanceOf(address(MCV2));\r\n\r\n            if (lpSupply > 0) {\r\n                uint256 blocks = block.number.sub(pool.lastRewardBlock);\r\n                uint256 tokenReward = blocks\r\n                .mul(tokenPerBlock)\r\n                .mul(pool.allocPoint)\r\n                .div(MCV1.totalAllocPoint());\r\n                pool.accTokenPerShare = pool.accTokenPerShare.add(\r\n                    (tokenReward.mul(ACC_TOKEN_PRECISION) / lpSupply)\r\n                );\r\n            }\r\n\r\n            pool.lastRewardBlock = block.number;\r\n            poolInfo = pool;\r\n        }\r\n    }\r\n\r\n    /// @notice Sets the distribution reward rate. This will also update the poolInfo.\r\n    /// @param _tokenPerBlock The number of tokens to distribute per block\r\n    function setRewardRate(uint256 _tokenPerBlock) external onlyOwner {\r\n        updatePool();\r\n\r\n        uint256 oldRate = tokenPerBlock;\r\n        tokenPerBlock = _tokenPerBlock;\r\n\r\n        emit RewardRateUpdated(oldRate, _tokenPerBlock);\r\n    }\r\n\r\n    /// @notice Sets the allocation point. THis will also update the poolInfo.\r\n    /// @param _allocPoint The new allocation point of the pool\r\n    function setAllocPoint(uint256 _allocPoint) external onlyOwner {\r\n        updatePool();\r\n\r\n        uint256 oldAllocPoint = poolInfo.allocPoint;\r\n        poolInfo.allocPoint = _allocPoint;\r\n\r\n        emit AllocPointUpdated(oldAllocPoint, _allocPoint);\r\n    }\r\n\r\n    /// @notice Claims reward tokens from MCV1 farm.\r\n    function harvestFromMasterChefV1() public {\r\n        MCV1.deposit(MCV1_pid, 0);\r\n    }\r\n\r\n    /// @notice Function called by MasterChefJoeV2 whenever staker claims JOE harvest. Allows staker to also receive a 2nd reward token.\r\n    /// @param _user Address of user\r\n    /// @param _lpAmount Number of LP tokens the user has\r\n    function onJoeReward(address _user, uint256 _lpAmount)\r\n        external\r\n        override\r\n        onlyMCV2\r\n    {\r\n        updatePool();\r\n        PoolInfo memory pool = poolInfo;\r\n        UserInfo storage user = userInfo[_user];\r\n        uint256 pendingBal;\r\n        // if user had deposited\r\n        if (user.amount > 0) {\r\n            harvestFromMasterChefV1();\r\n            pendingBal = (user.amount.mul(pool.accTokenPerShare) /\r\n                ACC_TOKEN_PRECISION)\r\n            .sub(user.rewardDebt);\r\n            uint256 rewardBal = rewardToken.balanceOf(address(this));\r\n            if (pendingBal > rewardBal) {\r\n                rewardToken.safeTransfer(_user, rewardBal);\r\n            } else {\r\n                rewardToken.safeTransfer(_user, pendingBal);\r\n            }\r\n        }\r\n\r\n        user.amount = _lpAmount;\r\n        user.rewardDebt =\r\n            user.amount.mul(pool.accTokenPerShare) /\r\n            ACC_TOKEN_PRECISION;\r\n\r\n        emit OnReward(_user, pendingBal);\r\n    }\r\n\r\n    /// @notice View function to see pending tokens\r\n    /// @param _user Address of user.\r\n    /// @return pending reward for a given user.\r\n    function pendingTokens(address _user)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256 pending)\r\n    {\r\n        PoolInfo memory pool = poolInfo;\r\n        UserInfo storage user = userInfo[_user];\r\n\r\n        uint256 accTokenPerShare = pool.accTokenPerShare;\r\n        uint256 lpSupply = lpToken.balanceOf(address(MCV2));\r\n\r\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\r\n            uint256 blocks = block.number.sub(pool.lastRewardBlock);\r\n            uint256 tokenReward = blocks\r\n            .mul(tokenPerBlock)\r\n            .mul(pool.allocPoint)\r\n            .div(MCV1.totalAllocPoint());\r\n            accTokenPerShare = accTokenPerShare.add(\r\n                tokenReward.mul(ACC_TOKEN_PRECISION) / lpSupply\r\n            );\r\n        }\r\n\r\n        pending = (user.amount.mul(accTokenPerShare) / ACC_TOKEN_PRECISION).sub(\r\n            user.rewardDebt\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\nimport \"../libraries/SafeERC20.sol\";\r\n\r\ninterface IRewarder {\r\n    using SafeERC20 for IERC20;\r\n\r\n    function onJoeReward(address user, uint256 newLpAmount) external;\r\n\r\n    function pendingTokens(address user)\r\n        external\r\n        view\r\n        returns (uint256 pending);\r\n\r\n    function rewardToken() external view returns (IERC20);\r\n}\r\n"
    },
    "contracts/sushi/MasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./SushiToken.sol\";\r\n\r\n// MasterChef is the master of Sushi. He can make Sushi and he is a fair guy.\r\n//\r\n// Note that it's ownable and the owner wields tremendous power. The ownership\r\n// will be transferred to a governance smart contract once SUSHI is sufficiently\r\n// distributed and the community can show to govern itself.\r\n//\r\n// Have fun reading it. Hopefully it's bug-free. God bless.\r\ncontract MasterChef is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        //\r\n        // We do some fancy math here. Basically, any point in time, the amount of SUSHIs\r\n        // entitled to a user but is pending to be distributed is:\r\n        //\r\n        //   pending reward = (user.amount * pool.accSushiPerShare) - user.rewardDebt\r\n        //\r\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r\n        //   1. The pool's `accSushiPerShare` (and `lastRewardBlock`) gets updated.\r\n        //   2. User receives the pending reward sent to his/her address.\r\n        //   3. User's `amount` gets updated.\r\n        //   4. User's `rewardDebt` gets updated.\r\n    }\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken; // Address of LP token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. SUSHIs to distribute per block.\r\n        uint256 lastRewardBlock; // Last block number that SUSHIs distribution occurs.\r\n        uint256 accSushiPerShare; // Accumulated SUSHIs per share, times 1e12. See below.\r\n    }\r\n    // The SUSHI TOKEN!\r\n    SushiToken public sushi;\r\n    // Dev address.\r\n    address public devaddr;\r\n    // Block number when bonus SUSHI period ends.\r\n    uint256 public bonusEndBlock;\r\n    // SUSHI tokens created per block.\r\n    uint256 public sushiPerBlock;\r\n    // Bonus muliplier for early sushi makers.\r\n    uint256 public constant BONUS_MULTIPLIER = 1;\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n    // The block number when SUSHI mining starts.\r\n    uint256 public startBlock;\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amount\r\n    );\r\n\r\n    constructor(\r\n        SushiToken _sushi,\r\n        address _devaddr,\r\n        uint256 _sushiPerBlock,\r\n        uint256 _startBlock,\r\n        uint256 _bonusEndBlock\r\n    ) public {\r\n        sushi = _sushi;\r\n        devaddr = _devaddr;\r\n        sushiPerBlock = _sushiPerBlock;\r\n        bonusEndBlock = _bonusEndBlock;\r\n        startBlock = _startBlock;\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n    function add(\r\n        uint256 _allocPoint,\r\n        IERC20 _lpToken,\r\n        bool _withUpdate\r\n    ) public onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 lastRewardBlock = block.number > startBlock\r\n            ? block.number\r\n            : startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                lpToken: _lpToken,\r\n                allocPoint: _allocPoint,\r\n                lastRewardBlock: lastRewardBlock,\r\n                accSushiPerShare: 0\r\n            })\r\n        );\r\n    }\r\n\r\n    // Update the given pool's SUSHI allocation point. Can only be called by the owner.\r\n    function set(\r\n        uint256 _pid,\r\n        uint256 _allocPoint,\r\n        bool _withUpdate\r\n    ) public onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\r\n            _allocPoint\r\n        );\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n    }\r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_to <= bonusEndBlock) {\r\n            return _to.sub(_from).mul(BONUS_MULTIPLIER);\r\n        } else if (_from >= bonusEndBlock) {\r\n            return _to.sub(_from);\r\n        } else {\r\n            return\r\n                bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(\r\n                    _to.sub(bonusEndBlock)\r\n                );\r\n        }\r\n    }\r\n\r\n    // View function to see pending SUSHIs on frontend.\r\n    function pendingSushi(uint256 _pid, address _user)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accSushiPerShare = pool.accSushiPerShare;\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\r\n            uint256 multiplier = getMultiplier(\r\n                pool.lastRewardBlock,\r\n                block.number\r\n            );\r\n            uint256 sushiReward = multiplier\r\n            .mul(sushiPerBlock)\r\n            .mul(pool.allocPoint)\r\n            .div(totalAllocPoint);\r\n            accSushiPerShare = accSushiPerShare.add(\r\n                sushiReward.mul(1e12).div(lpSupply)\r\n            );\r\n        }\r\n        return user.amount.mul(accSushiPerShare).div(1e12).sub(user.rewardDebt);\r\n    }\r\n\r\n    // Update reward vairables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n        if (lpSupply == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n        uint256 sushiReward = multiplier\r\n        .mul(sushiPerBlock)\r\n        .mul(pool.allocPoint)\r\n        .div(totalAllocPoint);\r\n        sushi.mint(devaddr, sushiReward.div(10));\r\n        sushi.mint(address(this), sushiReward);\r\n        pool.accSushiPerShare = pool.accSushiPerShare.add(\r\n            sushiReward.mul(1e12).div(lpSupply)\r\n        );\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n    // Deposit LP tokens to MasterChef for SUSHI allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        updatePool(_pid);\r\n        if (user.amount > 0) {\r\n            uint256 pending = user\r\n            .amount\r\n            .mul(pool.accSushiPerShare)\r\n            .div(1e12)\r\n            .sub(user.rewardDebt);\r\n            safeSushiTransfer(msg.sender, pending);\r\n        }\r\n        pool.lpToken.safeTransferFrom(\r\n            address(msg.sender),\r\n            address(this),\r\n            _amount\r\n        );\r\n        user.amount = user.amount.add(_amount);\r\n        user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12);\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw LP tokens from MasterChef.\r\n    function withdraw(uint256 _pid, uint256 _amount) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount >= _amount, \"withdraw: not good\");\r\n        updatePool(_pid);\r\n        uint256 pending = user.amount.mul(pool.accSushiPerShare).div(1e12).sub(\r\n            user.rewardDebt\r\n        );\r\n        safeSushiTransfer(msg.sender, pending);\r\n        user.amount = user.amount.sub(_amount);\r\n        user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12);\r\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\r\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n    }\r\n\r\n    // Safe sushi transfer function, just in case if rounding error causes pool to not have enough SUSHIs.\r\n    function safeSushiTransfer(address _to, uint256 _amount) internal {\r\n        uint256 sushiBal = sushi.balanceOf(address(this));\r\n        if (_amount > sushiBal) {\r\n            sushi.transfer(_to, sushiBal);\r\n        } else {\r\n            sushi.transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    // Update dev address by the previous dev.\r\n    function dev(address _devaddr) public {\r\n        require(msg.sender == devaddr, \"dev: wut?\");\r\n        devaddr = _devaddr;\r\n    }\r\n}\r\n"
    },
    "contracts/MasterChefJoe.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./JoeToken.sol\";\r\n\r\n// MasterChefJoe is a boss. He says \"go f your blocks lego boy, I'm gonna use timestamp instead\".\r\n// And to top it off, it takes no risks. Because the biggest risk is operator error.\r\n// So we make it virtually impossible for the operator of this contract to cause a bug with people's harvests.\r\n//\r\n// Note that it's ownable and the owner wields tremendous power. The ownership\r\n// will be transferred to a governance smart contract once JOE is sufficiently\r\n// distributed and the community can show to govern itself.\r\n//\r\n// With thanks to the Lydia Finance team.\r\n//\r\n// Godspeed and may the 10x be with you.\r\ncontract MasterChefJoe is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        //\r\n        // We do some fancy math here. Basically, any point in time, the amount of JOEs\r\n        // entitled to a user but is pending to be distributed is:\r\n        //\r\n        //   pending reward = (user.amount * pool.accJoePerShare) - user.rewardDebt\r\n        //\r\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r\n        //   1. The pool's `accJoePerShare` (and `lastRewardTimestamp`) gets updated.\r\n        //   2. User receives the pending reward sent to his/her address.\r\n        //   3. User's `amount` gets updated.\r\n        //   4. User's `rewardDebt` gets updated.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken; // Address of LP token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. JOEs to distribute per second.\r\n        uint256 lastRewardTimestamp; // Last timestamp that JOEs distribution occurs.\r\n        uint256 accJoePerShare; // Accumulated JOEs per share, times 1e12. See below.\r\n    }\r\n\r\n    // The JOE TOKEN!\r\n    JoeToken public joe;\r\n    // Dev address.\r\n    address public devaddr;\r\n    // Treasury address.\r\n    address public treasuryaddr;\r\n    // JOE tokens created per second.\r\n    uint256 public joePerSec;\r\n    // Percentage of pool rewards that goto the devs.\r\n    uint256 public devPercent; // 20%\r\n    // Percentage of pool rewards that goes to the treasury.\r\n    uint256 public treasuryPercent; // 20%\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    // Mapping to check which LP tokens have been added as pools.\r\n    mapping(IERC20 => bool) public isPool;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    // Total allocation points. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n    // The timestamp when JOE mining starts.\r\n    uint256 public startTimestamp;\r\n\r\n    event Add(address indexed lpToken, uint256 allocPoint);\r\n    event Set(uint256 indexed pid, uint256 allocPoint);\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amount\r\n    );\r\n    event SetDevAddress(address indexed oldAddress, address indexed newAddress);\r\n    event UpdateEmissionRate(address indexed user, uint256 _joePerSec);\r\n\r\n    constructor(\r\n        JoeToken _joe,\r\n        address _devaddr,\r\n        address _treasuryaddr,\r\n        uint256 _joePerSec,\r\n        uint256 _startTimestamp,\r\n        uint256 _devPercent,\r\n        uint256 _treasuryPercent\r\n    ) public {\r\n        require(\r\n            0 <= _devPercent && _devPercent <= 1000,\r\n            \"constructor: invalid dev percent value\"\r\n        );\r\n        require(\r\n            0 <= _treasuryPercent && _treasuryPercent <= 1000,\r\n            \"constructor: invalid treasury percent value\"\r\n        );\r\n        require(\r\n            _devPercent + _treasuryPercent <= 1000,\r\n            \"constructor: total percent over max\"\r\n        );\r\n        joe = _joe;\r\n        devaddr = _devaddr;\r\n        treasuryaddr = _treasuryaddr;\r\n        joePerSec = _joePerSec;\r\n        startTimestamp = _startTimestamp;\r\n        devPercent = _devPercent;\r\n        treasuryPercent = _treasuryPercent;\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n    function add(uint256 _allocPoint, IERC20 _lpToken) public onlyOwner {\r\n        require(!isPool[_lpToken], \"add: LP already added\");\r\n        massUpdatePools();\r\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp\r\n            ? block.timestamp\r\n            : startTimestamp;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                lpToken: _lpToken,\r\n                allocPoint: _allocPoint,\r\n                lastRewardTimestamp: lastRewardTimestamp,\r\n                accJoePerShare: 0\r\n            })\r\n        );\r\n        isPool[_lpToken] = true;\r\n        emit Add(address(_lpToken), _allocPoint);\r\n    }\r\n\r\n    // Update the given pool's JOE allocation point. Can only be called by the owner.\r\n    function set(uint256 _pid, uint256 _allocPoint) public onlyOwner {\r\n        massUpdatePools();\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\r\n            _allocPoint\r\n        );\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n        emit Set(_pid, _allocPoint);\r\n    }\r\n\r\n    // View function to see pending JOEs on frontend.\r\n    function pendingJoe(uint256 _pid, address _user)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accJoePerShare = pool.accJoePerShare;\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\r\n            uint256 multiplier = block.timestamp.sub(pool.lastRewardTimestamp);\r\n            uint256 joeReward = multiplier\r\n            .mul(joePerSec)\r\n            .mul(pool.allocPoint)\r\n            .div(totalAllocPoint)\r\n            .mul(1000 - devPercent - treasuryPercent)\r\n            .div(1000);\r\n            accJoePerShare = accJoePerShare.add(\r\n                joeReward.mul(1e12).div(lpSupply)\r\n            );\r\n        }\r\n        return user.amount.mul(accJoePerShare).div(1e12).sub(user.rewardDebt);\r\n    }\r\n\r\n    // Update reward variables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.timestamp <= pool.lastRewardTimestamp) {\r\n            return;\r\n        }\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n        if (lpSupply == 0) {\r\n            pool.lastRewardTimestamp = block.timestamp;\r\n            return;\r\n        }\r\n        uint256 multiplier = block.timestamp.sub(pool.lastRewardTimestamp);\r\n        uint256 joeReward = multiplier.mul(joePerSec).mul(pool.allocPoint).div(\r\n            totalAllocPoint\r\n        );\r\n        uint256 lpPercent = 1000 - devPercent - treasuryPercent;\r\n        joe.mint(devaddr, joeReward.mul(devPercent).div(1000));\r\n        joe.mint(treasuryaddr, joeReward.mul(treasuryPercent).div(1000));\r\n        joe.mint(address(this), joeReward.mul(lpPercent).div(1000));\r\n        pool.accJoePerShare = pool.accJoePerShare.add(\r\n            joeReward.mul(1e12).div(lpSupply).mul(lpPercent).div(1000)\r\n        );\r\n        pool.lastRewardTimestamp = block.timestamp;\r\n    }\r\n\r\n    // Deposit LP tokens to MasterChef for JOE allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        updatePool(_pid);\r\n        if (user.amount > 0) {\r\n            uint256 pending = user\r\n            .amount\r\n            .mul(pool.accJoePerShare)\r\n            .div(1e12)\r\n            .sub(user.rewardDebt);\r\n            safeJoeTransfer(msg.sender, pending);\r\n        }\r\n        pool.lpToken.safeTransferFrom(\r\n            address(msg.sender),\r\n            address(this),\r\n            _amount\r\n        );\r\n        user.amount = user.amount.add(_amount);\r\n        user.rewardDebt = user.amount.mul(pool.accJoePerShare).div(1e12);\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw LP tokens from MasterChef.\r\n    function withdraw(uint256 _pid, uint256 _amount) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount >= _amount, \"withdraw: not good\");\r\n\r\n        updatePool(_pid);\r\n        uint256 pending = user.amount.mul(pool.accJoePerShare).div(1e12).sub(\r\n            user.rewardDebt\r\n        );\r\n        safeJoeTransfer(msg.sender, pending);\r\n        user.amount = user.amount.sub(_amount);\r\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n        user.rewardDebt = user.amount.mul(pool.accJoePerShare).div(1e12);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\r\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n    }\r\n\r\n    // Safe joe transfer function, just in case if rounding error causes pool to not have enough JOEs.\r\n    function safeJoeTransfer(address _to, uint256 _amount) internal {\r\n        uint256 joeBal = joe.balanceOf(address(this));\r\n        if (_amount > joeBal) {\r\n            joe.transfer(_to, joeBal);\r\n        } else {\r\n            joe.transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    // Update dev address by the previous dev.\r\n    function dev(address _devaddr) public {\r\n        require(msg.sender == devaddr, \"dev: wut?\");\r\n        devaddr = _devaddr;\r\n        emit SetDevAddress(msg.sender, _devaddr);\r\n    }\r\n\r\n    function setDevPercent(uint256 _newDevPercent) public onlyOwner {\r\n        require(\r\n            0 <= _newDevPercent && _newDevPercent <= 1000,\r\n            \"setDevPercent: invalid percent value\"\r\n        );\r\n        require(\r\n            treasuryPercent + _newDevPercent <= 1000,\r\n            \"setDevPercent: total percent over max\"\r\n        );\r\n        devPercent = _newDevPercent;\r\n    }\r\n\r\n    function setTreasuryPercent(uint256 _newTreasuryPercent) public onlyOwner {\r\n        require(\r\n            0 <= _newTreasuryPercent && _newTreasuryPercent <= 1000,\r\n            \"setTreasuryPercent: invalid percent value\"\r\n        );\r\n        require(\r\n            devPercent + _newTreasuryPercent <= 1000,\r\n            \"setTreasuryPercent: total percent over max\"\r\n        );\r\n        treasuryPercent = _newTreasuryPercent;\r\n    }\r\n\r\n    // Pancake has to add hidden dummy pools inorder to alter the emission,\r\n    // here we make it simple and transparent to all.\r\n    function updateEmissionRate(uint256 _joePerSec) public onlyOwner {\r\n        massUpdatePools();\r\n        joePerSec = _joePerSec;\r\n        emit UpdateEmissionRate(msg.sender, _joePerSec);\r\n    }\r\n}\r\n"
    },
    "contracts/Cliff.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/math/Math.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n/**\r\n * @title Cliff\r\n * @dev A token holder contract that can release its token balance with a cliff period.\r\n * Optionally revocable by the owner.\r\n */\r\ncontract Cliff {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant SECONDS_PER_MONTH = 30 days;\r\n\r\n    event Released(uint256 amount);\r\n\r\n    // beneficiary of tokens after they are released\r\n    address public immutable beneficiary;\r\n    IERC20 public immutable token;\r\n\r\n    uint256 public immutable cliffInMonths;\r\n    uint256 public immutable startTimestamp;\r\n    uint256 public released;\r\n\r\n    /**\r\n     * @dev Creates a cliff contract that locks its balance of any ERC20 token and\r\n     * only allows release to the beneficiary once the cliff has passed.\r\n     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\r\n     * @param _cliffInMonths duration in months of the cliff in which tokens will begin to vest\r\n     */\r\n    constructor(\r\n        address _token,\r\n        address _beneficiary,\r\n        uint256 _startTimestamp,\r\n        uint256 _cliffInMonths\r\n    ) public {\r\n        require(\r\n            _beneficiary != address(0),\r\n            \"Cliff: Beneficiary cannot be empty\"\r\n        );\r\n\r\n        token = IERC20(_token);\r\n        beneficiary = _beneficiary;\r\n        cliffInMonths = _cliffInMonths;\r\n        startTimestamp = _startTimestamp == 0\r\n            ? blockTimestamp()\r\n            : _startTimestamp;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers vested tokens to beneficiary.\r\n     */\r\n    function release() external {\r\n        uint256 vested = vestedAmount();\r\n        require(vested > 0, \"Cliff: No tokens to release\");\r\n\r\n        released = released.add(vested);\r\n        token.safeTransfer(beneficiary, vested);\r\n\r\n        emit Released(vested);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n     */\r\n    function vestedAmount() public view returns (uint256) {\r\n        if (blockTimestamp() < startTimestamp) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 elapsedTime = blockTimestamp().sub(startTimestamp);\r\n        uint256 elapsedMonths = elapsedTime.div(SECONDS_PER_MONTH);\r\n\r\n        if (elapsedMonths < cliffInMonths) {\r\n            return 0;\r\n        } else {\r\n            return token.balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function blockTimestamp() public view virtual returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
    },
    "contracts/JoeBar.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n// JoeBar is the coolest bar in town. You come in with some Joe, and leave with more! The longer you stay, the more Joe you get.\r\n//\r\n// This contract handles swapping to and from xJoe, JoeSwap's staking token.\r\ncontract JoeBar is ERC20(\"JoeBar\", \"xJOE\") {\r\n    using SafeMath for uint256;\r\n    IERC20 public joe;\r\n\r\n    // Define the Joe token contract\r\n    constructor(IERC20 _joe) public {\r\n        joe = _joe;\r\n    }\r\n\r\n    // Enter the bar. Pay some JOEs. Earn some shares.\r\n    // Locks Joe and mints xJoe\r\n    function enter(uint256 _amount) public {\r\n        // Gets the amount of Joe locked in the contract\r\n        uint256 totalJoe = joe.balanceOf(address(this));\r\n        // Gets the amount of xJoe in existence\r\n        uint256 totalShares = totalSupply();\r\n        // If no xJoe exists, mint it 1:1 to the amount put in\r\n        if (totalShares == 0 || totalJoe == 0) {\r\n            _mint(msg.sender, _amount);\r\n        }\r\n        // Calculate and mint the amount of xJoe the Joe is worth. The ratio will change overtime, as xJoe is burned/minted and Joe deposited + gained from fees / withdrawn.\r\n        else {\r\n            uint256 what = _amount.mul(totalShares).div(totalJoe);\r\n            _mint(msg.sender, what);\r\n        }\r\n        // Lock the Joe in the contract\r\n        joe.transferFrom(msg.sender, address(this), _amount);\r\n    }\r\n\r\n    // Leave the bar. Claim back your JOEs.\r\n    // Unlocks the staked + gained Joe and burns xJoe\r\n    function leave(uint256 _share) public {\r\n        // Gets the amount of xJoe in existence\r\n        uint256 totalShares = totalSupply();\r\n        // Calculates the amount of Joe the xJoe is worth\r\n        uint256 what = _share.mul(joe.balanceOf(address(this))).div(\r\n            totalShares\r\n        );\r\n        _burn(msg.sender, _share);\r\n        joe.transfer(msg.sender, what);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IKashiPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./IBentoBox.sol\";\r\nimport \"./IOracle.sol\";\r\n\r\nstruct Rebase {\r\n    uint128 elastic;\r\n    uint128 base;\r\n}\r\n\r\nstruct AccrueInfo {\r\n    uint64 interestPerSecond;\r\n    uint64 lastAccrued;\r\n    uint128 feesEarnedFraction;\r\n}\r\n\r\ninterface IKashiPair {\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function accrue() external;\r\n\r\n    function accrueInfo() external view returns (AccrueInfo memory info);\r\n\r\n    function addAsset(\r\n        address to,\r\n        bool skim,\r\n        uint256 share\r\n    ) external returns (uint256 fraction);\r\n\r\n    function addCollateral(\r\n        address to,\r\n        bool skim,\r\n        uint256 share\r\n    ) external;\r\n\r\n    function allowance(address, address) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function asset() external view returns (IERC20);\r\n\r\n    function balanceOf(address) external view returns (uint256);\r\n\r\n    function bentoBox() external view returns (IBentoBox);\r\n\r\n    function borrow(address to, uint256 amount)\r\n        external\r\n        returns (uint256 part, uint256 share);\r\n\r\n    function claimOwnership() external;\r\n\r\n    function collateral() external view returns (IERC20);\r\n\r\n    function cook(\r\n        uint8[] calldata actions,\r\n        uint256[] calldata values,\r\n        bytes[] calldata datas\r\n    ) external payable returns (uint256 value1, uint256 value2);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function exchangeRate() external view returns (uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function getInitData(\r\n        IERC20 collateral_,\r\n        IERC20 asset_,\r\n        address oracle_,\r\n        bytes calldata oracleData_\r\n    ) external pure returns (bytes memory data);\r\n\r\n    function init(bytes calldata data) external payable;\r\n\r\n    function isSolvent(address user, bool open) external view returns (bool);\r\n\r\n    function liquidate(\r\n        address[] calldata users,\r\n        uint256[] calldata borrowParts,\r\n        address to,\r\n        address swapper,\r\n        bool open\r\n    ) external;\r\n\r\n    function masterContract() external view returns (address);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function nonces(address) external view returns (uint256);\r\n\r\n    function oracle() external view returns (IOracle);\r\n\r\n    function oracleData() external view returns (bytes memory);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function pendingOwner() external view returns (address);\r\n\r\n    function permit(\r\n        address owner_,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function removeAsset(address to, uint256 fraction)\r\n        external\r\n        returns (uint256 share);\r\n\r\n    function removeCollateral(address to, uint256 share) external;\r\n\r\n    function repay(\r\n        address to,\r\n        bool skim,\r\n        uint256 part\r\n    ) external returns (uint256 amount);\r\n\r\n    function setFeeTo(address newFeeTo) external;\r\n\r\n    function setSwapper(address swapper, bool enable) external;\r\n\r\n    function swappers(address) external view returns (bool);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function totalAsset() external view returns (Rebase memory total);\r\n\r\n    function totalBorrow() external view returns (Rebase memory total);\r\n\r\n    function totalCollateralShare() external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function transferOwnership(\r\n        address newOwner,\r\n        bool direct,\r\n        bool renounce\r\n    ) external;\r\n\r\n    function updateExchangeRate() external returns (bool updated, uint256 rate);\r\n\r\n    function userBorrowPart(address) external view returns (uint256);\r\n\r\n    function userCollateralShare(address) external view returns (uint256);\r\n\r\n    function withdrawFees() external;\r\n}\r\n"
    },
    "contracts/interfaces/IBentoBox.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./IStrategy.sol\";\r\n\r\ninterface IBentoBox {\r\n    event LogDeploy(\r\n        address indexed masterContract,\r\n        bytes data,\r\n        address indexed cloneAddress\r\n    );\r\n    event LogDeposit(\r\n        address indexed token,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        uint256 share\r\n    );\r\n    event LogFlashLoan(\r\n        address indexed borrower,\r\n        address indexed token,\r\n        uint256 amount,\r\n        uint256 feeAmount,\r\n        address indexed receiver\r\n    );\r\n    event LogRegisterProtocol(address indexed protocol);\r\n    event LogSetMasterContractApproval(\r\n        address indexed masterContract,\r\n        address indexed user,\r\n        bool approved\r\n    );\r\n    event LogStrategyDivest(address indexed token, uint256 amount);\r\n    event LogStrategyInvest(address indexed token, uint256 amount);\r\n    event LogStrategyLoss(address indexed token, uint256 amount);\r\n    event LogStrategyProfit(address indexed token, uint256 amount);\r\n    event LogStrategyQueued(address indexed token, address indexed strategy);\r\n    event LogStrategySet(address indexed token, address indexed strategy);\r\n    event LogStrategyTargetPercentage(\r\n        address indexed token,\r\n        uint256 targetPercentage\r\n    );\r\n    event LogTransfer(\r\n        address indexed token,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 share\r\n    );\r\n    event LogWhiteListMasterContract(\r\n        address indexed masterContract,\r\n        bool approved\r\n    );\r\n    event LogWithdraw(\r\n        address indexed token,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        uint256 share\r\n    );\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    function balanceOf(IERC20, address) external view returns (uint256);\r\n\r\n    function batch(bytes[] calldata calls, bool revertOnFail)\r\n        external\r\n        payable\r\n        returns (bool[] memory successes, bytes[] memory results);\r\n\r\n    function claimOwnership() external;\r\n\r\n    function deploy(\r\n        address masterContract,\r\n        bytes calldata data,\r\n        bool useCreate2\r\n    ) external payable;\r\n\r\n    function deposit(\r\n        IERC20 token_,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 share\r\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\r\n\r\n    function harvest(\r\n        IERC20 token,\r\n        bool balance,\r\n        uint256 maxChangeAmount\r\n    ) external;\r\n\r\n    function masterContractApproved(address, address)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function masterContractOf(address) external view returns (address);\r\n\r\n    function nonces(address) external view returns (uint256);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function pendingOwner() external view returns (address);\r\n\r\n    function pendingStrategy(IERC20) external view returns (IStrategy);\r\n\r\n    function permitToken(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function registerProtocol() external;\r\n\r\n    function setMasterContractApproval(\r\n        address user,\r\n        address masterContract,\r\n        bool approved,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function setStrategy(IERC20 token, IStrategy newStrategy) external;\r\n\r\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_)\r\n        external;\r\n\r\n    function strategy(IERC20) external view returns (IStrategy);\r\n\r\n    function strategyData(IERC20)\r\n        external\r\n        view\r\n        returns (\r\n            uint64 strategyStartDate,\r\n            uint64 targetPercentage,\r\n            uint128 balance\r\n        );\r\n\r\n    function toAmount(\r\n        IERC20 token,\r\n        uint256 share,\r\n        bool roundUp\r\n    ) external view returns (uint256 amount);\r\n\r\n    function toShare(\r\n        IERC20 token,\r\n        uint256 amount,\r\n        bool roundUp\r\n    ) external view returns (uint256 share);\r\n\r\n    function totals(IERC20)\r\n        external\r\n        view\r\n        returns (uint128 elastic, uint128 base);\r\n\r\n    function transfer(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 share\r\n    ) external;\r\n\r\n    function transferMultiple(\r\n        IERC20 token,\r\n        address from,\r\n        address[] calldata tos,\r\n        uint256[] calldata shares\r\n    ) external;\r\n\r\n    function transferOwnership(\r\n        address newOwner,\r\n        bool direct,\r\n        bool renounce\r\n    ) external;\r\n\r\n    function whitelistMasterContract(address masterContract, bool approved)\r\n        external;\r\n\r\n    function whitelistedMasterContracts(address) external view returns (bool);\r\n\r\n    function withdraw(\r\n        IERC20 token_,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 share\r\n    ) external returns (uint256 amountOut, uint256 shareOut);\r\n}\r\n"
    },
    "contracts/interfaces/IOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IOracle {\r\n    function get(bytes calldata data)\r\n        external\r\n        returns (bool success, uint256 rate);\r\n\r\n    function peek(bytes calldata data)\r\n        external\r\n        view\r\n        returns (bool success, uint256 rate);\r\n\r\n    function peekSpot(bytes calldata data) external view returns (uint256 rate);\r\n\r\n    function symbol(bytes calldata data) external view returns (string memory);\r\n\r\n    function name(bytes calldata data) external view returns (string memory);\r\n}\r\n"
    },
    "contracts/interfaces/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IStrategy {\r\n    function skim(uint256 amount) external;\r\n\r\n    function harvest(uint256 balance, address sender)\r\n        external\r\n        returns (int256 amountAdded);\r\n\r\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\r\n\r\n    function exit(uint256 balance) external returns (int256 amountAdded);\r\n}\r\n"
    },
    "contracts/interfaces/IMasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\nimport \"../libraries/BoringERC20.sol\";\r\n\r\ninterface IMasterChef {\r\n    using BoringERC20 for IERC20;\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n    }\r\n\r\n    struct PoolInfo {\r\n        IERC20 lpToken; // Address of LP token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. JOE to distribute per block.\r\n        uint256 lastRewardTimestamp; // Last block number that JOE distribution occurs.\r\n        uint256 accJoePerShare; // Accumulated JOE per share, times 1e12. See below.\r\n    }\r\n\r\n    function poolInfo(uint256 pid)\r\n        external\r\n        view\r\n        returns (IMasterChef.PoolInfo memory);\r\n\r\n    function totalAllocPoint() external view returns (uint256);\r\n\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n}\r\n"
    },
    "contracts/JoeHatToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.6.2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\";\r\n\r\ncontract JoeHatToken is ERC20Burnable {\r\n    /**\r\n     * @dev Mints `initialSupply` amount of token and transfers them to `owner`.\r\n     *\r\n     * See {ERC20-constructor}.\r\n     */\r\n    constructor(address owner) public ERC20(\"Joe Hat Token\", \"HAT\") {\r\n        uint256 initialSupply = 150e18;\r\n        _mint(owner, initialSupply);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\n\n        _approve(account, _msgSender(), decreasedAllowance);\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/timelock/Timelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n// COPIED FROM https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/GovernorAlpha.sol\r\n// Copyright 2020 Compound Labs, Inc.\r\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\r\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\r\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\r\n// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n// Ctrl+f for XXX to see all the modifications.\r\n\r\n// XXX: pragma solidity ^0.5.16;\r\npragma solidity 0.6.12;\r\n\r\n// XXX: import \"./SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\ncontract Timelock {\r\n    using SafeMath for uint256;\r\n\r\n    event NewAdmin(address indexed newAdmin);\r\n    event NewPendingAdmin(address indexed newPendingAdmin);\r\n    event NewDelay(uint256 indexed newDelay);\r\n    event CancelTransaction(\r\n        bytes32 indexed txHash,\r\n        address indexed target,\r\n        uint256 value,\r\n        string signature,\r\n        bytes data,\r\n        uint256 eta\r\n    );\r\n    event ExecuteTransaction(\r\n        bytes32 indexed txHash,\r\n        address indexed target,\r\n        uint256 value,\r\n        string signature,\r\n        bytes data,\r\n        uint256 eta\r\n    );\r\n    event QueueTransaction(\r\n        bytes32 indexed txHash,\r\n        address indexed target,\r\n        uint256 value,\r\n        string signature,\r\n        bytes data,\r\n        uint256 eta\r\n    );\r\n\r\n    uint256 public constant GRACE_PERIOD = 14 days;\r\n    uint256 public constant MINIMUM_DELAY = 2 days;\r\n    uint256 public constant MAXIMUM_DELAY = 30 days;\r\n\r\n    address public admin;\r\n    address public pendingAdmin;\r\n    uint256 public delay;\r\n    bool public admin_initialized;\r\n\r\n    mapping(bytes32 => bool) public queuedTransactions;\r\n\r\n    constructor(address admin_, uint256 delay_) public {\r\n        require(\r\n            delay_ >= MINIMUM_DELAY,\r\n            \"Timelock::constructor: Delay must exceed minimum delay.\"\r\n        );\r\n        require(\r\n            delay_ <= MAXIMUM_DELAY,\r\n            \"Timelock::constructor: Delay must not exceed maximum delay.\"\r\n        );\r\n\r\n        admin = admin_;\r\n        delay = delay_;\r\n        admin_initialized = false;\r\n    }\r\n\r\n    // XXX: function() external payable { }\r\n    receive() external payable {}\r\n\r\n    function setDelay(uint256 delay_) public {\r\n        require(\r\n            msg.sender == address(this),\r\n            \"Timelock::setDelay: Call must come from Timelock.\"\r\n        );\r\n        require(\r\n            delay_ >= MINIMUM_DELAY,\r\n            \"Timelock::setDelay: Delay must exceed minimum delay.\"\r\n        );\r\n        require(\r\n            delay_ <= MAXIMUM_DELAY,\r\n            \"Timelock::setDelay: Delay must not exceed maximum delay.\"\r\n        );\r\n        delay = delay_;\r\n\r\n        emit NewDelay(delay);\r\n    }\r\n\r\n    function acceptAdmin() public {\r\n        require(\r\n            msg.sender == pendingAdmin,\r\n            \"Timelock::acceptAdmin: Call must come from pendingAdmin.\"\r\n        );\r\n        admin = msg.sender;\r\n        pendingAdmin = address(0);\r\n\r\n        emit NewAdmin(admin);\r\n    }\r\n\r\n    function setPendingAdmin(address pendingAdmin_) public {\r\n        // allows one time setting of admin for deployment purposes\r\n        if (admin_initialized) {\r\n            require(\r\n                msg.sender == address(this),\r\n                \"Timelock::setPendingAdmin: Call must come from Timelock.\"\r\n            );\r\n        } else {\r\n            require(\r\n                msg.sender == admin,\r\n                \"Timelock::setPendingAdmin: First call must come from admin.\"\r\n            );\r\n            admin_initialized = true;\r\n        }\r\n        pendingAdmin = pendingAdmin_;\r\n\r\n        emit NewPendingAdmin(pendingAdmin);\r\n    }\r\n\r\n    function queueTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string memory signature,\r\n        bytes memory data,\r\n        uint256 eta\r\n    ) public returns (bytes32) {\r\n        require(\r\n            msg.sender == admin,\r\n            \"Timelock::queueTransaction: Call must come from admin.\"\r\n        );\r\n        require(\r\n            eta >= getBlockTimestamp().add(delay),\r\n            \"Timelock::queueTransaction: Estimated execution block must satisfy delay.\"\r\n        );\r\n\r\n        bytes32 txHash = keccak256(\r\n            abi.encode(target, value, signature, data, eta)\r\n        );\r\n        queuedTransactions[txHash] = true;\r\n\r\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\r\n        return txHash;\r\n    }\r\n\r\n    function cancelTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string memory signature,\r\n        bytes memory data,\r\n        uint256 eta\r\n    ) public {\r\n        require(\r\n            msg.sender == admin,\r\n            \"Timelock::cancelTransaction: Call must come from admin.\"\r\n        );\r\n\r\n        bytes32 txHash = keccak256(\r\n            abi.encode(target, value, signature, data, eta)\r\n        );\r\n        queuedTransactions[txHash] = false;\r\n\r\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\r\n    }\r\n\r\n    function executeTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string memory signature,\r\n        bytes memory data,\r\n        uint256 eta\r\n    ) public payable returns (bytes memory) {\r\n        require(\r\n            msg.sender == admin,\r\n            \"Timelock::executeTransaction: Call must come from admin.\"\r\n        );\r\n\r\n        bytes32 txHash = keccak256(\r\n            abi.encode(target, value, signature, data, eta)\r\n        );\r\n        require(\r\n            queuedTransactions[txHash],\r\n            \"Timelock::executeTransaction: Transaction hasn't been queued.\"\r\n        );\r\n        require(\r\n            getBlockTimestamp() >= eta,\r\n            \"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\"\r\n        );\r\n        require(\r\n            getBlockTimestamp() <= eta.add(GRACE_PERIOD),\r\n            \"Timelock::executeTransaction: Transaction is stale.\"\r\n        );\r\n\r\n        queuedTransactions[txHash] = false;\r\n\r\n        bytes memory callData;\r\n\r\n        if (bytes(signature).length == 0) {\r\n            callData = data;\r\n        } else {\r\n            callData = abi.encodePacked(\r\n                bytes4(keccak256(bytes(signature))),\r\n                data\r\n            );\r\n        }\r\n\r\n        // solium-disable-next-line security/no-call-value\r\n        (bool success, bytes memory returnData) = target.call.value(value)(\r\n            callData\r\n        );\r\n        require(\r\n            success,\r\n            \"Timelock::executeTransaction: Transaction execution reverted.\"\r\n        );\r\n\r\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\r\n\r\n        return returnData;\r\n    }\r\n\r\n    function getBlockTimestamp() internal view returns (uint256) {\r\n        // solium-disable-next-line security/no-block-members\r\n        return block.timestamp;\r\n    }\r\n}\r\n"
    },
    "contracts/timelock/CustomMasterChefJoeV2Timelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n// COPIED FROM https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/GovernorAlpha.sol\r\n// Copyright 2020 Compound Labs, Inc.\r\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\r\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\r\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\r\n// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n// Ctrl+f for XXX to see all the modifications.\r\n\r\n// XXX: pragma solidity ^0.5.16;\r\npragma solidity 0.6.12;\r\n\r\n// XXX: import \"./SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\ncontract CustomMasterChefJoeV2Timelock {\r\n    using SafeMath for uint256;\r\n\r\n    event NewAdmin(address indexed newAdmin);\r\n    event NewPendingAdmin(address indexed newPendingAdmin);\r\n    event NewDelay(uint256 indexed newDelay);\r\n    event CancelTransaction(\r\n        bytes32 indexed txHash,\r\n        address indexed target,\r\n        uint256 value,\r\n        string signature,\r\n        bytes data,\r\n        uint256 eta\r\n    );\r\n    event ExecuteTransaction(\r\n        bytes32 indexed txHash,\r\n        address indexed target,\r\n        uint256 value,\r\n        string signature,\r\n        bytes data,\r\n        uint256 eta\r\n    );\r\n    event QueueTransaction(\r\n        bytes32 indexed txHash,\r\n        address indexed target,\r\n        uint256 value,\r\n        string signature,\r\n        bytes data,\r\n        uint256 eta\r\n    );\r\n\r\n    uint256 public constant GRACE_PERIOD = 14 days;\r\n    uint256 public constant MINIMUM_DELAY = 1 days;\r\n    uint256 public constant MAXIMUM_DELAY = 30 days;\r\n\r\n    string private constant SET_DEV_PERCENT_SIG = \"setDevPercent(uint256)\";\r\n    string private constant SET_TREASURY_PERCENT_SIG =\r\n        \"setTreasuryPercent(uint256)\";\r\n    string private constant SET_INVESTOR_PERCENT_SIG =\r\n        \"setInvestorPercent(uint256)\";\r\n    string private constant UPDATE_EMISSION_RATE_SIG =\r\n        \"updateEmissionRate(uint256)\";\r\n\r\n    address public admin;\r\n    address public pendingAdmin;\r\n    uint256 public delay;\r\n    uint256 public devPercentLimit;\r\n    uint256 public investorPercentLimit;\r\n    uint256 public treasuryPercentLimit;\r\n    uint256 public joePerSecLimit;\r\n    bool public admin_initialized;\r\n\r\n    mapping(bytes32 => bool) public queuedTransactions;\r\n\r\n    modifier withinLimits(string memory signature, bytes memory data) {\r\n        if (\r\n            keccak256(bytes(signature)) == keccak256(bytes(SET_DEV_PERCENT_SIG))\r\n        ) {\r\n            uint256 devPercent = abi.decode(data, (uint256));\r\n            require(\r\n                devPercent <= devPercentLimit,\r\n                \"CustomMasterChefJoeV2Timelock::withinLimits: devPercent must not exceed limit.\"\r\n            );\r\n        } else if (\r\n            keccak256(bytes(signature)) ==\r\n            keccak256(bytes(SET_TREASURY_PERCENT_SIG))\r\n        ) {\r\n            uint256 treasuryPercent = abi.decode(data, (uint256));\r\n            require(\r\n                treasuryPercent <= treasuryPercentLimit,\r\n                \"CustomMasterChefJoeV2Timelock::withinLimits: treasuryPercent must not exceed limit.\"\r\n            );\r\n        } else if (\r\n            keccak256(bytes(signature)) ==\r\n            keccak256(bytes(SET_INVESTOR_PERCENT_SIG))\r\n        ) {\r\n            uint256 investorPercent = abi.decode(data, (uint256));\r\n            require(\r\n                investorPercent <= investorPercentLimit,\r\n                \"CustomMasterChefJoeV2Timelock::withinLimits: investorPercent must not exceed limit.\"\r\n            );\r\n        } else if (\r\n            keccak256(bytes(signature)) ==\r\n            keccak256(bytes(UPDATE_EMISSION_RATE_SIG))\r\n        ) {\r\n            uint256 joePerSec = abi.decode(data, (uint256));\r\n            require(\r\n                joePerSec <= joePerSecLimit,\r\n                \"CustomMasterChefJoeV2Timelock::withinLimits: joePerSec must not exceed limit.\"\r\n            );\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address admin_,\r\n        uint256 delay_,\r\n        uint256 devPercentLimit_,\r\n        uint256 treasuryPercentLimit_,\r\n        uint256 investorPercentLimit_,\r\n        uint256 joePerSecLimit_\r\n    ) public {\r\n        require(\r\n            delay_ >= MINIMUM_DELAY,\r\n            \"CustomMasterChefJoeV2Timelock::constructor: Delay must exceed minimum delay.\"\r\n        );\r\n        require(\r\n            delay_ <= MAXIMUM_DELAY,\r\n            \"CustomMasterChefJoeV2Timelock::constructor: Delay must not exceed maximum delay.\"\r\n        );\r\n\r\n        admin = admin_;\r\n        delay = delay_;\r\n        admin_initialized = false;\r\n        devPercentLimit = devPercentLimit_;\r\n        treasuryPercentLimit = treasuryPercentLimit_;\r\n        investorPercentLimit = investorPercentLimit_;\r\n        joePerSecLimit = joePerSecLimit_;\r\n    }\r\n\r\n    // XXX: function() external payable { }\r\n    receive() external payable {}\r\n\r\n    function setDelay(uint256 delay_) public {\r\n        require(\r\n            msg.sender == address(this),\r\n            \"CustomMasterChefJoeV2Timelock::setDelay: Call must come from CustomMasterChefJoeV2Timelock.\"\r\n        );\r\n        require(\r\n            delay_ >= MINIMUM_DELAY,\r\n            \"CustomMasterChefJoeV2Timelock::setDelay: Delay must exceed minimum delay.\"\r\n        );\r\n        require(\r\n            delay_ <= MAXIMUM_DELAY,\r\n            \"CustomMasterChefJoeV2Timelock::setDelay: Delay must not exceed maximum delay.\"\r\n        );\r\n        delay = delay_;\r\n\r\n        emit NewDelay(delay);\r\n    }\r\n\r\n    function acceptAdmin() public {\r\n        require(\r\n            msg.sender == pendingAdmin,\r\n            \"CustomMasterChefJoeV2Timelock::acceptAdmin: Call must come from pendingAdmin.\"\r\n        );\r\n        admin = msg.sender;\r\n        pendingAdmin = address(0);\r\n\r\n        emit NewAdmin(admin);\r\n    }\r\n\r\n    function setPendingAdmin(address pendingAdmin_) public {\r\n        // allows one time setting of admin for deployment purposes\r\n        if (admin_initialized) {\r\n            require(\r\n                msg.sender == address(this),\r\n                \"CustomMasterChefJoeV2Timelock::setPendingAdmin: Call must come from CustomMasterChefJoeV2Timelock.\"\r\n            );\r\n        } else {\r\n            require(\r\n                msg.sender == admin,\r\n                \"CustomMasterChefJoeV2Timelock::setPendingAdmin: First call must come from admin.\"\r\n            );\r\n            admin_initialized = true;\r\n        }\r\n        pendingAdmin = pendingAdmin_;\r\n\r\n        emit NewPendingAdmin(pendingAdmin);\r\n    }\r\n\r\n    function queueTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string memory signature,\r\n        bytes memory data,\r\n        uint256 eta\r\n    ) public withinLimits(signature, data) returns (bytes32) {\r\n        require(\r\n            msg.sender == admin,\r\n            \"CustomMasterChefJoeV2Timelock::queueTransaction: Call must come from admin.\"\r\n        );\r\n        require(\r\n            eta >= getBlockTimestamp().add(delay),\r\n            \"CustomMasterChefJoeV2Timelock::queueTransaction: Estimated execution block must satisfy delay.\"\r\n        );\r\n\r\n        bytes32 txHash = keccak256(\r\n            abi.encode(target, value, signature, data, eta)\r\n        );\r\n        queuedTransactions[txHash] = true;\r\n\r\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\r\n        return txHash;\r\n    }\r\n\r\n    function cancelTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string memory signature,\r\n        bytes memory data,\r\n        uint256 eta\r\n    ) public {\r\n        require(\r\n            msg.sender == admin,\r\n            \"CustomMasterChefJoeV2Timelock::cancelTransaction: Call must come from admin.\"\r\n        );\r\n\r\n        bytes32 txHash = keccak256(\r\n            abi.encode(target, value, signature, data, eta)\r\n        );\r\n        queuedTransactions[txHash] = false;\r\n\r\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\r\n    }\r\n\r\n    function executeTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string memory signature,\r\n        bytes memory data,\r\n        uint256 eta\r\n    ) public payable returns (bytes memory) {\r\n        require(\r\n            msg.sender == admin,\r\n            \"CustomMasterChefJoeV2Timelock::executeTransaction: Call must come from admin.\"\r\n        );\r\n\r\n        bytes32 txHash = keccak256(\r\n            abi.encode(target, value, signature, data, eta)\r\n        );\r\n        require(\r\n            queuedTransactions[txHash],\r\n            \"CustomMasterChefJoeV2Timelock::executeTransaction: Transaction hasn't been queued.\"\r\n        );\r\n        require(\r\n            getBlockTimestamp() >= eta,\r\n            \"CustomMasterChefJoeV2Timelock::executeTransaction: Transaction hasn't surpassed time lock.\"\r\n        );\r\n        require(\r\n            getBlockTimestamp() <= eta.add(GRACE_PERIOD),\r\n            \"CustomMasterChefJoeV2Timelock::executeTransaction: Transaction is stale.\"\r\n        );\r\n\r\n        queuedTransactions[txHash] = false;\r\n\r\n        bytes memory callData;\r\n\r\n        callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\r\n\r\n        // solium-disable-next-line security/no-call-value\r\n        (bool success, bytes memory returnData) = target.call.value(value)(\r\n            callData\r\n        );\r\n        require(\r\n            success,\r\n            \"CustomMasterChefJoeV2Timelock::executeTransaction: Transaction execution reverted.\"\r\n        );\r\n\r\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\r\n\r\n        return returnData;\r\n    }\r\n\r\n    function getBlockTimestamp() internal view returns (uint256) {\r\n        // solium-disable-next-line security/no-block-members\r\n        return block.timestamp;\r\n    }\r\n}\r\n"
    },
    "contracts/boringcrypto/BoringCryptoTokenScanner.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2020-09-18\r\n */\r\n\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"../interfaces/IFactory.sol\";\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary BoringERC20 {\r\n    function returnDataToString(bytes memory data)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        if (data.length >= 64) {\r\n            return abi.decode(data, (string));\r\n        } else if (data.length == 32) {\r\n            uint8 i = 0;\r\n            while (i < 32 && data[i] != 0) {\r\n                i++;\r\n            }\r\n            bytes memory bytesArray = new bytes(i);\r\n            for (i = 0; i < 32 && data[i] != 0; i++) {\r\n                bytesArray[i] = data[i];\r\n            }\r\n            return string(bytesArray);\r\n        } else {\r\n            return \"???\";\r\n        }\r\n    }\r\n\r\n    function symbol(IERC20 token) internal view returns (string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(\r\n            abi.encodeWithSelector(0x95d89b41)\r\n        );\r\n        return success ? returnDataToString(data) : \"???\";\r\n    }\r\n\r\n    function name(IERC20 token) internal view returns (string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(\r\n            abi.encodeWithSelector(0x06fdde03)\r\n        );\r\n        return success ? returnDataToString(data) : \"???\";\r\n    }\r\n\r\n    function decimals(IERC20 token) internal view returns (uint8) {\r\n        (bool success, bytes memory data) = address(token).staticcall(\r\n            abi.encodeWithSelector(0x313ce567)\r\n        );\r\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\r\n    }\r\n\r\n    function DOMAIN_SEPARATOR(IERC20 token) internal view returns (bytes32) {\r\n        (bool success, bytes memory data) = address(token).staticcall{\r\n            gas: 10000\r\n        }(abi.encodeWithSelector(0x3644e515));\r\n        return\r\n            success && data.length == 32\r\n                ? abi.decode(data, (bytes32))\r\n                : bytes32(0);\r\n    }\r\n\r\n    function nonces(IERC20 token, address owner)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        (bool success, bytes memory data) = address(token).staticcall{\r\n            gas: 5000\r\n        }(abi.encodeWithSelector(0x7ecebe00, owner));\r\n        return\r\n            success && data.length == 32\r\n                ? abi.decode(data, (uint256))\r\n                : uint256(-1); // Use max uint256 to signal failure to retrieve nonce (probably not supported)\r\n    }\r\n}\r\n\r\ninterface IMasterChef {\r\n    function BONUS_MULTIPLIER() external view returns (uint256);\r\n\r\n    function devaddr() external view returns (address);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function startTimestamp() external view returns (uint256);\r\n\r\n    function joe() external view returns (address);\r\n\r\n    function joePerSec() external view returns (uint256);\r\n\r\n    function totalAllocPoint() external view returns (uint256);\r\n\r\n    function poolLength() external view returns (uint256);\r\n\r\n    function poolInfo(uint256 nr)\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function userInfo(uint256 nr, address who)\r\n        external\r\n        view\r\n        returns (uint256, uint256);\r\n\r\n    function pendingTokens(uint256 pid, address who)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            address,\r\n            string memory,\r\n            uint256\r\n        );\r\n}\r\n\r\ninterface IPair is IERC20 {\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112,\r\n            uint112,\r\n            uint32\r\n        );\r\n}\r\n\r\ncontract BoringCryptoTokenScanner {\r\n    using SafeMath for uint256;\r\n\r\n    struct Balance {\r\n        address token;\r\n        uint256 balance;\r\n    }\r\n\r\n    struct BalanceFull {\r\n        address token;\r\n        uint256 balance;\r\n        uint256 rate;\r\n    }\r\n\r\n    struct TokenInfo {\r\n        address token;\r\n        uint256 decimals;\r\n        string name;\r\n        string symbol;\r\n    }\r\n\r\n    function getTokenInfo(address[] calldata addresses)\r\n        public\r\n        view\r\n        returns (TokenInfo[] memory)\r\n    {\r\n        TokenInfo[] memory infos = new TokenInfo[](addresses.length);\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            IERC20 token = IERC20(addresses[i]);\r\n            infos[i].token = address(token);\r\n\r\n            infos[i].name = token.name();\r\n            infos[i].symbol = token.symbol();\r\n            infos[i].decimals = token.decimals();\r\n        }\r\n\r\n        return infos;\r\n    }\r\n\r\n    function findBalances(address who, address[] calldata addresses)\r\n        public\r\n        view\r\n        returns (Balance[] memory)\r\n    {\r\n        uint256 balanceCount;\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            if (IERC20(addresses[i]).balanceOf(who) > 0) {\r\n                balanceCount++;\r\n            }\r\n        }\r\n\r\n        Balance[] memory balances = new Balance[](balanceCount);\r\n\r\n        balanceCount = 0;\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            IERC20 token = IERC20(addresses[i]);\r\n            uint256 balance = token.balanceOf(who);\r\n            if (balance > 0) {\r\n                balances[balanceCount].token = address(token);\r\n                balances[balanceCount].balance = token.balanceOf(who);\r\n                balanceCount++;\r\n            }\r\n        }\r\n\r\n        return balances;\r\n    }\r\n\r\n    function getBalances(\r\n        address who,\r\n        address[] calldata addresses,\r\n        IFactory factory,\r\n        address currency\r\n    ) public view returns (BalanceFull[] memory) {\r\n        BalanceFull[] memory balances = new BalanceFull[](addresses.length);\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            IERC20 token = IERC20(addresses[i]);\r\n            balances[i].token = address(token);\r\n            balances[i].balance = token.balanceOf(who);\r\n\r\n            IPair pair = IPair(factory.getPair(addresses[i], currency));\r\n            if (address(pair) != address(0)) {\r\n                uint256 reserveCurrency;\r\n                uint256 reserveToken;\r\n                if (pair.token0() == currency) {\r\n                    (reserveCurrency, reserveToken, ) = pair.getReserves();\r\n                } else {\r\n                    (reserveToken, reserveCurrency, ) = pair.getReserves();\r\n                }\r\n                balances[i].rate = (reserveToken * 1e18) / reserveCurrency;\r\n            }\r\n        }\r\n\r\n        return balances;\r\n    }\r\n\r\n    struct Factory {\r\n        IFactory factory;\r\n        uint256 allPairsLength;\r\n        address feeTo;\r\n        address feeToSetter;\r\n    }\r\n\r\n    function getFactoryInfo(IFactory[] calldata addresses)\r\n        public\r\n        view\r\n        returns (Factory[] memory)\r\n    {\r\n        Factory[] memory factories = new Factory[](addresses.length);\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            IFactory factory = addresses[i];\r\n            factories[i].factory = factory;\r\n\r\n            factories[i].allPairsLength = factory.allPairsLength();\r\n            factories[i].feeTo = factory.feeTo();\r\n            factories[i].feeToSetter = factory.feeToSetter();\r\n        }\r\n\r\n        return factories;\r\n    }\r\n\r\n    struct Pair {\r\n        address token;\r\n        address token0;\r\n        address token1;\r\n    }\r\n\r\n    function getPairs(\r\n        IFactory factory,\r\n        uint256 fromID,\r\n        uint256 toID\r\n    ) public view returns (Pair[] memory) {\r\n        if (toID == 0) {\r\n            toID = factory.allPairsLength();\r\n        }\r\n\r\n        Pair[] memory pairs = new Pair[](toID - fromID);\r\n\r\n        for (uint256 id = fromID; id < toID; id++) {\r\n            address token = factory.allPairs(id);\r\n            uint256 i = id - fromID;\r\n            pairs[i].token = token;\r\n            pairs[i].token0 = IPair(token).token0();\r\n            pairs[i].token1 = IPair(token).token1();\r\n        }\r\n        return pairs;\r\n    }\r\n\r\n    function findPairs(\r\n        address who,\r\n        IFactory factory,\r\n        uint256 fromID,\r\n        uint256 toID\r\n    ) public view returns (Pair[] memory) {\r\n        if (toID == 0) {\r\n            toID = factory.allPairsLength();\r\n        }\r\n\r\n        uint256 pairCount;\r\n\r\n        for (uint256 id = fromID; id < toID; id++) {\r\n            address token = factory.allPairs(id);\r\n            if (IERC20(token).balanceOf(who) > 0) {\r\n                pairCount++;\r\n            }\r\n        }\r\n\r\n        Pair[] memory pairs = new Pair[](pairCount);\r\n\r\n        pairCount = 0;\r\n        for (uint256 id = fromID; id < toID; id++) {\r\n            address token = factory.allPairs(id);\r\n            uint256 balance = IERC20(token).balanceOf(who);\r\n            if (balance > 0) {\r\n                pairs[pairCount].token = token;\r\n                pairs[pairCount].token0 = IPair(token).token0();\r\n                pairs[pairCount].token1 = IPair(token).token1();\r\n                pairCount++;\r\n            }\r\n        }\r\n\r\n        return pairs;\r\n    }\r\n\r\n    struct PairFull {\r\n        address token;\r\n        address token0;\r\n        address token1;\r\n        uint256 reserve0;\r\n        uint256 reserve1;\r\n        uint256 totalSupply;\r\n        uint256 balance;\r\n    }\r\n\r\n    function getPairsFull(address who, address[] calldata addresses)\r\n        public\r\n        view\r\n        returns (PairFull[] memory)\r\n    {\r\n        PairFull[] memory pairs = new PairFull[](addresses.length);\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            address token = addresses[i];\r\n            pairs[i].token = token;\r\n            pairs[i].token0 = IPair(token).token0();\r\n            pairs[i].token1 = IPair(token).token1();\r\n            (uint256 reserve0, uint256 reserve1, ) = IPair(token).getReserves();\r\n            pairs[i].reserve0 = reserve0;\r\n            pairs[i].reserve1 = reserve1;\r\n            pairs[i].balance = IERC20(token).balanceOf(who);\r\n        }\r\n        return pairs;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}