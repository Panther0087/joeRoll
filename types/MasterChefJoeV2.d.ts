/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MasterChefJoeV2Interface extends ethers.utils.Interface {
  functions: {
    "add(uint256,address,address)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "dev(address)": FunctionFragment;
    "devAddr()": FunctionFragment;
    "devPercent()": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "investorAddr()": FunctionFragment;
    "investorPercent()": FunctionFragment;
    "joe()": FunctionFragment;
    "joePerSec()": FunctionFragment;
    "massUpdatePools()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingTokens(uint256,address)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewarderBonusTokenInfo(uint256)": FunctionFragment;
    "set(uint256,uint256,address,bool)": FunctionFragment;
    "setDevPercent(uint256)": FunctionFragment;
    "setInvestorAddr(address)": FunctionFragment;
    "setInvestorPercent(uint256)": FunctionFragment;
    "setTreasuryAddr(address)": FunctionFragment;
    "setTreasuryPercent(uint256)": FunctionFragment;
    "startTimestamp()": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryAddr()": FunctionFragment;
    "treasuryPercent()": FunctionFragment;
    "updateEmissionRate(uint256)": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "dev", values: [string]): string;
  encodeFunctionData(functionFragment: "devAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "devPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "investorAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "investorPercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "joe", values?: undefined): string;
  encodeFunctionData(functionFragment: "joePerSec", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingTokens",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewarderBonusTokenInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDevPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInvestorAddr",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setInvestorPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAddr",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateEmissionRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dev", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devAddr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devPercent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investorAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investorPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joePerSec", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewarderBonusTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDevPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInvestorAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInvestorPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEmissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Add(uint256,uint256,address,address)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "Harvest(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Set(uint256,uint256,address,bool)": EventFragment;
    "SetDevAddress(address,address)": EventFragment;
    "UpdateEmissionRate(address,uint256)": EventFragment;
    "UpdatePool(uint256,uint256,uint256,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Add"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Set"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDevAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateEmissionRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class MasterChefJoeV2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MasterChefJoeV2Interface;

  functions: {
    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "add(uint256,address,address)"(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    dev(_devAddr: string, overrides?: Overrides): Promise<ContractTransaction>;

    "dev(address)"(
      _devAddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    devAddr(overrides?: CallOverrides): Promise<[string]>;

    "devAddr()"(overrides?: CallOverrides): Promise<[string]>;

    devPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    "devPercent()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    investorAddr(overrides?: CallOverrides): Promise<[string]>;

    "investorAddr()"(overrides?: CallOverrides): Promise<[string]>;

    investorPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    "investorPercent()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    joe(overrides?: CallOverrides): Promise<[string]>;

    "joe()"(overrides?: CallOverrides): Promise<[string]>;

    joePerSec(overrides?: CallOverrides): Promise<[BigNumber]>;

    "joePerSec()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    massUpdatePools(overrides?: Overrides): Promise<ContractTransaction>;

    "massUpdatePools()"(overrides?: Overrides): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingTokens(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber] & {
        pendingJoe: BigNumber;
        bonusTokenAddress: string;
        bonusTokenSymbol: string;
        pendingBonusToken: BigNumber;
      }
    >;

    "pendingTokens(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber] & {
        pendingJoe: BigNumber;
        bonusTokenAddress: string;
        bonusTokenSymbol: string;
        pendingBonusToken: BigNumber;
      }
    >;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardTimestamp: BigNumber;
        accJoePerShare: BigNumber;
        rewarder: string;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardTimestamp: BigNumber;
        accJoePerShare: BigNumber;
        rewarder: string;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "poolLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    rewarderBonusTokenInfo(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { bonusTokenAddress: string; bonusTokenSymbol: string }
    >;

    "rewarderBonusTokenInfo(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { bonusTokenAddress: string; bonusTokenSymbol: string }
    >;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "set(uint256,uint256,address,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDevPercent(
      _newDevPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDevPercent(uint256)"(
      _newDevPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setInvestorAddr(
      _investorAddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setInvestorAddr(address)"(
      _investorAddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setInvestorPercent(
      _newInvestorPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setInvestorPercent(uint256)"(
      _newInvestorPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTreasuryAddr(
      _treasuryAddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTreasuryAddr(address)"(
      _treasuryAddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTreasuryPercent(
      _newTreasuryPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTreasuryPercent(uint256)"(
      _newTreasuryPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    startTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    "startTimestamp()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    treasuryAddr(overrides?: CallOverrides): Promise<[string]>;

    "treasuryAddr()"(overrides?: CallOverrides): Promise<[string]>;

    treasuryPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    "treasuryPercent()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateEmissionRate(
      _joePerSec: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateEmissionRate(uint256)"(
      _joePerSec: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  add(
    _allocPoint: BigNumberish,
    _lpToken: string,
    _rewarder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "add(uint256,address,address)"(
    _allocPoint: BigNumberish,
    _lpToken: string,
    _rewarder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256)"(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  dev(_devAddr: string, overrides?: Overrides): Promise<ContractTransaction>;

  "dev(address)"(
    _devAddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  devAddr(overrides?: CallOverrides): Promise<string>;

  "devAddr()"(overrides?: CallOverrides): Promise<string>;

  devPercent(overrides?: CallOverrides): Promise<BigNumber>;

  "devPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyWithdraw(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  investorAddr(overrides?: CallOverrides): Promise<string>;

  "investorAddr()"(overrides?: CallOverrides): Promise<string>;

  investorPercent(overrides?: CallOverrides): Promise<BigNumber>;

  "investorPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

  joe(overrides?: CallOverrides): Promise<string>;

  "joe()"(overrides?: CallOverrides): Promise<string>;

  joePerSec(overrides?: CallOverrides): Promise<BigNumber>;

  "joePerSec()"(overrides?: CallOverrides): Promise<BigNumber>;

  massUpdatePools(overrides?: Overrides): Promise<ContractTransaction>;

  "massUpdatePools()"(overrides?: Overrides): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingTokens(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber] & {
      pendingJoe: BigNumber;
      bonusTokenAddress: string;
      bonusTokenSymbol: string;
      pendingBonusToken: BigNumber;
    }
  >;

  "pendingTokens(uint256,address)"(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber] & {
      pendingJoe: BigNumber;
      bonusTokenAddress: string;
      bonusTokenSymbol: string;
      pendingBonusToken: BigNumber;
    }
  >;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, string] & {
      lpToken: string;
      allocPoint: BigNumber;
      lastRewardTimestamp: BigNumber;
      accJoePerShare: BigNumber;
      rewarder: string;
    }
  >;

  "poolInfo(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, string] & {
      lpToken: string;
      allocPoint: BigNumber;
      lastRewardTimestamp: BigNumber;
      accJoePerShare: BigNumber;
      rewarder: string;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  rewarderBonusTokenInfo(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { bonusTokenAddress: string; bonusTokenSymbol: string }
  >;

  "rewarderBonusTokenInfo(uint256)"(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { bonusTokenAddress: string; bonusTokenSymbol: string }
  >;

  set(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _rewarder: string,
    overwrite: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "set(uint256,uint256,address,bool)"(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _rewarder: string,
    overwrite: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDevPercent(
    _newDevPercent: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDevPercent(uint256)"(
    _newDevPercent: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setInvestorAddr(
    _investorAddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setInvestorAddr(address)"(
    _investorAddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setInvestorPercent(
    _newInvestorPercent: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setInvestorPercent(uint256)"(
    _newInvestorPercent: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTreasuryAddr(
    _treasuryAddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTreasuryAddr(address)"(
    _treasuryAddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTreasuryPercent(
    _newTreasuryPercent: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTreasuryPercent(uint256)"(
    _newTreasuryPercent: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "startTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  treasuryAddr(overrides?: CallOverrides): Promise<string>;

  "treasuryAddr()"(overrides?: CallOverrides): Promise<string>;

  treasuryPercent(overrides?: CallOverrides): Promise<BigNumber>;

  "treasuryPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

  updateEmissionRate(
    _joePerSec: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateEmissionRate(uint256)"(
    _joePerSec: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePool(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePool(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  "userInfo(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  withdraw(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,uint256)"(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "add(uint256,address,address)"(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dev(_devAddr: string, overrides?: CallOverrides): Promise<void>;

    "dev(address)"(_devAddr: string, overrides?: CallOverrides): Promise<void>;

    devAddr(overrides?: CallOverrides): Promise<string>;

    "devAddr()"(overrides?: CallOverrides): Promise<string>;

    devPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "devPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    investorAddr(overrides?: CallOverrides): Promise<string>;

    "investorAddr()"(overrides?: CallOverrides): Promise<string>;

    investorPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "investorPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    joe(overrides?: CallOverrides): Promise<string>;

    "joe()"(overrides?: CallOverrides): Promise<string>;

    joePerSec(overrides?: CallOverrides): Promise<BigNumber>;

    "joePerSec()"(overrides?: CallOverrides): Promise<BigNumber>;

    massUpdatePools(overrides?: CallOverrides): Promise<void>;

    "massUpdatePools()"(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingTokens(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber] & {
        pendingJoe: BigNumber;
        bonusTokenAddress: string;
        bonusTokenSymbol: string;
        pendingBonusToken: BigNumber;
      }
    >;

    "pendingTokens(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber] & {
        pendingJoe: BigNumber;
        bonusTokenAddress: string;
        bonusTokenSymbol: string;
        pendingBonusToken: BigNumber;
      }
    >;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardTimestamp: BigNumber;
        accJoePerShare: BigNumber;
        rewarder: string;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardTimestamp: BigNumber;
        accJoePerShare: BigNumber;
        rewarder: string;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rewarderBonusTokenInfo(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { bonusTokenAddress: string; bonusTokenSymbol: string }
    >;

    "rewarderBonusTokenInfo(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { bonusTokenAddress: string; bonusTokenSymbol: string }
    >;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "set(uint256,uint256,address,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDevPercent(
      _newDevPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDevPercent(uint256)"(
      _newDevPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInvestorAddr(
      _investorAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInvestorAddr(address)"(
      _investorAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setInvestorPercent(
      _newInvestorPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInvestorPercent(uint256)"(
      _newInvestorPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryAddr(
      _treasuryAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTreasuryAddr(address)"(
      _treasuryAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryPercent(
      _newTreasuryPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTreasuryPercent(uint256)"(
      _newTreasuryPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "startTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryAddr(overrides?: CallOverrides): Promise<string>;

    "treasuryAddr()"(overrides?: CallOverrides): Promise<string>;

    treasuryPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "treasuryPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateEmissionRate(
      _joePerSec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateEmissionRate(uint256)"(
      _joePerSec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Add(
      pid: BigNumberish | null,
      allocPoint: null,
      lpToken: string | null,
      rewarder: string | null
    ): EventFilter;

    Deposit(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;

    EmergencyWithdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;

    Harvest(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Set(
      pid: BigNumberish | null,
      allocPoint: null,
      rewarder: string | null,
      overwrite: null
    ): EventFilter;

    SetDevAddress(
      oldAddress: string | null,
      newAddress: string | null
    ): EventFilter;

    UpdateEmissionRate(user: string | null, _joePerSec: null): EventFilter;

    UpdatePool(
      pid: BigNumberish | null,
      lastRewardTimestamp: null,
      lpSupply: null,
      accJoePerShare: null
    ): EventFilter;

    Withdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "add(uint256,address,address)"(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    dev(_devAddr: string, overrides?: Overrides): Promise<BigNumber>;

    "dev(address)"(_devAddr: string, overrides?: Overrides): Promise<BigNumber>;

    devAddr(overrides?: CallOverrides): Promise<BigNumber>;

    "devAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    devPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "devPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    investorAddr(overrides?: CallOverrides): Promise<BigNumber>;

    "investorAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    investorPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "investorPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    joe(overrides?: CallOverrides): Promise<BigNumber>;

    "joe()"(overrides?: CallOverrides): Promise<BigNumber>;

    joePerSec(overrides?: CallOverrides): Promise<BigNumber>;

    "joePerSec()"(overrides?: CallOverrides): Promise<BigNumber>;

    massUpdatePools(overrides?: Overrides): Promise<BigNumber>;

    "massUpdatePools()"(overrides?: Overrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingTokens(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingTokens(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    rewarderBonusTokenInfo(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewarderBonusTokenInfo(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "set(uint256,uint256,address,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDevPercent(
      _newDevPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDevPercent(uint256)"(
      _newDevPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setInvestorAddr(
      _investorAddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setInvestorAddr(address)"(
      _investorAddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setInvestorPercent(
      _newInvestorPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setInvestorPercent(uint256)"(
      _newInvestorPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTreasuryAddr(
      _treasuryAddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTreasuryAddr(address)"(
      _treasuryAddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTreasuryPercent(
      _newTreasuryPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTreasuryPercent(uint256)"(
      _newTreasuryPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "startTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    treasuryAddr(overrides?: CallOverrides): Promise<BigNumber>;

    "treasuryAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "treasuryPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateEmissionRate(
      _joePerSec: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateEmissionRate(uint256)"(
      _joePerSec: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatePool(_pid: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "add(uint256,address,address)"(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    dev(_devAddr: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "dev(address)"(
      _devAddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    devAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "devAddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "devPercent()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    investorAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "investorAddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    investorPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "investorPercent()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "joe()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    joePerSec(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "joePerSec()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    massUpdatePools(overrides?: Overrides): Promise<PopulatedTransaction>;

    "massUpdatePools()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingTokens(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingTokens(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rewarderBonusTokenInfo(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewarderBonusTokenInfo(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "set(uint256,uint256,address,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDevPercent(
      _newDevPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDevPercent(uint256)"(
      _newDevPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setInvestorAddr(
      _investorAddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setInvestorAddr(address)"(
      _investorAddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setInvestorPercent(
      _newInvestorPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setInvestorPercent(uint256)"(
      _newInvestorPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTreasuryAddr(
      _treasuryAddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTreasuryAddr(address)"(
      _treasuryAddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTreasuryPercent(
      _newTreasuryPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTreasuryPercent(uint256)"(
      _newTreasuryPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    startTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAllocPoint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    treasuryAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasuryAddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasuryPercent()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateEmissionRate(
      _joePerSec: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateEmissionRate(uint256)"(
      _joePerSec: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
