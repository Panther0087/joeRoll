/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MasterChefRewarderPerBlockInterface extends ethers.utils.Interface {
  functions: {
    "MCV1()": FunctionFragment;
    "MCV1_pid()": FunctionFragment;
    "MCV2()": FunctionFragment;
    "harvestFromMasterChefV1()": FunctionFragment;
    "init(address)": FunctionFragment;
    "lpToken()": FunctionFragment;
    "onJoeReward(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingTokens(address)": FunctionFragment;
    "poolInfo()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "setAllocPoint(uint256)": FunctionFragment;
    "setRewardRate(uint256)": FunctionFragment;
    "tokenPerBlock()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePool()": FunctionFragment;
    "userInfo(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "MCV1", values?: undefined): string;
  encodeFunctionData(functionFragment: "MCV1_pid", values?: undefined): string;
  encodeFunctionData(functionFragment: "MCV2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "harvestFromMasterChefV1",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(functionFragment: "lpToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onJoeReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingTokens",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "poolInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAllocPoint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "userInfo", values: [string]): string;

  decodeFunctionResult(functionFragment: "MCV1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MCV1_pid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MCV2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestFromMasterChefV1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onJoeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;

  events: {
    "AllocPointUpdated(uint256,uint256)": EventFragment;
    "OnReward(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RewardRateUpdated(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllocPointUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardRateUpdated"): EventFragment;
}

export class MasterChefRewarderPerBlock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MasterChefRewarderPerBlockInterface;

  functions: {
    MCV1(overrides?: CallOverrides): Promise<[string]>;

    "MCV1()"(overrides?: CallOverrides): Promise<[string]>;

    MCV1_pid(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MCV1_pid()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    MCV2(overrides?: CallOverrides): Promise<[string]>;

    "MCV2()"(overrides?: CallOverrides): Promise<[string]>;

    harvestFromMasterChefV1(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "harvestFromMasterChefV1()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    init(
      dummyToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address)"(
      dummyToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lpToken(overrides?: CallOverrides): Promise<[string]>;

    "lpToken()"(overrides?: CallOverrides): Promise<[string]>;

    onJoeReward(
      _user: string,
      _lpAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onJoeReward(address,uint256)"(
      _user: string,
      _lpAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingTokens(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pending: BigNumber }>;

    "pendingTokens(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pending: BigNumber }>;

    poolInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        accTokenPerShare: BigNumber;
        lastRewardBlock: BigNumber;
        allocPoint: BigNumber;
      }
    >;

    "poolInfo()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        accTokenPerShare: BigNumber;
        lastRewardBlock: BigNumber;
        allocPoint: BigNumber;
      }
    >;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    "rewardToken()"(overrides?: CallOverrides): Promise<[string]>;

    setAllocPoint(
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAllocPoint(uint256)"(
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRewardRate(
      _tokenPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRewardRate(uint256)"(
      _tokenPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "tokenPerBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePool(overrides?: Overrides): Promise<ContractTransaction>;

    "updatePool()"(overrides?: Overrides): Promise<ContractTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    "userInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;
  };

  MCV1(overrides?: CallOverrides): Promise<string>;

  "MCV1()"(overrides?: CallOverrides): Promise<string>;

  MCV1_pid(overrides?: CallOverrides): Promise<BigNumber>;

  "MCV1_pid()"(overrides?: CallOverrides): Promise<BigNumber>;

  MCV2(overrides?: CallOverrides): Promise<string>;

  "MCV2()"(overrides?: CallOverrides): Promise<string>;

  harvestFromMasterChefV1(overrides?: Overrides): Promise<ContractTransaction>;

  "harvestFromMasterChefV1()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  init(dummyToken: string, overrides?: Overrides): Promise<ContractTransaction>;

  "init(address)"(
    dummyToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lpToken(overrides?: CallOverrides): Promise<string>;

  "lpToken()"(overrides?: CallOverrides): Promise<string>;

  onJoeReward(
    _user: string,
    _lpAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onJoeReward(address,uint256)"(
    _user: string,
    _lpAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingTokens(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "pendingTokens(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      accTokenPerShare: BigNumber;
      lastRewardBlock: BigNumber;
      allocPoint: BigNumber;
    }
  >;

  "poolInfo()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      accTokenPerShare: BigNumber;
      lastRewardBlock: BigNumber;
      allocPoint: BigNumber;
    }
  >;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  "rewardToken()"(overrides?: CallOverrides): Promise<string>;

  setAllocPoint(
    _allocPoint: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAllocPoint(uint256)"(
    _allocPoint: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRewardRate(
    _tokenPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRewardRate(uint256)"(
    _tokenPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "tokenPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePool(overrides?: Overrides): Promise<ContractTransaction>;

  "updatePool()"(overrides?: Overrides): Promise<ContractTransaction>;

  userInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  "userInfo(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  callStatic: {
    MCV1(overrides?: CallOverrides): Promise<string>;

    "MCV1()"(overrides?: CallOverrides): Promise<string>;

    MCV1_pid(overrides?: CallOverrides): Promise<BigNumber>;

    "MCV1_pid()"(overrides?: CallOverrides): Promise<BigNumber>;

    MCV2(overrides?: CallOverrides): Promise<string>;

    "MCV2()"(overrides?: CallOverrides): Promise<string>;

    harvestFromMasterChefV1(overrides?: CallOverrides): Promise<void>;

    "harvestFromMasterChefV1()"(overrides?: CallOverrides): Promise<void>;

    init(dummyToken: string, overrides?: CallOverrides): Promise<void>;

    "init(address)"(
      dummyToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lpToken(overrides?: CallOverrides): Promise<string>;

    "lpToken()"(overrides?: CallOverrides): Promise<string>;

    onJoeReward(
      _user: string,
      _lpAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "onJoeReward(address,uint256)"(
      _user: string,
      _lpAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingTokens(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "pendingTokens(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        accTokenPerShare: BigNumber;
        lastRewardBlock: BigNumber;
        allocPoint: BigNumber;
      }
    >;

    "poolInfo()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        accTokenPerShare: BigNumber;
        lastRewardBlock: BigNumber;
        allocPoint: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    "rewardToken()"(overrides?: CallOverrides): Promise<string>;

    setAllocPoint(
      _allocPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAllocPoint(uint256)"(
      _allocPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardRate(
      _tokenPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRewardRate(uint256)"(
      _tokenPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        accTokenPerShare: BigNumber;
        lastRewardBlock: BigNumber;
        allocPoint: BigNumber;
      }
    >;

    "updatePool()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        accTokenPerShare: BigNumber;
        lastRewardBlock: BigNumber;
        allocPoint: BigNumber;
      }
    >;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    "userInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;
  };

  filters: {
    AllocPointUpdated(oldAllocPoint: null, newAllocPoint: null): EventFilter;

    OnReward(user: string | null, amount: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RewardRateUpdated(oldRate: null, newRate: null): EventFilter;
  };

  estimateGas: {
    MCV1(overrides?: CallOverrides): Promise<BigNumber>;

    "MCV1()"(overrides?: CallOverrides): Promise<BigNumber>;

    MCV1_pid(overrides?: CallOverrides): Promise<BigNumber>;

    "MCV1_pid()"(overrides?: CallOverrides): Promise<BigNumber>;

    MCV2(overrides?: CallOverrides): Promise<BigNumber>;

    "MCV2()"(overrides?: CallOverrides): Promise<BigNumber>;

    harvestFromMasterChefV1(overrides?: Overrides): Promise<BigNumber>;

    "harvestFromMasterChefV1()"(overrides?: Overrides): Promise<BigNumber>;

    init(dummyToken: string, overrides?: Overrides): Promise<BigNumber>;

    "init(address)"(
      dummyToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lpToken(overrides?: CallOverrides): Promise<BigNumber>;

    "lpToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    onJoeReward(
      _user: string,
      _lpAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onJoeReward(address,uint256)"(
      _user: string,
      _lpAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingTokens(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "pendingTokens(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "poolInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAllocPoint(
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAllocPoint(uint256)"(
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRewardRate(
      _tokenPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRewardRate(uint256)"(
      _tokenPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatePool(overrides?: Overrides): Promise<BigNumber>;

    "updatePool()"(overrides?: Overrides): Promise<BigNumber>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "userInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MCV1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MCV1()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MCV1_pid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MCV1_pid()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MCV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MCV2()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestFromMasterChefV1(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "harvestFromMasterChefV1()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    init(
      dummyToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address)"(
      dummyToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lpToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lpToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onJoeReward(
      _user: string,
      _lpAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onJoeReward(address,uint256)"(
      _user: string,
      _lpAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingTokens(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingTokens(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolInfo()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAllocPoint(
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAllocPoint(uint256)"(
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRewardRate(
      _tokenPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRewardRate(uint256)"(
      _tokenPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenPerBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatePool(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updatePool()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
