/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BoringHelperV1Interface extends ethers.utils.Interface {
  functions: {
    "WAVAX()": FunctionFragment;
    "bar()": FunctionFragment;
    "chef()": FunctionFragment;
    "findBalances(address,address[])": FunctionFragment;
    "findPools(address,uint256[])": FunctionFragment;
    "getAVAXRate(address)": FunctionFragment;
    "getBalances(address,address[])": FunctionFragment;
    "getPairs(address,uint256,uint256)": FunctionFragment;
    "getPools(uint256[])": FunctionFragment;
    "getTokenInfo(address[])": FunctionFragment;
    "getUIInfo(address,address[],address,address[])": FunctionFragment;
    "joe()": FunctionFragment;
    "joeFactory()": FunctionFragment;
    "maker()": FunctionFragment;
    "owner()": FunctionFragment;
    "pangolinFactory()": FunctionFragment;
    "pollPairs(address,address[])": FunctionFragment;
    "pollPools(address,uint256[])": FunctionFragment;
    "setContracts(address,address,address,address,address,address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "WAVAX", values?: undefined): string;
  encodeFunctionData(functionFragment: "bar", values?: undefined): string;
  encodeFunctionData(functionFragment: "chef", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "findBalances",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "findPools",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "getAVAXRate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getBalances",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairs",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPools",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInfo",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getUIInfo",
    values: [string, string[], string, string[]]
  ): string;
  encodeFunctionData(functionFragment: "joe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "joeFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maker", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pangolinFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pollPairs",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "pollPools",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setContracts",
    values: [string, string, string, string, string, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "WAVAX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chef", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "findBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "findPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAVAXRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPairs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUIInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joeFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pangolinFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pollPairs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pollPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContracts",
    data: BytesLike
  ): Result;

  events: {};
}

export class BoringHelperV1 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BoringHelperV1Interface;

  functions: {
    WAVAX(overrides?: CallOverrides): Promise<[string]>;

    "WAVAX()"(overrides?: CallOverrides): Promise<[string]>;

    bar(overrides?: CallOverrides): Promise<[string]>;

    "bar()"(overrides?: CallOverrides): Promise<[string]>;

    chef(overrides?: CallOverrides): Promise<[string]>;

    "chef()"(overrides?: CallOverrides): Promise<[string]>;

    findBalances(
      who: string,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { token: string; balance: BigNumber })[]]
    >;

    "findBalances(address,address[])"(
      who: string,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { token: string; balance: BigNumber })[]]
    >;

    findPools(
      who: string,
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [([BigNumber, BigNumber] & { pid: BigNumber; balance: BigNumber })[]]
    >;

    "findPools(address,uint256[])"(
      who: string,
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [([BigNumber, BigNumber] & { pid: BigNumber; balance: BigNumber })[]]
    >;

    getAVAXRate(token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "getAVAXRate(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBalances(
      who: string,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          token: string;
          totalSupply: BigNumber;
          balance: BigNumber;
          nonce: BigNumber;
          rate: BigNumber;
        })[]
      ]
    >;

    "getBalances(address,address[])"(
      who: string,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          token: string;
          totalSupply: BigNumber;
          balance: BigNumber;
          nonce: BigNumber;
          rate: BigNumber;
        })[]
      ]
    >;

    getPairs(
      factory: string,
      fromID: BigNumberish,
      toID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, string, BigNumber] & {
          token: string;
          token0: string;
          token1: string;
          totalSupply: BigNumber;
        })[]
      ]
    >;

    "getPairs(address,uint256,uint256)"(
      factory: string,
      fromID: BigNumberish,
      toID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, string, BigNumber] & {
          token: string;
          token0: string;
          token1: string;
          totalSupply: BigNumber;
        })[]
      ]
    >;

    getPools(
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          totalAllocPoint: BigNumber;
          poolLength: BigNumber;
        },
        ([
          BigNumber,
          string,
          BigNumber,
          boolean,
          string,
          string,
          string,
          string,
          string,
          number
        ] & {
          pid: BigNumber;
          lpToken: string;
          allocPoint: BigNumber;
          isPair: boolean;
          factory: string;
          token0: string;
          token1: string;
          name: string;
          symbol: string;
          decimals: number;
        })[]
      ]
    >;

    "getPools(uint256[])"(
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          totalAllocPoint: BigNumber;
          poolLength: BigNumber;
        },
        ([
          BigNumber,
          string,
          BigNumber,
          boolean,
          string,
          string,
          string,
          string,
          string,
          number
        ] & {
          pid: BigNumber;
          lpToken: string;
          allocPoint: BigNumber;
          isPair: boolean;
          factory: string;
          token0: string;
          token1: string;
          name: string;
          symbol: string;
          decimals: number;
        })[]
      ]
    >;

    getTokenInfo(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, string, string, string] & {
          token: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
          DOMAIN_SEPARATOR: string;
        })[]
      ]
    >;

    "getTokenInfo(address[])"(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, string, string, string] & {
          token: string;
          decimals: BigNumber;
          name: string;
          symbol: string;
          DOMAIN_SEPARATOR: string;
        })[]
      ]
    >;

    getUIInfo(
      who: string,
      factoryAddresses: string[],
      currency: string,
      masterContracts: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          ([string, BigNumber] & {
            factory: string;
            allPairsLength: BigNumber;
          })[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          avaxBalance: BigNumber;
          joeBalance: BigNumber;
          joeBarBalance: BigNumber;
          xjoeBalance: BigNumber;
          xjoeSupply: BigNumber;
          joeBarAllowance: BigNumber;
          factories: ([string, BigNumber] & {
            factory: string;
            allPairsLength: BigNumber;
          })[];
          avaxRate: BigNumber;
          joeRate: BigNumber;
          btcRate: BigNumber;
          pendingJoe: BigNumber;
          blockTimeStamp: BigNumber;
        }
      ]
    >;

    "getUIInfo(address,address[],address,address[])"(
      who: string,
      factoryAddresses: string[],
      currency: string,
      masterContracts: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          ([string, BigNumber] & {
            factory: string;
            allPairsLength: BigNumber;
          })[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          avaxBalance: BigNumber;
          joeBalance: BigNumber;
          joeBarBalance: BigNumber;
          xjoeBalance: BigNumber;
          xjoeSupply: BigNumber;
          joeBarAllowance: BigNumber;
          factories: ([string, BigNumber] & {
            factory: string;
            allPairsLength: BigNumber;
          })[];
          avaxRate: BigNumber;
          joeRate: BigNumber;
          btcRate: BigNumber;
          pendingJoe: BigNumber;
          blockTimeStamp: BigNumber;
        }
      ]
    >;

    joe(overrides?: CallOverrides): Promise<[string]>;

    "joe()"(overrides?: CallOverrides): Promise<[string]>;

    joeFactory(overrides?: CallOverrides): Promise<[string]>;

    "joeFactory()"(overrides?: CallOverrides): Promise<[string]>;

    maker(overrides?: CallOverrides): Promise<[string]>;

    "maker()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pangolinFactory(overrides?: CallOverrides): Promise<[string]>;

    "pangolinFactory()"(overrides?: CallOverrides): Promise<[string]>;

    pollPairs(
      who: string,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          token: string;
          reserve0: BigNumber;
          reserve1: BigNumber;
          totalSupply: BigNumber;
          balance: BigNumber;
        })[]
      ]
    >;

    "pollPairs(address,address[])"(
      who: string,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          token: string;
          reserve0: BigNumber;
          reserve1: BigNumber;
          totalSupply: BigNumber;
          balance: BigNumber;
        })[]
      ]
    >;

    pollPools(
      who: string,
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          pid: BigNumber;
          balance: BigNumber;
          totalSupply: BigNumber;
          lpBalance: BigNumber;
          lpTotalSupply: BigNumber;
          lpAllowance: BigNumber;
          reserve0: BigNumber;
          reserve1: BigNumber;
          rewardDebt: BigNumber;
          pending: BigNumber;
        })[]
      ]
    >;

    "pollPools(address,uint256[])"(
      who: string,
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          pid: BigNumber;
          balance: BigNumber;
          totalSupply: BigNumber;
          lpBalance: BigNumber;
          lpTotalSupply: BigNumber;
          lpAllowance: BigNumber;
          reserve0: BigNumber;
          reserve1: BigNumber;
          rewardDebt: BigNumber;
          pending: BigNumber;
        })[]
      ]
    >;

    setContracts(
      chef_: string,
      maker_: string,
      joe_: string,
      WAVAX_: string,
      joeFactory_: string,
      pangolinFactory_: string,
      bar_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setContracts(address,address,address,address,address,address,address)"(
      chef_: string,
      maker_: string,
      joe_: string,
      WAVAX_: string,
      joeFactory_: string,
      pangolinFactory_: string,
      bar_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  WAVAX(overrides?: CallOverrides): Promise<string>;

  "WAVAX()"(overrides?: CallOverrides): Promise<string>;

  bar(overrides?: CallOverrides): Promise<string>;

  "bar()"(overrides?: CallOverrides): Promise<string>;

  chef(overrides?: CallOverrides): Promise<string>;

  "chef()"(overrides?: CallOverrides): Promise<string>;

  findBalances(
    who: string,
    addresses: string[],
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { token: string; balance: BigNumber })[]>;

  "findBalances(address,address[])"(
    who: string,
    addresses: string[],
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { token: string; balance: BigNumber })[]>;

  findPools(
    who: string,
    pids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber] & { pid: BigNumber; balance: BigNumber })[]
  >;

  "findPools(address,uint256[])"(
    who: string,
    pids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber] & { pid: BigNumber; balance: BigNumber })[]
  >;

  getAVAXRate(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getAVAXRate(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBalances(
    who: string,
    addresses: string[],
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      token: string;
      totalSupply: BigNumber;
      balance: BigNumber;
      nonce: BigNumber;
      rate: BigNumber;
    })[]
  >;

  "getBalances(address,address[])"(
    who: string,
    addresses: string[],
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      token: string;
      totalSupply: BigNumber;
      balance: BigNumber;
      nonce: BigNumber;
      rate: BigNumber;
    })[]
  >;

  getPairs(
    factory: string,
    fromID: BigNumberish,
    toID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([string, string, string, BigNumber] & {
      token: string;
      token0: string;
      token1: string;
      totalSupply: BigNumber;
    })[]
  >;

  "getPairs(address,uint256,uint256)"(
    factory: string,
    fromID: BigNumberish,
    toID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([string, string, string, BigNumber] & {
      token: string;
      token0: string;
      token1: string;
      totalSupply: BigNumber;
    })[]
  >;

  getPools(
    pids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, BigNumber] & {
        totalAllocPoint: BigNumber;
        poolLength: BigNumber;
      },
      ([
        BigNumber,
        string,
        BigNumber,
        boolean,
        string,
        string,
        string,
        string,
        string,
        number
      ] & {
        pid: BigNumber;
        lpToken: string;
        allocPoint: BigNumber;
        isPair: boolean;
        factory: string;
        token0: string;
        token1: string;
        name: string;
        symbol: string;
        decimals: number;
      })[]
    ]
  >;

  "getPools(uint256[])"(
    pids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, BigNumber] & {
        totalAllocPoint: BigNumber;
        poolLength: BigNumber;
      },
      ([
        BigNumber,
        string,
        BigNumber,
        boolean,
        string,
        string,
        string,
        string,
        string,
        number
      ] & {
        pid: BigNumber;
        lpToken: string;
        allocPoint: BigNumber;
        isPair: boolean;
        factory: string;
        token0: string;
        token1: string;
        name: string;
        symbol: string;
        decimals: number;
      })[]
    ]
  >;

  getTokenInfo(
    addresses: string[],
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, string, string, string] & {
      token: string;
      decimals: BigNumber;
      name: string;
      symbol: string;
      DOMAIN_SEPARATOR: string;
    })[]
  >;

  "getTokenInfo(address[])"(
    addresses: string[],
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, string, string, string] & {
      token: string;
      decimals: BigNumber;
      name: string;
      symbol: string;
      DOMAIN_SEPARATOR: string;
    })[]
  >;

  getUIInfo(
    who: string,
    factoryAddresses: string[],
    currency: string,
    masterContracts: string[],
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      ([string, BigNumber] & { factory: string; allPairsLength: BigNumber })[],
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      avaxBalance: BigNumber;
      joeBalance: BigNumber;
      joeBarBalance: BigNumber;
      xjoeBalance: BigNumber;
      xjoeSupply: BigNumber;
      joeBarAllowance: BigNumber;
      factories: ([string, BigNumber] & {
        factory: string;
        allPairsLength: BigNumber;
      })[];
      avaxRate: BigNumber;
      joeRate: BigNumber;
      btcRate: BigNumber;
      pendingJoe: BigNumber;
      blockTimeStamp: BigNumber;
    }
  >;

  "getUIInfo(address,address[],address,address[])"(
    who: string,
    factoryAddresses: string[],
    currency: string,
    masterContracts: string[],
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      ([string, BigNumber] & { factory: string; allPairsLength: BigNumber })[],
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      avaxBalance: BigNumber;
      joeBalance: BigNumber;
      joeBarBalance: BigNumber;
      xjoeBalance: BigNumber;
      xjoeSupply: BigNumber;
      joeBarAllowance: BigNumber;
      factories: ([string, BigNumber] & {
        factory: string;
        allPairsLength: BigNumber;
      })[];
      avaxRate: BigNumber;
      joeRate: BigNumber;
      btcRate: BigNumber;
      pendingJoe: BigNumber;
      blockTimeStamp: BigNumber;
    }
  >;

  joe(overrides?: CallOverrides): Promise<string>;

  "joe()"(overrides?: CallOverrides): Promise<string>;

  joeFactory(overrides?: CallOverrides): Promise<string>;

  "joeFactory()"(overrides?: CallOverrides): Promise<string>;

  maker(overrides?: CallOverrides): Promise<string>;

  "maker()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pangolinFactory(overrides?: CallOverrides): Promise<string>;

  "pangolinFactory()"(overrides?: CallOverrides): Promise<string>;

  pollPairs(
    who: string,
    addresses: string[],
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      token: string;
      reserve0: BigNumber;
      reserve1: BigNumber;
      totalSupply: BigNumber;
      balance: BigNumber;
    })[]
  >;

  "pollPairs(address,address[])"(
    who: string,
    addresses: string[],
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      token: string;
      reserve0: BigNumber;
      reserve1: BigNumber;
      totalSupply: BigNumber;
      balance: BigNumber;
    })[]
  >;

  pollPools(
    who: string,
    pids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      pid: BigNumber;
      balance: BigNumber;
      totalSupply: BigNumber;
      lpBalance: BigNumber;
      lpTotalSupply: BigNumber;
      lpAllowance: BigNumber;
      reserve0: BigNumber;
      reserve1: BigNumber;
      rewardDebt: BigNumber;
      pending: BigNumber;
    })[]
  >;

  "pollPools(address,uint256[])"(
    who: string,
    pids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      pid: BigNumber;
      balance: BigNumber;
      totalSupply: BigNumber;
      lpBalance: BigNumber;
      lpTotalSupply: BigNumber;
      lpAllowance: BigNumber;
      reserve0: BigNumber;
      reserve1: BigNumber;
      rewardDebt: BigNumber;
      pending: BigNumber;
    })[]
  >;

  setContracts(
    chef_: string,
    maker_: string,
    joe_: string,
    WAVAX_: string,
    joeFactory_: string,
    pangolinFactory_: string,
    bar_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setContracts(address,address,address,address,address,address,address)"(
    chef_: string,
    maker_: string,
    joe_: string,
    WAVAX_: string,
    joeFactory_: string,
    pangolinFactory_: string,
    bar_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    WAVAX(overrides?: CallOverrides): Promise<string>;

    "WAVAX()"(overrides?: CallOverrides): Promise<string>;

    bar(overrides?: CallOverrides): Promise<string>;

    "bar()"(overrides?: CallOverrides): Promise<string>;

    chef(overrides?: CallOverrides): Promise<string>;

    "chef()"(overrides?: CallOverrides): Promise<string>;

    findBalances(
      who: string,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<([string, BigNumber] & { token: string; balance: BigNumber })[]>;

    "findBalances(address,address[])"(
      who: string,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<([string, BigNumber] & { token: string; balance: BigNumber })[]>;

    findPools(
      who: string,
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber] & { pid: BigNumber; balance: BigNumber })[]
    >;

    "findPools(address,uint256[])"(
      who: string,
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber] & { pid: BigNumber; balance: BigNumber })[]
    >;

    getAVAXRate(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getAVAXRate(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalances(
      who: string,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token: string;
        totalSupply: BigNumber;
        balance: BigNumber;
        nonce: BigNumber;
        rate: BigNumber;
      })[]
    >;

    "getBalances(address,address[])"(
      who: string,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token: string;
        totalSupply: BigNumber;
        balance: BigNumber;
        nonce: BigNumber;
        rate: BigNumber;
      })[]
    >;

    getPairs(
      factory: string,
      fromID: BigNumberish,
      toID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([string, string, string, BigNumber] & {
        token: string;
        token0: string;
        token1: string;
        totalSupply: BigNumber;
      })[]
    >;

    "getPairs(address,uint256,uint256)"(
      factory: string,
      fromID: BigNumberish,
      toID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([string, string, string, BigNumber] & {
        token: string;
        token0: string;
        token1: string;
        totalSupply: BigNumber;
      })[]
    >;

    getPools(
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          totalAllocPoint: BigNumber;
          poolLength: BigNumber;
        },
        ([
          BigNumber,
          string,
          BigNumber,
          boolean,
          string,
          string,
          string,
          string,
          string,
          number
        ] & {
          pid: BigNumber;
          lpToken: string;
          allocPoint: BigNumber;
          isPair: boolean;
          factory: string;
          token0: string;
          token1: string;
          name: string;
          symbol: string;
          decimals: number;
        })[]
      ]
    >;

    "getPools(uint256[])"(
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          totalAllocPoint: BigNumber;
          poolLength: BigNumber;
        },
        ([
          BigNumber,
          string,
          BigNumber,
          boolean,
          string,
          string,
          string,
          string,
          string,
          number
        ] & {
          pid: BigNumber;
          lpToken: string;
          allocPoint: BigNumber;
          isPair: boolean;
          factory: string;
          token0: string;
          token1: string;
          name: string;
          symbol: string;
          decimals: number;
        })[]
      ]
    >;

    getTokenInfo(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, string, string, string] & {
        token: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
        DOMAIN_SEPARATOR: string;
      })[]
    >;

    "getTokenInfo(address[])"(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, string, string, string] & {
        token: string;
        decimals: BigNumber;
        name: string;
        symbol: string;
        DOMAIN_SEPARATOR: string;
      })[]
    >;

    getUIInfo(
      who: string,
      factoryAddresses: string[],
      currency: string,
      masterContracts: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        ([string, BigNumber] & {
          factory: string;
          allPairsLength: BigNumber;
        })[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        avaxBalance: BigNumber;
        joeBalance: BigNumber;
        joeBarBalance: BigNumber;
        xjoeBalance: BigNumber;
        xjoeSupply: BigNumber;
        joeBarAllowance: BigNumber;
        factories: ([string, BigNumber] & {
          factory: string;
          allPairsLength: BigNumber;
        })[];
        avaxRate: BigNumber;
        joeRate: BigNumber;
        btcRate: BigNumber;
        pendingJoe: BigNumber;
        blockTimeStamp: BigNumber;
      }
    >;

    "getUIInfo(address,address[],address,address[])"(
      who: string,
      factoryAddresses: string[],
      currency: string,
      masterContracts: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        ([string, BigNumber] & {
          factory: string;
          allPairsLength: BigNumber;
        })[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        avaxBalance: BigNumber;
        joeBalance: BigNumber;
        joeBarBalance: BigNumber;
        xjoeBalance: BigNumber;
        xjoeSupply: BigNumber;
        joeBarAllowance: BigNumber;
        factories: ([string, BigNumber] & {
          factory: string;
          allPairsLength: BigNumber;
        })[];
        avaxRate: BigNumber;
        joeRate: BigNumber;
        btcRate: BigNumber;
        pendingJoe: BigNumber;
        blockTimeStamp: BigNumber;
      }
    >;

    joe(overrides?: CallOverrides): Promise<string>;

    "joe()"(overrides?: CallOverrides): Promise<string>;

    joeFactory(overrides?: CallOverrides): Promise<string>;

    "joeFactory()"(overrides?: CallOverrides): Promise<string>;

    maker(overrides?: CallOverrides): Promise<string>;

    "maker()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pangolinFactory(overrides?: CallOverrides): Promise<string>;

    "pangolinFactory()"(overrides?: CallOverrides): Promise<string>;

    pollPairs(
      who: string,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token: string;
        reserve0: BigNumber;
        reserve1: BigNumber;
        totalSupply: BigNumber;
        balance: BigNumber;
      })[]
    >;

    "pollPairs(address,address[])"(
      who: string,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token: string;
        reserve0: BigNumber;
        reserve1: BigNumber;
        totalSupply: BigNumber;
        balance: BigNumber;
      })[]
    >;

    pollPools(
      who: string,
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        pid: BigNumber;
        balance: BigNumber;
        totalSupply: BigNumber;
        lpBalance: BigNumber;
        lpTotalSupply: BigNumber;
        lpAllowance: BigNumber;
        reserve0: BigNumber;
        reserve1: BigNumber;
        rewardDebt: BigNumber;
        pending: BigNumber;
      })[]
    >;

    "pollPools(address,uint256[])"(
      who: string,
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        pid: BigNumber;
        balance: BigNumber;
        totalSupply: BigNumber;
        lpBalance: BigNumber;
        lpTotalSupply: BigNumber;
        lpAllowance: BigNumber;
        reserve0: BigNumber;
        reserve1: BigNumber;
        rewardDebt: BigNumber;
        pending: BigNumber;
      })[]
    >;

    setContracts(
      chef_: string,
      maker_: string,
      joe_: string,
      WAVAX_: string,
      joeFactory_: string,
      pangolinFactory_: string,
      bar_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setContracts(address,address,address,address,address,address,address)"(
      chef_: string,
      maker_: string,
      joe_: string,
      WAVAX_: string,
      joeFactory_: string,
      pangolinFactory_: string,
      bar_: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    WAVAX(overrides?: CallOverrides): Promise<BigNumber>;

    "WAVAX()"(overrides?: CallOverrides): Promise<BigNumber>;

    bar(overrides?: CallOverrides): Promise<BigNumber>;

    "bar()"(overrides?: CallOverrides): Promise<BigNumber>;

    chef(overrides?: CallOverrides): Promise<BigNumber>;

    "chef()"(overrides?: CallOverrides): Promise<BigNumber>;

    findBalances(
      who: string,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "findBalances(address,address[])"(
      who: string,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    findPools(
      who: string,
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "findPools(address,uint256[])"(
      who: string,
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAVAXRate(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getAVAXRate(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalances(
      who: string,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBalances(address,address[])"(
      who: string,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairs(
      factory: string,
      fromID: BigNumberish,
      toID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPairs(address,uint256,uint256)"(
      factory: string,
      fromID: BigNumberish,
      toID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPools(
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPools(uint256[])"(
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenInfo(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenInfo(address[])"(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUIInfo(
      who: string,
      factoryAddresses: string[],
      currency: string,
      masterContracts: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUIInfo(address,address[],address,address[])"(
      who: string,
      factoryAddresses: string[],
      currency: string,
      masterContracts: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joe(overrides?: CallOverrides): Promise<BigNumber>;

    "joe()"(overrides?: CallOverrides): Promise<BigNumber>;

    joeFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "joeFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    maker(overrides?: CallOverrides): Promise<BigNumber>;

    "maker()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pangolinFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "pangolinFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    pollPairs(
      who: string,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pollPairs(address,address[])"(
      who: string,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pollPools(
      who: string,
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pollPools(address,uint256[])"(
      who: string,
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setContracts(
      chef_: string,
      maker_: string,
      joe_: string,
      WAVAX_: string,
      joeFactory_: string,
      pangolinFactory_: string,
      bar_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setContracts(address,address,address,address,address,address,address)"(
      chef_: string,
      maker_: string,
      joe_: string,
      WAVAX_: string,
      joeFactory_: string,
      pangolinFactory_: string,
      bar_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WAVAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WAVAX()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bar()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chef(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "chef()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    findBalances(
      who: string,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "findBalances(address,address[])"(
      who: string,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    findPools(
      who: string,
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "findPools(address,uint256[])"(
      who: string,
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAVAXRate(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAVAXRate(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalances(
      who: string,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBalances(address,address[])"(
      who: string,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPairs(
      factory: string,
      fromID: BigNumberish,
      toID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPairs(address,uint256,uint256)"(
      factory: string,
      fromID: BigNumberish,
      toID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPools(
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPools(uint256[])"(
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenInfo(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenInfo(address[])"(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUIInfo(
      who: string,
      factoryAddresses: string[],
      currency: string,
      masterContracts: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUIInfo(address,address[],address,address[])"(
      who: string,
      factoryAddresses: string[],
      currency: string,
      masterContracts: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "joe()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    joeFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "joeFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maker()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pangolinFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pangolinFactory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pollPairs(
      who: string,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pollPairs(address,address[])"(
      who: string,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pollPools(
      who: string,
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pollPools(address,uint256[])"(
      who: string,
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setContracts(
      chef_: string,
      maker_: string,
      joe_: string,
      WAVAX_: string,
      joeFactory_: string,
      pangolinFactory_: string,
      bar_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setContracts(address,address,address,address,address,address,address)"(
      chef_: string,
      maker_: string,
      joe_: string,
      WAVAX_: string,
      joeFactory_: string,
      pangolinFactory_: string,
      bar_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
